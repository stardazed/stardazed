sort key:

31 bits:

Essentially take the key from Stingray (http://bitsquid.blogspot.com/2017/02/stingray-renderer-walkthrough-4-sorting.html)
and remove the 32 user bits.

MSB [ 00000000 00000000 00000000 00000000 ] LSB
      ^^       ^  ^^                 ^
      ||       |  ||                 \- 3 bits - Shader System (Pass Immediate)
      ||       |  |\- 16 bits - Depth
      ||       |  \- 1 bit - Instance bit
      ||       |  
      ||       \- 3 bits - Shader System (Pass Deferred)
      |\- 7 bits - Layer index
      \- MSB unused (is the sign but in JS)

Ignore the instance bit for now and probably abuse their layer system to mean
whatever the hell I think it should mean.



-------

export type VertexSkinning = "2bone" | "4bone";
export type VertexColours = "per-vertex";

export type DynamicLighting = "vertex" | "phong" | "blinn" | "cooktorrance";
export type IBLLighting = "singlecube";
export type LightMapping = "plain";
export type ShadowMapping = "vsm";

export type NormalMapping = "perturb";
export type HeightMapping = "simple" | "parallax"; // | "conic"

export type ValueChannel = "fixed" | "map";

export interface PBRMetallicResponse {
	name: "pbr-metallic";
	albedo: ValueChannel;
	roughness: ValueChannel;
	metallic: ValueChannel;
}

export interface PBRSpecularResponse {
	name: "pbr-specular";
	albedo: ValueChannel;
	specular: ValueChannel;
	roughness: ValueChannel;
}

export type ColourResponse = PBRMetallicResponse | PBRSpecularResponse;

export interface StandardShaderOptions {
	// vertex features
	vertexSkinning?: VertexSkinning;
	vertexColours?: VertexColours;

	// lighting
	dynamicLighting?: DynamicLighting;
	iblLighting?: IBLLighting;
	lightMapping?: LightMapping;
	shadowMapping?: ShadowMapping;

	// bump / height
	normalMapping?: NormalMapping;
	heightMapping?: HeightMapping;

	// colour
	colour: ColourResponse;
	emissive?: ValueChannel;
	alpha?: ValueChannel;
}

--------

interface Mesh {
	layout: VertexLayout;
	vertexBuffers: VertexBuffer[];
	indexBuffer?: IndexBuffer;
	subMeshes: {
		type: PrimitiveType;
		fromElement: number;
		elementCount: number;
		materialIx: number; // mesh-local index (starting at 0)
	}[];
}

interface Material {
	shader: Shader;
	// shader config
}

interface RenderCommand {
	shader: Shader;
	mesh: Mesh;
	subMeshIndex: number;
}


--------


const enum DSAttachmentReq {
	DontCare,
	Required
}

Pipeline.create({
	vertexShader: `
		void main() {}
	`,
	fragmentShader: `
		precision highp float;
		void main() {}
	`,
	attributes: {
		"vertexPos_model": meshdata.VertexAttrRole.Position
	},
	colourBuffers: [PixelFormat.RGBA8],
	depthBuffer: DSAttachmentReq.DontCare,
	stencilBuffer: DSAttachmentReq.DontCare
});


Materials.create({
	name: "something",
	pipeline: p1,

	colourMask: { red: false, green: true, blue: true, alpha: true },
	depthMask:
});


--------------

update:
	parallel foreach 

mainPass:
	drawCalls.sort();
	for each drawCall as dc
		if dc.material !== curMaterial
			applyMaterial(dc.material)

