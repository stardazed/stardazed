{"version":3,"file":"index.esm.js","sources":["../src/shapes.ts","../src/physicsworld.ts","../src/index.ts"],"sourcesContent":["/**\n * physics/shapes - shape definitions and creation\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { Float3, NumArray } from \"@stardazed/core\";\n\nexport const enum PhysicsShapeType {\n\tNone,\n\tBox,\n\tSphere,\n\tCapsule,\n\tCylinder,\n\tCone,\n\tPlane,\n\tConvexHull,\n\tMesh,\n\tHeightField\n}\n\nexport interface BoxShapeDescriptor {\n\ttype: PhysicsShapeType.Box;\n\thalfExtents: Float3;\n\tmargin?: number;\n\tscale?: Float3;\n}\n\nexport interface SphereShapeDescriptor {\n\ttype: PhysicsShapeType.Sphere;\n\tradius: number;\n\tmargin?: number;\n\tscale?: Float3;\n}\n\nexport interface CapsuleShapeDescriptor {\n\ttype: PhysicsShapeType.Capsule;\n\tradius: number;\n\theight: number;\n\torientation: Ammo.AxisIndex;\n\tmargin?: number;\n\tscale?: Float3;\n}\n\nexport interface CylinderShapeDescriptor {\n\ttype: PhysicsShapeType.Cylinder;\n\thalfExtents: Float3;\n\torientation: Ammo.AxisIndex;\n\tmargin?: number;\n\tscale?: Float3;\n}\n\nexport interface ConeShapeDescriptor {\n\ttype: PhysicsShapeType.Cone;\n\tradius: number;\n\theight: number;\n\torientation: Ammo.AxisIndex;\n\tscale?: Float3;\n}\n\nexport interface PlaneShapeDescriptor {\n\ttype: PhysicsShapeType.Plane;\n\tplaneNormal: Float3;\n\tplaneConstant: number;\n\tscale?: Float3;\n}\n\nexport interface ConvexHullShapeDescriptor {\n\ttype: PhysicsShapeType.ConvexHull;\n\tpointCount: number;\n\tpoints: NumArray; // vec3s laid out linearly\n\tmargin?: number;\n\tscale?: Float3;\n}\n\nexport interface MeshShapeDescriptor {\n\ttype: PhysicsShapeType.Mesh;\n\t// geom: geometry.Geometry;\n\tsubMeshIndex?: number;\n\tconvex?: boolean;\n\tmargin?: number; // convex meshes only\n\tscale?: Float3;\n}\n\nexport interface HeightFieldShapeDescriptor {\n\t// constructor(heightStickWidth: number, heightStickLength: number, heightfieldData: VoidPtr, heightScale: number, minHeight: number, maxHeight: number, upAxis: AxisIndex, hdt: PHY_ScalarType, flipQuadEdges: boolean);\n\ttype: PhysicsShapeType.HeightField;\n\tgridWidth: number;\n\tgridDepth: number;\n\tminHeight: number;\n\tmaxHeight: number;\n\theightScale?: number;\n\torientation?: Ammo.AxisIndex;\n\tmargin?: number;\n\tscale?: Float3;\n\n\t// TODO: finish later\n}\n\nexport type PhysicsShapeDescriptor =\n\t// convex\n\tBoxShapeDescriptor | SphereShapeDescriptor | CapsuleShapeDescriptor | CylinderShapeDescriptor | ConeShapeDescriptor | ConvexHullShapeDescriptor | \n\t// concave\n\tPlaneShapeDescriptor | HeightFieldShapeDescriptor |\n\t// convex or concave\n\tMeshShapeDescriptor;\n\nexport interface PhysicsShape {\n\treadonly type: PhysicsShapeType;\n\treadonly shape: Ammo.btCollisionShape;\n}\n\n// ----\n\nfunction makeAmmoVec3(v3: NumArray, offset = 0) {\n\treturn new Ammo.btVector3(v3[0 + offset], v3[1 + offset], v3[2 + offset]);\n}\n\n/*\nfunction createMeshShape(geom: geometry.Geometry, subMeshIndex?: number, convex?: boolean) {\n\tconst triView = (subMeshIndex !== undefined) ?\n\t\tgeometry.triangleViewForSubMesh(geom, subMeshIndex) :\n\t\tgeometry.triangleViewForGeometry(geom);\n\tif (! triView) {\n\t\treturn undefined;\n\t}\n\tconst posAttr = geometry.findAttributeOfRoleInGeometry(geom, geometry.VertexAttributeRole.Position);\n\tif (! posAttr) {\n\t\tconsole.warn(\"createMeshShape: the geometry does not have a position attribute\", geom);\n\t\treturn undefined;\n\t}\n\tconst posView = new geometry.VertexBufferAttributeView(posAttr.vertexBuffer, posAttr.attr);\n\tconst baseVertex = posView.fromVertex;\n\n\t// use conservative guess if 16-bit indexes will work\n\tconst use32bitIndexes = elementCountForPrimitiveCount(triView.primitiveCount) >= UInt16.max;\n\tconst collMesh = new Ammo.btTriangleMesh(use32bitIndexes);\n\n\ttriView.forEach(face => {\n\t\tconst posA = posView.copyItem(face.a() - baseVertex);\n\t\tconst posB = posView.copyItem(face.b() - baseVertex);\n\t\tconst posC = posView.copyItem(face.c() - baseVertex);\n\n\t\tcollMesh.addTriangle(\n\t\t\tnew Ammo.btVector3(posA[0], posA[1], posA[2]),\n\t\t\tnew Ammo.btVector3(posB[0], posB[1], posB[2]),\n\t\t\tnew Ammo.btVector3(posC[0], posC[1], posC[2])\n\t\t);\n\t});\n\n\treturn convex ? new Ammo.btConvexTriangleMeshShape(collMesh, true) : new Ammo.btBvhTriangleMeshShape(collMesh, true, true);\n}\n*/\n\nexport function makeShape(desc: PhysicsShapeDescriptor): PhysicsShape | undefined {\n\tlet shape: Ammo.btCollisionShape | undefined;\n\tswitch (desc.type) {\n\t\tcase PhysicsShapeType.Box: {\n\t\t\tshape = new Ammo.btBoxShape(makeAmmoVec3(desc.halfExtents));\n\t\t\tbreak;\n\t\t}\n\t\tcase PhysicsShapeType.Sphere: {\n\t\t\tshape = new Ammo.btSphereShape(desc.radius);\n\t\t\tbreak;\n\t\t}\n\t\tcase PhysicsShapeType.Capsule: {\n\t\t\tif (desc.orientation === Ammo.AxisIndex.Y) {\n\t\t\t\tshape = new Ammo.btCapsuleShape(desc.radius, desc.height);\n\t\t\t}\n\t\t\telse if (desc.orientation === Ammo.AxisIndex.X) {\n\t\t\t\tshape = new Ammo.btCapsuleShapeX(desc.radius, desc.height);\n\t\t\t}\n\t\t\telse /* AxisIndex.Z */ {\n\t\t\t\tshape = new Ammo.btCapsuleShapeZ(desc.radius, desc.height);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase PhysicsShapeType.Cylinder: {\n\t\t\tconst halfExtents = makeAmmoVec3(desc.halfExtents);\n\t\t\tif (desc.orientation === Ammo.AxisIndex.Y) {\n\t\t\t\tshape = new Ammo.btCylinderShape(halfExtents);\n\t\t\t}\n\t\t\telse if (desc.orientation === Ammo.AxisIndex.X) {\n\t\t\t\tshape = new Ammo.btCylinderShapeX(halfExtents);\n\t\t\t}\n\t\t\telse /* AxisIndex.Z */ {\n\t\t\t\tshape = new Ammo.btCylinderShapeZ(halfExtents);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase PhysicsShapeType.Cone: {\n\t\t\tif (desc.orientation === Ammo.AxisIndex.Y) {\n\t\t\t\tshape = new Ammo.btConeShape(desc.radius, desc.height);\n\t\t\t}\n\t\t\telse if (desc.orientation === Ammo.AxisIndex.X) {\n\t\t\t\tshape = new Ammo.btConeShapeX(desc.radius, desc.height);\n\t\t\t}\n\t\t\telse /* AxisIndex.Z */ {\n\t\t\t\tshape = new Ammo.btConeShapeZ(desc.radius, desc.height);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase PhysicsShapeType.Plane: {\n\t\t\tshape = new Ammo.btStaticPlaneShape(makeAmmoVec3(desc.planeNormal), desc.planeConstant);\n\t\t\tbreak;\n\t\t}\n\t\tcase PhysicsShapeType.ConvexHull: {\n\t\t\tconst hull = new Ammo.btConvexHullShape();\n\t\t\tconst endOffset = desc.pointCount * 3;\n\t\t\tconst lastOffset = endOffset - 3;\n\t\t\tfor (let offset = 0; offset < endOffset; offset += 3) {\n\t\t\t\thull.addPoint(makeAmmoVec3(desc.points, offset), offset === lastOffset);\n\t\t\t}\n\t\t\tshape = hull;\n\t\t\tbreak;\n\t\t}\n\t\t// case PhysicsShapeType.Mesh: {\n\t\t// \tshape = createMeshShape(desc.geom, desc.subMeshIndex, desc.convex);\n\t\t// \tbreak;\n\t\t// }\n\t\tcase PhysicsShapeType.HeightField: {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (! shape) {\n\t\tconsole.error(\"physics.makeShape: could not create shape\", desc);\n\t\treturn undefined;\n\t}\n\tif (desc.scale) {\n\t\tshape.setLocalScaling(makeAmmoVec3(desc.scale));\n\t}\n\tif (\n\t\t(\n\t\t\t(desc.type === PhysicsShapeType.Mesh && desc.convex)\n\t\t\t||\n\t\t\t(desc.type !== PhysicsShapeType.Cone && desc.type !== PhysicsShapeType.Plane)\n\t\t)\n\t\t&& desc.margin !== undefined\n\t) {\n\t\tshape.setMargin(desc.margin);\n\t}\n\n\treturn { type: desc.type, shape };\n}\n","/**\n * physics/physicsworld - physics configuration and world container\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { Float3, Float4 } from \"@stardazed/core\";\nimport { vec3 } from \"@stardazed/math\";\nimport { PhysicsShape } from \"./shapes\";\n\nexport interface PhysicsConfig {\n\tbroadphaseSize: \"small\" | \"large\";\n\tworldMin: number | Float3;\n\tworldMax: number | Float3;\n\tgravity: number | Float3;\n\tdefaultLinearDrag: number;\n\tdefaultAngularDrag: number;\n\tdefaultFriction: number;\n\tdefaultRestitution: number;\n}\n\nexport interface RaycastHit {\n\tcollisionObject: Ammo.btCollisionObjectConst;\n\thitPointWorld: number[];\n\thitNormalWorld: number[];\n\thitFraction: number;\n}\n\nexport function makeDefaultPhysicsConfig(): PhysicsConfig {\n\treturn {\n\t\tbroadphaseSize: \"small\",\n\t\tworldMin: -100,\n\t\tworldMax: 100,\n\t\tgravity: -9.81,\n\t\tdefaultLinearDrag: 0,     // \\\n\t\tdefaultAngularDrag: 0.05, // | - these defaults are what Unity uses â€” now let's hope they have a similar effect\n\t\tdefaultFriction: 0.6,     // |\n\t\tdefaultRestitution: 0     // /\n\t};\n}\n\nexport interface RigidBodyDescriptor {\n\tmass: number;\n\tshape: PhysicsShape;\n\tisTrigger?: boolean;\n\tisKinematic?: boolean;\n\tisScripted?: boolean;\n\tworldPos?: Float3;\n\tworldRot?: Float4;\n\tlinearDrag?: number;\n\tangularDrag?: number;\n\tfriction?: number; // Bullet/Ammo does not support separate values for static and dynamic friction\n\trestitution?: number; // bounciness in Unity\n\tpositionConstraints?: [boolean, boolean, boolean];\n\trotationConstraints?: [boolean, boolean, boolean];\n\tcollisionFilterGroup?: number;\n\tcollisionFilterMask?: number;\n}\n\nexport interface GhostDescriptor {\n\tshape: PhysicsShape;\n\tworldPos?: Float3;\n\tworldRot?: Float4;\n}\n\n/*\nexport interface CharacterDescriptor {\n\tshape: PhysicsShape;\n\tstepHeight: number;\n\tworldPos?: Float3;\n\tworldRot?: Float4;\n}\n*/\n\ninterface RayResultStruct {\n\tnew(from: Ammo.btVector3, to: Ammo.btVector3): Ammo.RayResultCallback;\n}\n\nexport class PhysicsWorld {\n\tprivate world_: Ammo.btDiscreteDynamicsWorld;\n\tprivate defaultLinearDrag_: number;\n\tprivate defaultAngularDrag_: number;\n\tprivate defaultFriction_: number;\n\tprivate defaultRestitution_: number;\n\t// private lag_: number;\n\tprivate haveGhosts_: boolean;\n\n\t// private readonly tempBtTrans_: Ammo.btTransform;\n\t\n\tconstructor(config: PhysicsConfig) {\n\t\tconst collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();\n\t\tconst dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);\n\n\t\tconst worldMin = typeof config.worldMin === \"number\" ?\n\t\t\tnew Ammo.btVector3(config.worldMin, config.worldMin, config.worldMin) :\n\t\t\tnew Ammo.btVector3(config.worldMin[0], config.worldMin[1], config.worldMin[2]);\n\t\tconst worldMax = typeof config.worldMax === \"number\" ?\n\t\t\tnew Ammo.btVector3(config.worldMax, config.worldMax, config.worldMax) :\n\t\t\tnew Ammo.btVector3(config.worldMax[0], config.worldMax[1], config.worldMax[2]);\n\n\t\tconst broadphase = config.broadphaseSize === \"small\" ?\n\t\t\tnew Ammo.btAxisSweep3(worldMin, worldMax) :\n\t\t\tnew Ammo.btDbvtBroadphase();\n\t\tconst solver = new Ammo.btSequentialImpulseConstraintSolver();\n\n\t\tconst world = this.world_ = new Ammo.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n\n\t\tconst gravity = typeof config.gravity === \"number\" ?\n\t\t\tnew Ammo.btVector3(0, config.gravity, 0) :\n\t\t\tnew Ammo.btVector3(config.gravity[0], config.gravity[1], config.gravity[2]);\n\t\tworld.setGravity(gravity);\n\n\t\tthis.defaultLinearDrag_ = config.defaultLinearDrag;\n\t\tthis.defaultAngularDrag_ = config.defaultAngularDrag;\n\t\tthis.defaultFriction_ = config.defaultFriction;\n\t\tthis.defaultRestitution_ = config.defaultRestitution;\n\n\t\t// this.tempBtTrans_ = new Ammo.btTransform();\n\t\t// this.lag_ = 0;\n\t\tthis.haveGhosts_ = false;\n\t}\n\n\tcreateRigidBody(desc: RigidBodyDescriptor) {\n\t\tconst worldPos = desc.worldPos || [0, 0, 0];\n\t\tconst worldRot = desc.worldRot || [0, 0, 0, 1];\n\n\t\tconst ammoTransform = new Ammo.btTransform(\n\t\t\tnew Ammo.btQuaternion(worldRot[0], worldRot[1], worldRot[2], worldRot[3]),\n\t\t\tnew Ammo.btVector3(worldPos[0], worldPos[1], worldPos[2])\n\t\t);\n\t\tconst localInertia = new Ammo.btVector3();\n\t\tif (desc.mass > 0) {\n\t\t\tdesc.shape.shape.calculateLocalInertia(desc.mass, localInertia);\n\t\t}\n\t\tconst rigidBodyDesc = new Ammo.btRigidBodyConstructionInfo(\n\t\t\tdesc.mass,\n\t\t\tnew Ammo.btDefaultMotionState(ammoTransform),\n\t\t\tdesc.shape.shape,\n\t\t\tlocalInertia\n\t\t);\n\n\t\trigidBodyDesc.set_m_linearDamping(desc.linearDrag !== undefined ? desc.linearDrag : this.defaultLinearDrag_);\n\t\trigidBodyDesc.set_m_angularDamping(desc.angularDrag !== undefined ? desc.angularDrag : this.defaultAngularDrag_);\n\t\trigidBodyDesc.set_m_friction(desc.friction !== undefined ? desc.friction : this.defaultFriction_);\n\t\trigidBodyDesc.set_m_restitution(desc.restitution !== undefined ? desc.restitution : this.defaultRestitution_);\n\n\t\tconst body = new Ammo.btRigidBody(rigidBodyDesc);\n\t\tif (desc.isTrigger) {\n\t\t\tbody.setCollisionFlags(body.getCollisionFlags() | Ammo.CollisionFlags.CF_NO_CONTACT_RESPONSE);\n\t\t}\n\t\tif (desc.isKinematic) {\n\t\t\tbody.setCollisionFlags(body.getCollisionFlags() | Ammo.CollisionFlags.CF_KINEMATIC_OBJECT);\n\t\t}\n\t\tif (desc.isScripted) {\n\t\t\tbody.setActivationState(Ammo.ActivationState.DISABLE_DEACTIVATION);\n\t\t}\n\n\t\t// if an axis is constrained, then the scale factor is 0, otherwise 1\n\t\tif (desc.positionConstraints) {\n\t\t\tconst factors = [+!desc.positionConstraints[0], +!desc.positionConstraints[1], +!desc.positionConstraints[2]];\n\t\t\tbody.setLinearFactor(new Ammo.btVector3(factors[0], factors[1], factors[2]));\n\t\t}\n\t\tif (desc.rotationConstraints) {\n\t\t\tconst factors = [+!desc.rotationConstraints[0], +!desc.rotationConstraints[1], +!desc.rotationConstraints[2]];\n\t\t\tbody.setAngularFactor(new Ammo.btVector3(factors[0], factors[1], factors[2]));\n\t\t}\n\n\t\t// collision filtering, by default mimic what Ammo does\n\t\tconst isDynamic = !(body.isStaticObject() || body.isKinematicObject());\n\t\tlet collisionFilterGroup = isDynamic ? Ammo.CollisionFilterGroups.DefaultFilter : Ammo.CollisionFilterGroups.StaticFilter;\n\t\tlet collisionFilterMask = isDynamic ? Ammo.CollisionFilterGroups.AllFilter : Ammo.CollisionFilterGroups.AllFilter ^ Ammo.CollisionFilterGroups.StaticFilter;\n\n\t\t// allow descriptor to override values\n\t\tif (desc.collisionFilterGroup !== undefined) {\n\t\t\tcollisionFilterGroup = desc.collisionFilterGroup & 0xffff;\n\t\t}\n\t\tif (desc.collisionFilterMask !== undefined) {\n\t\t\tcollisionFilterMask = desc.collisionFilterMask & 0xffff;\n\t\t}\n\n\t\tthis.world_.addRigidBody(body, collisionFilterGroup, collisionFilterMask);\n\n\t\treturn body;\n\t}\n\n\tremoveCollisionObject(co: Ammo.btCollisionObject) {\n\t\tconst body = this.asRigidBody(co);\n\t\tif (body) {\n\t\t\tthis.world_.removeRigidBody(body);\n\t\t}\n\t\telse {\n\t\t\tthis.world_.removeCollisionObject(co);\n\t\t}\n\t}\n\n\tcreateGhostTrigger(desc: GhostDescriptor) {\n\t\tconst worldPos = desc.worldPos || [0, 0, 0];\n\t\tconst worldRot = desc.worldRot || [0, 0, 0, 1];\n\n\t\tconst ammoTransform = new Ammo.btTransform(\n\t\t\tnew Ammo.btQuaternion(worldRot[0], worldRot[1], worldRot[2], worldRot[3]),\n\t\t\tnew Ammo.btVector3(worldPos[0], worldPos[1], worldPos[2])\n\t\t);\n\n\t\tconst ghost = new Ammo.btGhostObject();\n\t\tghost.setWorldTransform(ammoTransform);\n\t\tghost.setCollisionShape(desc.shape.shape);\n\t\tghost.setCollisionFlags(ghost.getCollisionFlags() | Ammo.CollisionFlags.CF_NO_CONTACT_RESPONSE);\n\t\t\n\t\tthis.world_.addCollisionObject(ghost, Ammo.CollisionFilterGroups.SensorTrigger, Ammo.CollisionFilterGroups.DefaultFilter);\n\n\t\tif (! this.haveGhosts_) {\n\t\t\tthis.haveGhosts_ = true;\n\t\t\tthis.world_.getPairCache().setInternalGhostPairCallback(new Ammo.btGhostPairCallback());\n\t\t}\n\n\t\treturn ghost;\n\t}\n\n\tasRigidBody(collObj: Ammo.btCollisionObject): Ammo.btRigidBody | undefined {\n\t\tconst rb = Ammo.btRigidBody.prototype.upcast(collObj);\n\t\tif (rb === Ammo.NULL) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn rb as Ammo.btRigidBody;\n\t}\n\n\tasGhostObject(collObj: Ammo.btCollisionObject): Ammo.btGhostObject | undefined {\n\t\tconst rb = Ammo.btGhostObject.prototype.upcast(collObj);\n\t\tif (rb === Ammo.NULL) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn rb as Ammo.btGhostObject;\n\t}\n\n\t/*\n\tcreateCharacter(desc: CharacterDescriptor) {\n\t\tconst worldPos = desc.worldPos || [0, 0, 0];\n\t\tconst worldRot = desc.worldRot || [0, 0, 0, 1];\n\n\t\tconst ammoTransform = new Ammo.btTransform(\n\t\t\tnew Ammo.btQuaternion(worldRot[0], worldRot[1], worldRot[2], worldRot[3]),\n\t\t\tnew Ammo.btVector3(worldPos[0], worldPos[1], worldPos[2])\n\t\t);\n\n\t\tconst ghost = new Ammo.btPairCachingGhostObject();\n\t\tghost.setWorldTransform(ammoTransform);\n\t\tghost.setCollisionShape(desc.shape.shape);\n\t\tghost.setCollisionFlags(Ammo.CollisionFlags.CF_CHARACTER_OBJECT);\n\t\t// this.world_.broadphase.getOverlappingPairCache() -> setInternalGhostPairCallback(new btGhostPairCallback());\n\n\t\tconst controller = new Ammo.btKinematicCharacterController(ghost, desc.shape.shape, desc.stepHeight);\n\t\t// controller.setGravity(-this.world_.getGravity().y());\n\n\t\tthis.world_.addCollisionObject(ghost, Ammo.CollisionFilterGroups.DefaultFilter, Ammo.CollisionFilterGroups.AllFilter);\n\t\tthis.world_.addAction(controller);\n\n\t\treturn controller;\n\t}\n\t*/\n\n\t// FIXME: direct passthrough for now, add proper create/remove\n\taddConstraint(constraint: Ammo.btTypedConstraint, disableCollisionsBetweenLinkedBodies?: boolean) {\n\t\tthis.world_.addConstraint(constraint, disableCollisionsBetweenLinkedBodies);\n\t}\n\n\tremoveConstraint(constraint: Ammo.btTypedConstraint) {\n\t\tthis.world_.removeConstraint(constraint);\n\t}\n\n\tprivate rayCastInternal(resultClass: RayResultStruct, filter: Ammo.CollisionFilterGroups, worldFrom: Float3, worldToOrDir: Float3, maxDist?: number) {\n\t\tif (maxDist !== undefined) {\n\t\t\tvec3.scaleAndAdd(worldToOrDir, worldFrom, worldToOrDir, maxDist);\n\t\t}\n\t\tconst from = new Ammo.btVector3(worldFrom[0], worldFrom[1], worldFrom[2]);\n\t\tconst to = new Ammo.btVector3(worldToOrDir[0], worldToOrDir[1], worldToOrDir[2]);\n\t\tconst result = new resultClass(from, to);\n\t\t\n\t\tresult.set_m_collisionFilterGroup(Ammo.CollisionFilterGroups.AllFilter);\n\t\tresult.set_m_collisionFilterMask(filter);\n\t\t\n\t\tthis.world_.rayTest(from, to, result);\n\t\treturn result;\n\t}\n\n\trayTestTarget(worldFrom: Float3, worldTo: Float3, filter = Ammo.CollisionFilterGroups.AllFilter) {\n\t\treturn this.rayCastInternal(Ammo.ClosestRayResultCallback, filter, worldFrom, worldTo).hasHit();\n\t}\n\n\trayTest(worldFrom: Float3, worldDir: Float3, maxDistance: number, filter = Ammo.CollisionFilterGroups.AllFilter) {\n\t\treturn this.rayCastInternal(Ammo.ClosestRayResultCallback, filter, worldFrom, worldDir, maxDistance).hasHit();\n\t}\n\n\tprivate closestRaycastHit(crr: Ammo.ClosestRayResultCallback): RaycastHit | undefined {\n\t\tif (! crr.hasHit()) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst hitPoint = crr.get_m_hitPointWorld();\n\t\tconst hitNormal = crr.get_m_hitNormalWorld();\n\t\treturn {\n\t\t\tcollisionObject: crr.get_m_collisionObject(),\n\t\t\thitFraction: crr.get_m_closestHitFraction(),\n\t\t\thitPointWorld: [hitPoint.x(), hitPoint.y(), hitPoint.z()],\n\t\t\thitNormalWorld: [hitNormal.x(), hitNormal.y(), hitNormal.z()],\n\t\t};\n\t}\n\n\trayCastClosestTarget(worldFrom: Float3, worldTo: Float3, filter = Ammo.CollisionFilterGroups.AllFilter) {\n\t\tconst result = this.rayCastInternal(Ammo.ClosestRayResultCallback, filter, worldFrom, worldTo) as Ammo.ClosestRayResultCallback;\n\t\treturn this.closestRaycastHit(result);\n\t}\n\n\trayCastClosest(worldFrom: Float3, worldDir: Float3, maxDistance: number, filter = Ammo.CollisionFilterGroups.AllFilter) {\n\t\tconst result = this.rayCastInternal(Ammo.ClosestRayResultCallback, filter, worldFrom, worldDir, maxDistance) as Ammo.ClosestRayResultCallback;\n\t\treturn this.closestRaycastHit(result);\n\t}\n\n\tprivate allRaycastHits(arr: Ammo.AllHitsRayResultCallback): RaycastHit[] {\n\t\tif (! arr.hasHit()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst hits: RaycastHit[] = [];\n\t\tconst cos = arr.get_m_collisionObjects();\n\t\tconst fracts = arr.get_m_hitFractions();\n\t\tconst points = arr.get_m_hitPointWorld();\n\t\tconst normals = arr.get_m_hitNormalWorld();\n\t\tconst hitCount = cos.size();\n\t\tfor (let i = 0; i < hitCount; ++i) {\n\t\t\tconst point = points.at(i);\n\t\t\tconst normal = normals.at(i);\n\t\t\thits.push({\n\t\t\t\tcollisionObject: cos.at(i),\n\t\t\t\thitFraction: fracts.at(i),\n\t\t\t\thitPointWorld: [point.x(), point.y(), point.z()],\n\t\t\t\thitNormalWorld: [normal.x(), normal.y(), normal.z()],\t\n\t\t\t});\n\t\t}\n\t\treturn hits;\n\t}\n\n\trayCastAllTarget(worldFrom: Float3, worldTo: Float3, filter = Ammo.CollisionFilterGroups.AllFilter) {\n\t\tconst result = this.rayCastInternal(Ammo.AllHitsRayResultCallback, filter, worldFrom, worldTo) as Ammo.AllHitsRayResultCallback;\n\t\treturn this.allRaycastHits(result);\n\t}\n\n\trayCastAll(worldFrom: Float3, worldDir: Float3, maxDistance: number, filter = Ammo.CollisionFilterGroups.AllFilter) {\n\t\tconst result = this.rayCastInternal(Ammo.AllHitsRayResultCallback, filter, worldFrom, worldDir, maxDistance) as Ammo.AllHitsRayResultCallback;\n\t\treturn this.allRaycastHits(result);\n\t}\n\n\t/*\n\n\tTODO: move this out to transform system\n\n\tupdate(timeStep: number, colliders: entity.ColliderComponent, transforms: entity.TransformComponent) {\n\t\tthis.lag_ += timeStep;\n\t\tconst stepsPerformed = this.world_.stepSimulation(this.lag_, 8, 1 / 120);\n\t\tthis.lag_ -= stepsPerformed / 120;\n\n\t\tcolliders.forEach((_coll, trans, collObj) => {\n\t\t\tconst rbOrNull = Ammo.btRigidBody.prototype.upcast(collObj);\n\t\t\tif ((rbOrNull as any).a !== 0) {\n\t\t\t\tconst rigidBody = rbOrNull as Ammo.btRigidBody;\n\t\t\t\tif (rigidBody.isActive()) {\n\t\t\t\t\tconst ms = rigidBody.getMotionState();\n\t\t\t\t\tms.getWorldTransform(this.tempBtTrans_);\n\n\t\t\t\t\tconst pos = this.tempBtTrans_.getOrigin();\n\t\t\t\t\tconst rot = this.tempBtTrans_.getRotation();\n\n\t\t\t\t\t// FIXME: if item is parented, make position/rotation parent relative\n\t\t\t\t\ttransforms.setPositionAndRotation(trans, [pos.x(), pos.y(), pos.z()], [rot.x(), rot.y(), rot.z(), rot.w()]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\t*/\n}\n","/**\n * @stardazed/physics - physics simulation\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\n// The Ammo library is loaded dynamically and then becomes available as a\n// global variable. Either the asm.js or the WebAssembly version is loaded\n// depending on availability and compatibility.\n/// <reference types=\"@stardazed/ammo\" />\n\nexport * from \"./shapes\";\nexport * from \"./physicsworld\";\n"],"names":[],"mappings":"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"}