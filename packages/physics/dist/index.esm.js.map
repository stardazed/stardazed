{"version":3,"file":"index.esm.js","sources":["../src/shapes.ts","../../math/src/common.ts","../../math/src/vec3.ts","../src/physicsworld.ts","../src/index.ts"],"sourcesContent":["/**\n * physics/shapes - shape definitions and creation\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { Float3, ConstFloat3, ArrayOfConstNumber } from \"@stardazed/core\";\n\nexport const enum PhysicsShapeType {\n\tNone,\n\tBox,\n\tSphere,\n\tCapsule,\n\tCylinder,\n\tCone,\n\tPlane,\n\tConvexHull,\n\tMesh,\n\tHeightField\n}\n\nexport interface BoxShapeDescriptor {\n\ttype: PhysicsShapeType.Box;\n\thalfExtents: Float3;\n\tmargin?: number;\n\tscale?: ConstFloat3;\n}\n\nexport interface SphereShapeDescriptor {\n\ttype: PhysicsShapeType.Sphere;\n\tradius: number;\n\tmargin?: number;\n\tscale?: ConstFloat3;\n}\n\nexport interface CapsuleShapeDescriptor {\n\ttype: PhysicsShapeType.Capsule;\n\tradius: number;\n\theight: number;\n\torientation: Ammo.AxisIndex;\n\tmargin?: number;\n\tscale?: ConstFloat3;\n}\n\nexport interface CylinderShapeDescriptor {\n\ttype: PhysicsShapeType.Cylinder;\n\thalfExtents: ConstFloat3;\n\torientation: Ammo.AxisIndex;\n\tmargin?: number;\n\tscale?: ConstFloat3;\n}\n\nexport interface ConeShapeDescriptor {\n\ttype: PhysicsShapeType.Cone;\n\tradius: number;\n\theight: number;\n\torientation: Ammo.AxisIndex;\n\tscale?: ConstFloat3;\n}\n\nexport interface PlaneShapeDescriptor {\n\ttype: PhysicsShapeType.Plane;\n\tplaneNormal: ConstFloat3;\n\tplaneConstant: number;\n\tscale?: ConstFloat3;\n}\n\nexport interface ConvexHullShapeDescriptor {\n\ttype: PhysicsShapeType.ConvexHull;\n\tpointCount: number;\n\tpoints: ArrayOfConstNumber; // vec3s laid out linearly\n\tmargin?: number;\n\tscale?: ConstFloat3;\n}\n\nexport interface MeshShapeDescriptor {\n\ttype: PhysicsShapeType.Mesh;\n\t// geom: geometry.Geometry;\n\tsubMeshIndex?: number;\n\tconvex?: boolean;\n\tmargin?: number; // convex meshes only\n\tscale?: ConstFloat3;\n}\n\nexport interface HeightFieldShapeDescriptor {\n\t// constructor(heightStickWidth: number, heightStickLength: number, heightfieldData: VoidPtr, heightScale: number, minHeight: number, maxHeight: number, upAxis: AxisIndex, hdt: PHY_ScalarType, flipQuadEdges: boolean);\n\ttype: PhysicsShapeType.HeightField;\n\tgridWidth: number;\n\tgridDepth: number;\n\tminHeight: number;\n\tmaxHeight: number;\n\theightScale?: number;\n\torientation?: Ammo.AxisIndex;\n\tmargin?: number;\n\tscale?: ConstFloat3;\n\n\t// TODO: finish later\n}\n\nexport type PhysicsShapeDescriptor =\n\t// convex\n\tBoxShapeDescriptor | SphereShapeDescriptor | CapsuleShapeDescriptor | CylinderShapeDescriptor | ConeShapeDescriptor | ConvexHullShapeDescriptor | \n\t// concave\n\tPlaneShapeDescriptor | HeightFieldShapeDescriptor |\n\t// convex or concave\n\tMeshShapeDescriptor;\n\nexport interface PhysicsShape {\n\treadonly type: PhysicsShapeType;\n\treadonly shape: Ammo.btCollisionShape;\n}\n\n// ----\n\nfunction makeAmmoVec3(v3: ArrayOfConstNumber, offset = 0) {\n\treturn new Ammo.btVector3(v3[0 + offset], v3[1 + offset], v3[2 + offset]);\n}\n\n/*\nfunction createMeshShape(geom: geometry.Geometry, subMeshIndex?: number, convex?: boolean) {\n\tconst triView = (subMeshIndex !== undefined) ?\n\t\tgeometry.makeTriangleViewForSubMesh(geom, subMeshIndex) :\n\t\tgeometry.makeTriangleViewForGeometry(geom);\n\tif (! triView) {\n\t\treturn undefined;\n\t}\n\tconst posAttr = geometry.findAttributeOfRoleInGeometry(geom, geometry.VertexAttributeRole.Position);\n\tif (! posAttr) {\n\t\tconsole.warn(\"createMeshShape: the geometry does not have a position attribute\", geom);\n\t\treturn undefined;\n\t}\n\tconst posView = new geometry.VertexBufferAttributeView(posAttr.vertexBuffer, posAttr.attr);\n\tconst baseVertex = posView.baseVertex;\n\n\t// use conservative guess if 16-bit indexes will work\n\tconst use32bitIndexes = triView.count * 3 >= UInt16.max;\n\tconst collMesh = new Ammo.btTriangleMesh(use32bitIndexes);\n\n\ttriView.forEach(face => {\n\t\tconst posA = posView.copyItem(face.a() - baseVertex);\n\t\tconst posB = posView.copyItem(face.b() - baseVertex);\n\t\tconst posC = posView.copyItem(face.c() - baseVertex);\n\n\t\tcollMesh.addTriangle(\n\t\t\tnew Ammo.btVector3(posA[0], posA[1], posA[2]),\n\t\t\tnew Ammo.btVector3(posB[0], posB[1], posB[2]),\n\t\t\tnew Ammo.btVector3(posC[0], posC[1], posC[2])\n\t\t);\n\t});\n\n\treturn convex ? new Ammo.btConvexTriangleMeshShape(collMesh, true) : new Ammo.btBvhTriangleMeshShape(collMesh, true, true);\n}\n*/\n\nexport function makeShape(desc: PhysicsShapeDescriptor): PhysicsShape | undefined {\n\tlet shape: Ammo.btCollisionShape | undefined;\n\tswitch (desc.type) {\n\t\tcase PhysicsShapeType.Box: {\n\t\t\tshape = new Ammo.btBoxShape(makeAmmoVec3(desc.halfExtents));\n\t\t\tbreak;\n\t\t}\n\t\tcase PhysicsShapeType.Sphere: {\n\t\t\tshape = new Ammo.btSphereShape(desc.radius);\n\t\t\tbreak;\n\t\t}\n\t\tcase PhysicsShapeType.Capsule: {\n\t\t\tif (desc.orientation === Ammo.AxisIndex.Y) {\n\t\t\t\tshape = new Ammo.btCapsuleShape(desc.radius, desc.height);\n\t\t\t}\n\t\t\telse if (desc.orientation === Ammo.AxisIndex.X) {\n\t\t\t\tshape = new Ammo.btCapsuleShapeX(desc.radius, desc.height);\n\t\t\t}\n\t\t\telse /* AxisIndex.Z */ {\n\t\t\t\tshape = new Ammo.btCapsuleShapeZ(desc.radius, desc.height);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase PhysicsShapeType.Cylinder: {\n\t\t\tconst halfExtents = makeAmmoVec3(desc.halfExtents);\n\t\t\tif (desc.orientation === Ammo.AxisIndex.Y) {\n\t\t\t\tshape = new Ammo.btCylinderShape(halfExtents);\n\t\t\t}\n\t\t\telse if (desc.orientation === Ammo.AxisIndex.X) {\n\t\t\t\tshape = new Ammo.btCylinderShapeX(halfExtents);\n\t\t\t}\n\t\t\telse /* AxisIndex.Z */ {\n\t\t\t\tshape = new Ammo.btCylinderShapeZ(halfExtents);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase PhysicsShapeType.Cone: {\n\t\t\tif (desc.orientation === Ammo.AxisIndex.Y) {\n\t\t\t\tshape = new Ammo.btConeShape(desc.radius, desc.height);\n\t\t\t}\n\t\t\telse if (desc.orientation === Ammo.AxisIndex.X) {\n\t\t\t\tshape = new Ammo.btConeShapeX(desc.radius, desc.height);\n\t\t\t}\n\t\t\telse /* AxisIndex.Z */ {\n\t\t\t\tshape = new Ammo.btConeShapeZ(desc.radius, desc.height);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase PhysicsShapeType.Plane: {\n\t\t\tshape = new Ammo.btStaticPlaneShape(makeAmmoVec3(desc.planeNormal), desc.planeConstant);\n\t\t\tbreak;\n\t\t}\n\t\tcase PhysicsShapeType.ConvexHull: {\n\t\t\tconst hull = new Ammo.btConvexHullShape();\n\t\t\tconst endOffset = desc.pointCount * 3;\n\t\t\tconst lastOffset = endOffset - 3;\n\t\t\tfor (let offset = 0; offset < endOffset; offset += 3) {\n\t\t\t\thull.addPoint(makeAmmoVec3(desc.points, offset), offset === lastOffset);\n\t\t\t}\n\t\t\tshape = hull;\n\t\t\tbreak;\n\t\t}\n\t\t// case PhysicsShapeType.Mesh: {\n\t\t// \tshape = createMeshShape(desc.geom, desc.subMeshIndex, desc.convex);\n\t\t// \tbreak;\n\t\t// }\n\t\tcase PhysicsShapeType.HeightField: {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (! shape) {\n\t\tconsole.error(\"physics.makeShape: could not create shape\", desc);\n\t\treturn undefined;\n\t}\n\tif (desc.scale) {\n\t\tshape.setLocalScaling(makeAmmoVec3(desc.scale));\n\t}\n\tif (\n\t\t(\n\t\t\t(desc.type === PhysicsShapeType.Mesh && desc.convex)\n\t\t\t||\n\t\t\t(desc.type !== PhysicsShapeType.Cone && desc.type !== PhysicsShapeType.Plane)\n\t\t)\n\t\t&& desc.margin !== undefined\n\t) {\n\t\tshape.setMargin(desc.margin);\n\t}\n\n\treturn { type: desc.type, shape };\n}\n","/**\n * math/common - shared elements\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { ArrayOfConstNumber, ArrayOfNumber } from \"@stardazed/core\";\n\n// constants\nexport const EPSILON = 0.000001;\n\n// functions\nexport function clamp(n: number, min: number, max: number): number {\n\treturn Math.max(min, Math.min(max, n));\n}\n\nexport function clamp01(n: number): number {\n\treturn Math.max(0.0, Math.min(1.0, n));\n}\n\nexport function mix(a: number, b: number, ratio: number): number {\n\treturn a * (1 - ratio) + b * ratio;\n}\n\nexport function intRandom(maximum: number): number {\n\treturn (Math.random() * (maximum + 1)) | 0;\n}\n\nexport function intRandomRange(minimum: number, maximum: number): number {\n\tconst diff = (maximum - minimum) | 0;\n\treturn minimum + intRandom(diff);\n}\n\nexport function hertz(hz: number) {\n\treturn 1 / hz;\n}\n\nexport function deg2rad(deg: number): number {\n\treturn deg * Math.PI / 180.0;\n}\n\nexport function rad2deg(rad: number): number {\n\treturn rad * 180.0 / Math.PI;\n}\n\nexport function isPowerOf2(n: number) {\n\treturn (n & (n - 1)) === 0;\n}\n\n// roundUpPowerOf2\n// return closest powerOf2 number that is >= n\n// e.g.: 15 -> 16; 16 -> 16; 17 -> 32\nexport function roundUpPowerOf2(n: number) {\n\tif (n <= 0) { return 1; }\n\tn = (n | 0) - 1;\n\tn |= n >> 1;\n\tn |= n >> 2;\n\tn |= n >> 4;\n\tn |= n >> 8;\n\tn |= n >> 16;\n\treturn n + 1;\n}\n\n// alignUp\n// round val up to closest alignmentPow2\nexport function alignUp(val: number, alignmentPow2: number) {\n\treturn (val + alignmentPow2 - 1) & (~(alignmentPow2 - 1));\n}\n\n// alignDown\n// round val down to closest alignmentPow2\nexport function alignDown(val: number, alignmentPow2: number) {\n\treturn val & (~(alignmentPow2 - 1));\n}\n\n// (strided) iteration of vecN types\nexport interface VecArrayIterationOptions {\n\tstride?: number;\n\toffset?: number;\n\tcount?: number;\n}\n\nexport type VecArrayIterationFunction = (out: ArrayOfNumber, a: ArrayOfConstNumber, ...args: any[]) => void;\n","/**\n * math/vec3 - 3-element vector type\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\n/* Copyright (c) 2015-2017, Brandon Jones, Colin MacKenzie IV, Arthur Langereis\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\nimport { ArrayOfConstNumber as ACN, ArrayOfNumber as AN } from \"@stardazed/core\";\nimport { clamp as clampf, clamp01 as clamp01f, EPSILON, mix as mixf, VecArrayIterationFunction, VecArrayIterationOptions } from \"./common\";\n\nexport const ELEMENT_COUNT = 3;\n\nexport function create() {\n\treturn new Float32Array([0, 0, 0]);\n}\n\nexport const zero = create;\n\nexport function one() {\n\treturn new Float32Array([1, 1, 1]);\n}\n\nexport function clone(a: ACN) {\n\treturn new Float32Array([a[0], a[1], a[2]]);\n}\n\nexport function fromValues(x: number, y: number, z: number) {\n\treturn new Float32Array([x, y, z]);\n}\n\nexport function copy(out: number[], a: ACN): number[];\nexport function copy<T extends AN>(out: T, a: ACN): T;\nexport function copy(out: AN, a: ACN) {\n\tout[0] = a[0];\n\tout[1] = a[1];\n\tout[2] = a[2];\n\treturn out;\n}\n\nexport function set(out: number[], x: number, y: number, z: number): number[];\nexport function set<T extends AN>(out: T, x: number, y: number, z: number): T;\nexport function set(out: AN, x: number, y: number, z: number) {\n\tout[0] = x;\n\tout[1] = y;\n\tout[2] = z;\n\treturn out;\n}\n\nexport function add(out: number[], a: ACN, b: ACN): number[];\nexport function add<T extends AN>(out: T, a: ACN, b: ACN): T;\nexport function add(out: AN, a: ACN, b: ACN) {\n\tout[0] = a[0] + b[0];\n\tout[1] = a[1] + b[1];\n\tout[2] = a[2] + b[2];\n\treturn out;\n}\n\nexport function subtract(out: number[], a: ACN, b: ACN): number[];\nexport function subtract<T extends AN>(out: T, a: ACN, b: ACN): T;\nexport function subtract(out: AN, a: ACN, b: ACN) {\n\tout[0] = a[0] - b[0];\n\tout[1] = a[1] - b[1];\n\tout[2] = a[2] - b[2];\n\treturn out;\n}\n\nexport const sub = subtract;\n\nexport function multiply(out: number[], a: ACN, b: ACN): number[];\nexport function multiply<T extends AN>(out: T, a: ACN, b: ACN): T;\nexport function multiply(out: AN, a: ACN, b: ACN) {\n\tout[0] = a[0] * b[0];\n\tout[1] = a[1] * b[1];\n\tout[2] = a[2] * b[2];\n\treturn out;\n}\n\nexport const mul = multiply;\n\nexport function divide(out: number[], a: ACN, b: ACN): number[];\nexport function divide<T extends AN>(out: T, a: ACN, b: ACN): T;\nexport function divide(out: AN, a: ACN, b: ACN) {\n\tout[0] = a[0] / b[0];\n\tout[1] = a[1] / b[1];\n\tout[2] = a[2] / b[2];\n\treturn out;\n}\n\nexport const div = divide;\n\nexport function ceil(out: number[], a: ACN): number[];\nexport function ceil<T extends AN>(out: T, a: ACN): T;\nexport function ceil(out: AN, a: ACN) {\n\tout[0] = Math.ceil(a[0]);\n\tout[1] = Math.ceil(a[1]);\n\tout[2] = Math.ceil(a[2]);\n\treturn out;\n}\n\nexport function floor(out: number[], a: ACN): number[];\nexport function floor<T extends AN>(out: T, a: ACN): T;\nexport function floor(out: AN, a: ACN) {\n\tout[0] = Math.floor(a[0]);\n\tout[1] = Math.floor(a[1]);\n\tout[2] = Math.floor(a[2]);\n\treturn out;\n}\n\nexport function min(out: number[], a: ACN, b: ACN): number[];\nexport function min<T extends AN>(out: T, a: ACN, b: ACN): T;\nexport function min(out: AN, a: ACN, b: ACN) {\n\tout[0] = Math.min(a[0], b[0]);\n\tout[1] = Math.min(a[1], b[1]);\n\tout[2] = Math.min(a[2], b[2]);\n\treturn out;\n}\n\nexport function max(out: number[], a: ACN, b: ACN): number[];\nexport function max<T extends AN>(out: T, a: ACN, b: ACN): T;\nexport function max(out: AN, a: ACN, b: ACN) {\n\tout[0] = Math.max(a[0], b[0]);\n\tout[1] = Math.max(a[1], b[1]);\n\tout[2] = Math.max(a[2], b[2]);\n\treturn out;\n}\n\nexport function round(out: number[], a: ACN): number[];\nexport function round<T extends AN>(out: T, a: ACN): T;\nexport function round(out: AN, a: ACN) {\n\tout[0] = Math.round(a[0]);\n\tout[1] = Math.round(a[1]);\n\tout[2] = Math.round(a[2]);\n\treturn out;\n}\n\nexport function scale(out: number[], a: ACN, s: number): number[];\nexport function scale<T extends AN>(out: T, a: ACN, s: number): T;\nexport function scale(out: AN, a: ACN, s: number) {\n\tout[0] = a[0] * s;\n\tout[1] = a[1] * s;\n\tout[2] = a[2] * s;\n\treturn out;\n}\n\nexport function scaleAndAdd(out: number[], a: ACN, b: ACN, scale: number): number[];\nexport function scaleAndAdd<T extends AN>(out: T, a: ACN, b: ACN, scale: number): T;\nexport function scaleAndAdd(out: AN, a: ACN, b: ACN, scale: number) {\n\tout[0] = a[0] + (b[0] * scale);\n\tout[1] = a[1] + (b[1] * scale);\n\tout[2] = a[2] + (b[2] * scale);\n\treturn out;\n}\n\nexport function distance(a: ACN, b: ACN) {\n\tconst x = b[0] - a[0];\n\tconst y = b[1] - a[1];\n\tconst z = b[2] - a[2];\n\treturn Math.sqrt(x * x + y * y + z * z);\n}\n\nexport const dist = distance;\n\nexport function squaredDistance(a: ACN, b: ACN) {\n\tconst x = b[0] - a[0];\n\tconst y = b[1] - a[1];\n\tconst z = b[2] - a[2];\n\treturn x * x + y * y + z * z;\n}\n\nexport const sqrDist = squaredDistance;\n\nexport function length(a: ACN) {\n\tconst x = a[0],\n\t\ty = a[1],\n\t\tz = a[2];\n\treturn Math.sqrt(x * x + y * y + z * z);\n}\n\nexport const len = length;\n\nexport function squaredLength(a: ACN) {\n\tconst x = a[0];\n\tconst y = a[1];\n\tconst z = a[2];\n\treturn x * x + y * y + z * z;\n}\n\nexport const sqrLen = squaredLength;\n\nexport function negate(out: number[], a: ACN): number[];\nexport function negate<T extends AN>(out: T, a: ACN): T;\nexport function negate(out: AN, a: ACN) {\n\tout[0] = -a[0];\n\tout[1] = -a[1];\n\tout[2] = -a[2];\n\treturn out;\n}\n\nexport function inverse(out: number[], a: ACN): number[];\nexport function inverse<T extends AN>(out: T, a: ACN): T;\nexport function inverse(out: AN, a: ACN) {\n\tout[0] = 1.0 / a[0];\n\tout[1] = 1.0 / a[1];\n\tout[2] = 1.0 / a[2];\n\treturn out;\n}\n\nexport function normalize(out: number[], a: ACN): number[];\nexport function normalize<T extends AN>(out: T, a: ACN): T;\nexport function normalize(out: AN, a: ACN) {\n\tconst x = a[0];\n\tconst y = a[1];\n\tconst z = a[2];\n\tlet len = x * x + y * y + z * z; // tslint:disable-line:no-shadowed-variable\n\n\tif (len > 0) {\n\t\t// TODO: evaluate use of glm_invsqrt here?\n\t\tlen = 1 / Math.sqrt(len);\n\t\tout[0] = a[0] * len;\n\t\tout[1] = a[1] * len;\n\t\tout[2] = a[2] * len;\n\t}\n\treturn out;\n}\n\nexport function dot(a: ACN, b: ACN) {\n\treturn a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\nexport function cross(out: number[], a: ACN, b: ACN): number[];\nexport function cross<T extends AN>(out: T, a: ACN, b: ACN): T;\nexport function cross(out: AN, a: ACN, b: ACN) {\n\tconst ax = a[0], ay = a[1], az = a[2],\n\t\tbx = b[0], by = b[1], bz = b[2];\n\n\tout[0] = ay * bz - az * by;\n\tout[1] = az * bx - ax * bz;\n\tout[2] = ax * by - ay * bx;\n\treturn out;\n}\n\nexport function lerp(out: number[], a: ACN, b: ACN, t: number): number[];\nexport function lerp<T extends AN>(out: T, a: ACN, b: ACN, t: number): T;\nexport function lerp(out: AN, a: ACN, b: ACN, t: number) {\n\tconst ax = a[0],\n\t\tay = a[1],\n\t\taz = a[2];\n\tout[0] = ax + t * (b[0] - ax);\n\tout[1] = ay + t * (b[1] - ay);\n\tout[2] = az + t * (b[2] - az);\n\treturn out;\n}\n\nexport function hermite(out: AN, a: ACN, b: ACN, c: ACN, d: ACN, t: number): AN {\n\tconst factorTimes2 = t * t;\n\tconst factor1 = factorTimes2 * (2 * t - 3) + 1;\n\tconst factor2 = factorTimes2 * (t - 2) + t;\n\tconst factor3 = factorTimes2 * (t - 1);\n\tconst factor4 = factorTimes2 * (3 - 2 * t);\n\n\tout[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n\tout[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n\tout[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n\treturn out;\n}\n\nexport function bezier(out: AN, a: ACN, b: ACN, c: ACN, d: ACN, t: number): AN {\n\tconst inverseFactor = 1 - t;\n\tconst inverseFactorTimesTwo = inverseFactor * inverseFactor;\n\tconst factorTimes2 = t * t;\n\tconst factor1 = inverseFactorTimesTwo * inverseFactor;\n\tconst factor2 = 3 * t * inverseFactorTimesTwo;\n\tconst factor3 = 3 * factorTimes2 * inverseFactor;\n\tconst factor4 = factorTimes2 * t;\n\n\tout[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n\tout[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n\tout[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n\treturn out;\n}\n\nexport function random(out: number[], scale: number): number[];\nexport function random<T extends AN>(out: T, scale: number): T;\nexport function random(out: AN, scale = 1.0) {\n\tscale = scale || 1.0;\n\n\tconst r = Math.random() * 2.0 * Math.PI;\n\tconst z = (Math.random() * 2.0) - 1.0;\n\tconst zScale = Math.sqrt(1.0 - z * z) * scale;\n\n\tout[0] = Math.cos(r) * zScale;\n\tout[1] = Math.sin(r) * zScale;\n\tout[2] = z * scale;\n\treturn out;\n}\n\nexport function clamp(out: number[], a: ACN, min: number, max: number): number[];\nexport function clamp<T extends AN>(out: AN, a: ACN, min: number, max: number): T;\nexport function clamp(out: number[], a: ACN, min: ACN, max: ACN): number[];\nexport function clamp<T extends AN>(out: AN, a: ACN, min: ACN, max: ACN): T;\nexport function clamp(out: AN, a: ACN, min: number | ACN, max: number | ACN) {\n\tif (typeof min === \"number\") {\n\t\tout[0] = clampf(a[0], min as number, max as number);\n\t\tout[1] = clampf(a[1], min as number, max as number);\n\t\tout[2] = clampf(a[2], min as number, max as number);\n\t}\n\telse {\n\t\tout[0] = clampf(a[0], min[0], (max as ACN)[0]);\n\t\tout[1] = clampf(a[1], min[1], (max as ACN)[1]);\n\t\tout[2] = clampf(a[2], min[2], (max as ACN)[2]);\n\t}\n\n\treturn out;\n}\n\nexport function clamp01(out: number[], a: ACN): number[];\nexport function clamp01<T extends AN>(out: T, a: ACN): T;\nexport function clamp01(out: AN, a: ACN) {\n\tout[0] = clamp01f(a[0]);\n\tout[1] = clamp01f(a[1]);\n\tout[2] = clamp01f(a[2]);\n\treturn out;\n}\n\nexport function mix(out: number[], a: ACN, b: ACN, ratio: number | ACN): number[];\nexport function mix<T extends AN>(out: T, a: ACN, b: ACN, ratio: number | ACN): T;\nexport function mix(out: AN, a: ACN, b: ACN, ratio: number | ACN) {\n\tif (typeof ratio === \"number\") {\n\t\tout[0] = mixf(a[0], b[0], ratio);\n\t\tout[1] = mixf(a[1], b[1], ratio);\n\t\tout[2] = mixf(a[2], b[2], ratio);\n\t}\n\telse {\n\t\tout[0] = mixf(a[0], b[0], ratio[0]);\n\t\tout[1] = mixf(a[1], b[1], ratio[1]);\n\t\tout[2] = mixf(a[2], b[2], ratio[2]);\n\t}\n\treturn out;\n}\n\nexport function sign(out: number[], a: ACN): number[];\nexport function sign<T extends AN>(out: T, a: ACN): T;\nexport function sign(out: AN, a: ACN) {\n\tout[0] = Math.sign(a[0]);\n\tout[1] = Math.sign(a[1]);\n\tout[2] = Math.sign(a[2]);\n\treturn out;\n}\n\nexport function transformMat3(out: number[], a: ACN, m: ACN): number[];\nexport function transformMat3<T extends AN>(out: T, a: ACN, m: ACN): T;\nexport function transformMat3(out: AN, a: ACN, m: ACN) {\n\tconst x = a[0], y = a[1], z = a[2];\n\tout[0] = x * m[0] + y * m[3] + z * m[6];\n\tout[1] = x * m[1] + y * m[4] + z * m[7];\n\tout[2] = x * m[2] + y * m[5] + z * m[8];\n\treturn out;\n}\n\nexport function transformMat4(out: number[], a: ACN, m: ACN): number[];\nexport function transformMat4<T extends AN>(out: T, a: ACN, m: ACN): T;\nexport function transformMat4(out: AN, a: ACN, m: ACN) {\n\tconst x = a[0];\n\tconst y = a[1];\n\tconst z = a[2];\n\tconst w = (m[3] * x + m[7] * y + m[11] * z + m[15]) || 1.0;\n\n\tout[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n\tout[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n\tout[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n\treturn out;\n}\n\nexport function transformQuat(out: number[], a: ACN, m: ACN): number[];\nexport function transformQuat<T extends AN>(out: T, a: ACN, m: ACN): T;\nexport function transformQuat(out: AN, a: ACN, q: ACN) {\n\t// benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n\tconst x = a[0], y = a[1], z = a[2];\n\tconst qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n\t// calculate quat * vec\n\tconst ix = qw * x + qy * z - qz * y;\n\tconst iy = qw * y + qz * x - qx * z;\n\tconst iz = qw * z + qx * y - qy * x;\n\tconst iw = -qx * x - qy * y - qz * z;\n\n\t// calculate result * inverse quat\n\tout[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n\tout[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n\tout[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\treturn out;\n}\n\nexport function rotateX(out: number[], a: ACN, b: ACN, c: number): number[];\nexport function rotateX<T extends AN>(out: T, a: ACN, b: ACN, c: number): T;\nexport function rotateX(out: AN, a: ACN, b: ACN, c: number) {\n\tconst p = [];\n\tconst r = [];\n\n\t// translate point to the origin\n\tp[0] = a[0] - b[0];\n\tp[1] = a[1] - b[1];\n\tp[2] = a[2] - b[2];\n\n\t// perform rotation\n\tr[0] = p[0];\n\tr[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n\tr[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\n\n\t// translate to correct position\n\tout[0] = r[0] + b[0];\n\tout[1] = r[1] + b[1];\n\tout[2] = r[2] + b[2];\n\n\treturn out;\n}\n\nexport function rotateY(out: number[], a: ACN, b: ACN, c: number): number[];\nexport function rotateY<T extends AN>(out: T, a: ACN, b: ACN, c: number): T;\nexport function rotateY(out: AN, a: ACN, b: ACN, c: number) {\n\tconst p = [];\n\tconst r = [];\n\n\t// translate point to the origin\n\tp[0] = a[0] - b[0];\n\tp[1] = a[1] - b[1];\n\tp[2] = a[2] - b[2];\n\n\t// perform rotation\n\tr[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n\tr[1] = p[1];\n\tr[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\n\n\t// translate to correct position\n\tout[0] = r[0] + b[0];\n\tout[1] = r[1] + b[1];\n\tout[2] = r[2] + b[2];\n\n\treturn out;\n}\n\nexport function rotateZ(out: number[], a: ACN, b: ACN, c: number): number[];\nexport function rotateZ<T extends AN>(out: T, a: ACN, b: ACN, c: number): T;\nexport function rotateZ(out: AN, a: ACN, b: ACN, c: number) {\n\tconst p = [];\n\tconst r = [];\n\n\t// translate point to the origin\n\tp[0] = a[0] - b[0];\n\tp[1] = a[1] - b[1];\n\tp[2] = a[2] - b[2];\n\n\t// perform rotation\n\tr[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n\tr[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n\tr[2] = p[2];\n\n\t// translate to correct position\n\tout[0] = r[0] + b[0];\n\tout[1] = r[1] + b[1];\n\tout[2] = r[2] + b[2];\n\n\treturn out;\n}\n\nexport function reflect(out: number[], a: ACN, normal: ACN): number[];\nexport function reflect<T extends AN>(out: T, a: ACN, normal: ACN): T;\nexport function reflect(out: AN, a: ACN, normal: ACN) {\n\tscale(out, normal, 2.0 * dot(a, normal));\n\treturn sub(out, a, out);\n}\n\n\nexport function arbitraryOrthogonalVec(a: ACN) {\n\tconst p = create();\n\tconst ax = Math.abs(a[0]);\n\tconst ay = Math.abs(a[1]);\n\tconst az = Math.abs(a[2]);\n\n\tconst dominantAxis = (ax > ay) ? (ax > az ? 0 : 2) : (ay > az ? 1 : 2);\n\n\tswitch (dominantAxis) {\n\t\tcase 0:\n\t\t\tp[0] = -a[1] - a[2];\n\t\t\tp[1] = a[0];\n\t\t\tp[2] = a[0];\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tp[0] = a[1];\n\t\t\tp[1] = -a[0] - a[2];\n\t\t\tp[2] = a[1];\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tp[0] = a[2];\n\t\t\tp[1] = a[2];\n\t\t\tp[2] = -a[0] - a[1];\n\t\t\tbreak;\n\t}\n\n\treturn p;\n}\n\n\nexport function forEach(a: number[], opt: VecArrayIterationOptions, fn: VecArrayIterationFunction, ...args: any[]): number[];\nexport function forEach<T extends AN>(a: T, opt: VecArrayIterationOptions, fn: VecArrayIterationFunction, ...args: any[]): T;\nexport function forEach(a: AN, opt: VecArrayIterationOptions, fn: VecArrayIterationFunction, ...args: any[]) {\n\tconst stride = opt.stride || ELEMENT_COUNT;\n\tconst offset = opt.offset || 0;\n\tconst count = opt.count ? Math.min((opt.count * stride) + offset, a.length) : a.length;\n\tconst vec = create();\n\n\tfor (let i = offset; i < count; i += stride) {\n\t\tvec[0] = a[i];\n\t\tvec[1] = a[i + 1];\n\t\tvec[2] = a[i + 2];\n\t\tfn(vec, vec, args);\n\t\ta[i] = vec[0];\n\t\ta[i + 1] = vec[1];\n\t\ta[i + 2] = vec[2];\n\t}\n\n\treturn a;\n}\n\n\nexport function angle(a: ACN, b: ACN) {\n\tconst tempA = clone(a);\n\tconst tempB = clone(b);\n\n\tnormalize(tempA, tempA);\n\tnormalize(tempB, tempB);\n\n\tconst cosine = dot(tempA, tempB);\n\n\tif (cosine > 1.0) {\n\t\treturn 0;\n\t}\n\telse if (cosine < -1.0) {\n\t\treturn Math.PI;\n\t} else {\n\t\treturn Math.acos(cosine);\n\t}\n}\n\nexport function str(a: ACN) {\n\treturn `vec3(${a[0]}, ${a[1]}, ${a[2]})`;\n}\n\nexport function exactEquals(a: ACN, b: ACN) {\n\treturn a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\nexport function equals(a: ACN, b: ACN) {\n\tconst a0 = a[0], a1 = a[1], a2 = a[2];\n\tconst b0 = b[0], b1 = b[1], b2 = b[2];\n\treturn (Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n\t\t\tMath.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n\t\t\tMath.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n","/**\n * physics/physicsworld - physics configuration and world container\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { ConstFloat3, ConstFloat4, Float3 } from \"@stardazed/core\";\nimport { vec3 } from \"@stardazed/math\";\nimport { PhysicsShape } from \"./shapes\";\n\nexport interface PhysicsConfig {\n\tbroadphaseSize: \"small\" | \"large\";\n\tworldMin: number | ConstFloat3;\n\tworldMax: number | ConstFloat3;\n\tgravity: number | ConstFloat3;\n\tdefaultLinearDrag: number;\n\tdefaultAngularDrag: number;\n\tdefaultFriction: number;\n\tdefaultRestitution: number;\n}\n\nexport interface RaycastHit {\n\tcollisionObject: Ammo.btCollisionObjectConst;\n\thitPointWorld: Float3;\n\thitNormalWorld: Float3;\n\thitFraction: number;\n}\n\nexport function makeDefaultPhysicsConfig(): PhysicsConfig {\n\treturn {\n\t\tbroadphaseSize: \"small\",\n\t\tworldMin: -100,\n\t\tworldMax: 100,\n\t\tgravity: -9.81,\n\t\tdefaultLinearDrag: 0,     // \\\n\t\tdefaultAngularDrag: 0.05, // | - these defaults are what Unity uses — now let's hope they have a similar effect\n\t\tdefaultFriction: 0.6,     // |\n\t\tdefaultRestitution: 0     // /\n\t};\n}\n\nexport interface RigidBodyDescriptor {\n\tmass: number;\n\tshape: PhysicsShape;\n\tisTrigger?: boolean;\n\tisKinematic?: boolean;\n\tisScripted?: boolean;\n\tworldPos?: ConstFloat3;\n\tworldRot?: ConstFloat4;\n\tlinearDrag?: number;\n\tangularDrag?: number;\n\tfriction?: number; // Bullet/Ammo does not support separate values for static and dynamic friction\n\trestitution?: number; // bounciness in Unity\n\tpositionConstraints?: [boolean, boolean, boolean];\n\trotationConstraints?: [boolean, boolean, boolean];\n\tcollisionFilterGroup?: number;\n\tcollisionFilterMask?: number;\n}\n\nexport interface GhostDescriptor {\n\tshape: PhysicsShape;\n\tworldPos?: ConstFloat3;\n\tworldRot?: ConstFloat4;\n}\n\n/*\nexport interface CharacterDescriptor {\n\tshape: PhysicsShape;\n\tstepHeight: number;\n\tworldPos?: ConstFloat3;\n\tworldRot?: ConstFloat4;\n}\n*/\n\ninterface RayResultStruct {\n\tnew(from: Ammo.btVector3, to: Ammo.btVector3): Ammo.RayResultCallback;\n}\n\nexport class PhysicsWorld {\n\tprivate world_: Ammo.btDiscreteDynamicsWorld;\n\tprivate defaultLinearDrag_: number;\n\tprivate defaultAngularDrag_: number;\n\tprivate defaultFriction_: number;\n\tprivate defaultRestitution_: number;\n\t// private lag_: number;\n\tprivate haveGhosts_: boolean;\n\n\t// private readonly tempBtTrans_: Ammo.btTransform;\n\t\n\tconstructor(config: PhysicsConfig) {\n\t\tconst collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();\n\t\tconst dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);\n\n\t\tconst worldMin = typeof config.worldMin === \"number\" ?\n\t\t\tnew Ammo.btVector3(config.worldMin, config.worldMin, config.worldMin) :\n\t\t\tnew Ammo.btVector3(config.worldMin[0], config.worldMin[1], config.worldMin[2]);\n\t\tconst worldMax = typeof config.worldMax === \"number\" ?\n\t\t\tnew Ammo.btVector3(config.worldMax, config.worldMax, config.worldMax) :\n\t\t\tnew Ammo.btVector3(config.worldMax[0], config.worldMax[1], config.worldMax[2]);\n\n\t\tconst broadphase = config.broadphaseSize === \"small\" ?\n\t\t\tnew Ammo.btAxisSweep3(worldMin, worldMax) :\n\t\t\tnew Ammo.btDbvtBroadphase();\n\t\tconst solver = new Ammo.btSequentialImpulseConstraintSolver();\n\n\t\tconst world = this.world_ = new Ammo.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, collisionConfiguration);\n\n\t\tconst gravity = typeof config.gravity === \"number\" ?\n\t\t\tnew Ammo.btVector3(0, config.gravity, 0) :\n\t\t\tnew Ammo.btVector3(config.gravity[0], config.gravity[1], config.gravity[2]);\n\t\tworld.setGravity(gravity);\n\n\t\tthis.defaultLinearDrag_ = config.defaultLinearDrag;\n\t\tthis.defaultAngularDrag_ = config.defaultAngularDrag;\n\t\tthis.defaultFriction_ = config.defaultFriction;\n\t\tthis.defaultRestitution_ = config.defaultRestitution;\n\n\t\t// this.tempBtTrans_ = new Ammo.btTransform();\n\t\t// this.lag_ = 0;\n\t\tthis.haveGhosts_ = false;\n\t}\n\n\tcreateRigidBody(desc: RigidBodyDescriptor) {\n\t\tconst worldPos = desc.worldPos || [0, 0, 0];\n\t\tconst worldRot = desc.worldRot || [0, 0, 0, 1];\n\n\t\tconst ammoTransform = new Ammo.btTransform(\n\t\t\tnew Ammo.btQuaternion(worldRot[0], worldRot[1], worldRot[2], worldRot[3]),\n\t\t\tnew Ammo.btVector3(worldPos[0], worldPos[1], worldPos[2])\n\t\t);\n\t\tconst localInertia = new Ammo.btVector3();\n\t\tif (desc.mass > 0) {\n\t\t\tdesc.shape.shape.calculateLocalInertia(desc.mass, localInertia);\n\t\t}\n\t\tconst rigidBodyDesc = new Ammo.btRigidBodyConstructionInfo(\n\t\t\tdesc.mass,\n\t\t\tnew Ammo.btDefaultMotionState(ammoTransform),\n\t\t\tdesc.shape.shape,\n\t\t\tlocalInertia\n\t\t);\n\n\t\trigidBodyDesc.set_m_linearDamping(desc.linearDrag !== undefined ? desc.linearDrag : this.defaultLinearDrag_);\n\t\trigidBodyDesc.set_m_angularDamping(desc.angularDrag !== undefined ? desc.angularDrag : this.defaultAngularDrag_);\n\t\trigidBodyDesc.set_m_friction(desc.friction !== undefined ? desc.friction : this.defaultFriction_);\n\t\trigidBodyDesc.set_m_restitution(desc.restitution !== undefined ? desc.restitution : this.defaultRestitution_);\n\n\t\tconst body = new Ammo.btRigidBody(rigidBodyDesc);\n\t\tif (desc.isTrigger) {\n\t\t\tbody.setCollisionFlags(body.getCollisionFlags() | Ammo.CollisionFlags.CF_NO_CONTACT_RESPONSE);\n\t\t}\n\t\tif (desc.isKinematic) {\n\t\t\tbody.setCollisionFlags(body.getCollisionFlags() | Ammo.CollisionFlags.CF_KINEMATIC_OBJECT);\n\t\t}\n\t\tif (desc.isScripted) {\n\t\t\tbody.setActivationState(Ammo.ActivationState.DISABLE_DEACTIVATION);\n\t\t}\n\n\t\t// if an axis is constrained, then the scale factor is 0, otherwise 1\n\t\tif (desc.positionConstraints) {\n\t\t\tconst factors = [+!desc.positionConstraints[0], +!desc.positionConstraints[1], +!desc.positionConstraints[2]];\n\t\t\tbody.setLinearFactor(new Ammo.btVector3(factors[0], factors[1], factors[2]));\n\t\t}\n\t\tif (desc.rotationConstraints) {\n\t\t\tconst factors = [+!desc.rotationConstraints[0], +!desc.rotationConstraints[1], +!desc.rotationConstraints[2]];\n\t\t\tbody.setAngularFactor(new Ammo.btVector3(factors[0], factors[1], factors[2]));\n\t\t}\n\n\t\t// collision filtering, by default mimic what Ammo does\n\t\tconst isDynamic = !(body.isStaticObject() || body.isKinematicObject());\n\t\tlet collisionFilterGroup = isDynamic ? Ammo.CollisionFilterGroups.DefaultFilter : Ammo.CollisionFilterGroups.StaticFilter;\n\t\tlet collisionFilterMask = isDynamic ? Ammo.CollisionFilterGroups.AllFilter : Ammo.CollisionFilterGroups.AllFilter ^ Ammo.CollisionFilterGroups.StaticFilter;\n\n\t\t// allow descriptor to override values\n\t\tif (desc.collisionFilterGroup !== undefined) {\n\t\t\tcollisionFilterGroup = desc.collisionFilterGroup & 0xffff;\n\t\t}\n\t\tif (desc.collisionFilterMask !== undefined) {\n\t\t\tcollisionFilterMask = desc.collisionFilterMask & 0xffff;\n\t\t}\n\n\t\tthis.world_.addRigidBody(body, collisionFilterGroup, collisionFilterMask);\n\n\t\treturn body;\n\t}\n\n\tremoveCollisionObject(co: Ammo.btCollisionObject) {\n\t\tconst body = this.asRigidBody(co);\n\t\tif (body) {\n\t\t\tthis.world_.removeRigidBody(body);\n\t\t}\n\t\telse {\n\t\t\tthis.world_.removeCollisionObject(co);\n\t\t}\n\t}\n\n\tcreateGhostTrigger(desc: GhostDescriptor) {\n\t\tconst worldPos = desc.worldPos || [0, 0, 0];\n\t\tconst worldRot = desc.worldRot || [0, 0, 0, 1];\n\n\t\tconst ammoTransform = new Ammo.btTransform(\n\t\t\tnew Ammo.btQuaternion(worldRot[0], worldRot[1], worldRot[2], worldRot[3]),\n\t\t\tnew Ammo.btVector3(worldPos[0], worldPos[1], worldPos[2])\n\t\t);\n\n\t\tconst ghost = new Ammo.btGhostObject();\n\t\tghost.setWorldTransform(ammoTransform);\n\t\tghost.setCollisionShape(desc.shape.shape);\n\t\tghost.setCollisionFlags(ghost.getCollisionFlags() | Ammo.CollisionFlags.CF_NO_CONTACT_RESPONSE);\n\t\t\n\t\tthis.world_.addCollisionObject(ghost, Ammo.CollisionFilterGroups.SensorTrigger, Ammo.CollisionFilterGroups.DefaultFilter);\n\n\t\tif (! this.haveGhosts_) {\n\t\t\tthis.haveGhosts_ = true;\n\t\t\tthis.world_.getPairCache().setInternalGhostPairCallback(new Ammo.btGhostPairCallback());\n\t\t}\n\n\t\treturn ghost;\n\t}\n\n\tasRigidBody(collObj: Ammo.btCollisionObject): Ammo.btRigidBody | undefined {\n\t\tconst rb = Ammo.btRigidBody.prototype.upcast(collObj);\n\t\tif (rb === Ammo.NULL) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn rb as Ammo.btRigidBody;\n\t}\n\n\tasGhostObject(collObj: Ammo.btCollisionObject): Ammo.btGhostObject | undefined {\n\t\tconst rb = Ammo.btGhostObject.prototype.upcast(collObj);\n\t\tif (rb === Ammo.NULL) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn rb as Ammo.btGhostObject;\n\t}\n\n\t/*\n\tcreateCharacter(desc: CharacterDescriptor) {\n\t\tconst worldPos = desc.worldPos || [0, 0, 0];\n\t\tconst worldRot = desc.worldRot || [0, 0, 0, 1];\n\n\t\tconst ammoTransform = new Ammo.btTransform(\n\t\t\tnew Ammo.btQuaternion(worldRot[0], worldRot[1], worldRot[2], worldRot[3]),\n\t\t\tnew Ammo.btVector3(worldPos[0], worldPos[1], worldPos[2])\n\t\t);\n\n\t\tconst ghost = new Ammo.btPairCachingGhostObject();\n\t\tghost.setWorldTransform(ammoTransform);\n\t\tghost.setCollisionShape(desc.shape.shape);\n\t\tghost.setCollisionFlags(Ammo.CollisionFlags.CF_CHARACTER_OBJECT);\n\t\t// this.world_.broadphase.getOverlappingPairCache() -> setInternalGhostPairCallback(new btGhostPairCallback());\n\n\t\tconst controller = new Ammo.btKinematicCharacterController(ghost, desc.shape.shape, desc.stepHeight);\n\t\t// controller.setGravity(-this.world_.getGravity().y());\n\n\t\tthis.world_.addCollisionObject(ghost, Ammo.CollisionFilterGroups.DefaultFilter, Ammo.CollisionFilterGroups.AllFilter);\n\t\tthis.world_.addAction(controller);\n\n\t\treturn controller;\n\t}\n\t*/\n\n\t// FIXME: direct passthrough for now, add proper create/remove\n\taddConstraint(constraint: Ammo.btTypedConstraint, disableCollisionsBetweenLinkedBodies?: boolean) {\n\t\tthis.world_.addConstraint(constraint, disableCollisionsBetweenLinkedBodies);\n\t}\n\n\tremoveConstraint(constraint: Ammo.btTypedConstraint) {\n\t\tthis.world_.removeConstraint(constraint);\n\t}\n\n\tprivate rayCastInternal(resultClass: RayResultStruct, filter: Ammo.CollisionFilterGroups, worldFrom: Float3, worldToOrDir: Float3, maxDist?: number) {\n\t\tif (maxDist !== undefined) {\n\t\t\tvec3.scaleAndAdd(worldToOrDir, worldFrom, worldToOrDir, maxDist);\n\t\t}\n\t\tconst from = new Ammo.btVector3(worldFrom[0], worldFrom[1], worldFrom[2]);\n\t\tconst to = new Ammo.btVector3(worldToOrDir[0], worldToOrDir[1], worldToOrDir[2]);\n\t\tconst result = new resultClass(from, to);\n\t\t\n\t\tresult.set_m_collisionFilterGroup(Ammo.CollisionFilterGroups.AllFilter);\n\t\tresult.set_m_collisionFilterMask(filter);\n\t\t\n\t\tthis.world_.rayTest(from, to, result);\n\t\treturn result;\n\t}\n\n\trayTestTarget(worldFrom: Float3, worldTo: Float3, filter = Ammo.CollisionFilterGroups.AllFilter) {\n\t\treturn this.rayCastInternal(Ammo.ClosestRayResultCallback, filter, worldFrom, worldTo).hasHit();\n\t}\n\n\trayTest(worldFrom: Float3, worldDir: Float3, maxDistance: number, filter = Ammo.CollisionFilterGroups.AllFilter) {\n\t\treturn this.rayCastInternal(Ammo.ClosestRayResultCallback, filter, worldFrom, worldDir, maxDistance).hasHit();\n\t}\n\n\tprivate closestRaycastHit(crr: Ammo.ClosestRayResultCallback): RaycastHit | undefined {\n\t\tif (! crr.hasHit()) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst hitPoint = crr.get_m_hitPointWorld();\n\t\tconst hitNormal = crr.get_m_hitNormalWorld();\n\t\treturn {\n\t\t\tcollisionObject: crr.get_m_collisionObject(),\n\t\t\thitFraction: crr.get_m_closestHitFraction(),\n\t\t\thitPointWorld: [hitPoint.x(), hitPoint.y(), hitPoint.z()],\n\t\t\thitNormalWorld: [hitNormal.x(), hitNormal.y(), hitNormal.z()],\n\t\t};\n\t}\n\n\trayCastClosestTarget(worldFrom: Float3, worldTo: Float3, filter = Ammo.CollisionFilterGroups.AllFilter) {\n\t\tconst result = this.rayCastInternal(Ammo.ClosestRayResultCallback, filter, worldFrom, worldTo) as Ammo.ClosestRayResultCallback;\n\t\treturn this.closestRaycastHit(result);\n\t}\n\n\trayCastClosest(worldFrom: Float3, worldDir: Float3, maxDistance: number, filter = Ammo.CollisionFilterGroups.AllFilter) {\n\t\tconst result = this.rayCastInternal(Ammo.ClosestRayResultCallback, filter, worldFrom, worldDir, maxDistance) as Ammo.ClosestRayResultCallback;\n\t\treturn this.closestRaycastHit(result);\n\t}\n\n\tprivate allRaycastHits(arr: Ammo.AllHitsRayResultCallback): RaycastHit[] {\n\t\tif (! arr.hasHit()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst hits: RaycastHit[] = [];\n\t\tconst cos = arr.get_m_collisionObjects();\n\t\tconst fracts = arr.get_m_hitFractions();\n\t\tconst points = arr.get_m_hitPointWorld();\n\t\tconst normals = arr.get_m_hitNormalWorld();\n\t\tconst hitCount = cos.size();\n\t\tfor (let i = 0; i < hitCount; ++i) {\n\t\t\tconst point = points.at(i);\n\t\t\tconst normal = normals.at(i);\n\t\t\thits.push({\n\t\t\t\tcollisionObject: cos.at(i),\n\t\t\t\thitFraction: fracts.at(i),\n\t\t\t\thitPointWorld: [point.x(), point.y(), point.z()],\n\t\t\t\thitNormalWorld: [normal.x(), normal.y(), normal.z()],\t\n\t\t\t});\n\t\t}\n\t\treturn hits;\n\t}\n\n\trayCastAllTarget(worldFrom: Float3, worldTo: Float3, filter = Ammo.CollisionFilterGroups.AllFilter) {\n\t\tconst result = this.rayCastInternal(Ammo.AllHitsRayResultCallback, filter, worldFrom, worldTo) as Ammo.AllHitsRayResultCallback;\n\t\treturn this.allRaycastHits(result);\n\t}\n\n\trayCastAll(worldFrom: Float3, worldDir: Float3, maxDistance: number, filter = Ammo.CollisionFilterGroups.AllFilter) {\n\t\tconst result = this.rayCastInternal(Ammo.AllHitsRayResultCallback, filter, worldFrom, worldDir, maxDistance) as Ammo.AllHitsRayResultCallback;\n\t\treturn this.allRaycastHits(result);\n\t}\n\n\t/*\n\n\tTODO: move this out to transform system\n\n\tupdate(timeStep: number, colliders: entity.ColliderComponent, transforms: entity.TransformComponent) {\n\t\tthis.lag_ += timeStep;\n\t\tconst stepsPerformed = this.world_.stepSimulation(this.lag_, 8, 1 / 120);\n\t\tthis.lag_ -= stepsPerformed / 120;\n\n\t\tcolliders.forEach((_coll, trans, collObj) => {\n\t\t\tconst rbOrNull = Ammo.btRigidBody.prototype.upcast(collObj);\n\t\t\tif ((rbOrNull as any).a !== 0) {\n\t\t\t\tconst rigidBody = rbOrNull as Ammo.btRigidBody;\n\t\t\t\tif (rigidBody.isActive()) {\n\t\t\t\t\tconst ms = rigidBody.getMotionState();\n\t\t\t\t\tms.getWorldTransform(this.tempBtTrans_);\n\n\t\t\t\t\tconst pos = this.tempBtTrans_.getOrigin();\n\t\t\t\t\tconst rot = this.tempBtTrans_.getRotation();\n\n\t\t\t\t\t// FIXME: if item is parented, make position/rotation parent relative\n\t\t\t\t\ttransforms.setPositionAndRotation(trans, [pos.x(), pos.y(), pos.z()], [rot.x(), rot.y(), rot.z(), rot.w()]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\t*/\n}\n","/**\n * @stardazed/physics - physics simulation\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\n/// <reference types=\"@stardazed/ammo\" />\n\nexport * from \"./shapes\";\nexport * from \"./physicsworld\";\n"],"names":["ELEMENT_COUNT","zero","create","sub","subtract","mul","multiply","div","divide","dist","distance","sqrDist","squaredDistance","len","length","sqrLen","squaredLength","clampf","clamp01f","mixf","scale","dot","clone","normalize"],"mappings":"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"}