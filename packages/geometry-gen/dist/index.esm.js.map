{"version":3,"file":"index.esm.js","sources":["../src/vertex-types.ts","../src/builder.ts","../src/calc-derived.ts","../src/generate.ts","../src/manipulate.ts","../src/index.ts"],"sourcesContent":["/**\n * geometry-gen/vertex-types - shortcuts to define vertex attributes\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"@stardazed/core\";\nimport { VertexAttribute, VertexField, VertexAttributeRole } from \"@stardazed/geometry\";\n\n// -- VertexAttribute shortcuts for common types\n\nexport function attrPosition2(): VertexAttribute { return { field: VertexField.Floatx2, role: VertexAttributeRole.Position }; }\nexport function attrPosition3(): VertexAttribute { return { field: VertexField.Floatx3, role: VertexAttributeRole.Position }; }\nexport function attrNormal3(): VertexAttribute { return { field: VertexField.Floatx3, role: VertexAttributeRole.Normal }; }\nexport function attrColour3(): VertexAttribute { return { field: VertexField.Floatx3, role: VertexAttributeRole.Colour }; }\nexport function attrUV2(): VertexAttribute { return { field: VertexField.Floatx2, role: VertexAttributeRole.UV }; }\nexport function attrTangent3(): VertexAttribute { return { field: VertexField.Floatx3, role: VertexAttributeRole.Tangent }; }\n\nexport function attrJointIndexes(): VertexAttribute { return { field: VertexField.SInt32x4, role: VertexAttributeRole.JointIndexes }; }\nexport function attrWeightedPos(index: number) {\n\tassert(index >= 0 && index < 4);\n\treturn { field: VertexField.Floatx4, role: VertexAttributeRole.WeightedPos0 + index };\n}\n\n\n// -- Common AttributeList shortcuts\n\nexport namespace AttrList {\n\texport function Pos3Norm3(): VertexAttribute[] {\n\t\treturn [attrPosition3(), attrNormal3()];\n\t}\n\texport function Pos3Norm3Colour3() {\n\t\treturn [attrPosition3(), attrNormal3(), attrColour3()];\n\t}\n\texport function Pos3Norm3UV2(): VertexAttribute[] {\n\t\treturn [attrPosition3(), attrNormal3(), attrUV2()];\n\t}\n\texport function Pos3Norm3Colour3UV2() {\n\t\treturn [attrPosition3(), attrNormal3(), attrColour3(), attrUV2()];\n\t}\n\texport function Pos3Norm3UV2Tan3(): VertexAttribute[] {\n\t\treturn [attrPosition3(), attrNormal3(), attrUV2(), attrTangent3()];\n\t}\n}\n","/**\n * geometry/builder - construct Geometry from normalized sources such as assets\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert, TypedArray, Float, Double, NumArray } from \"@stardazed/core\";\nimport { stableSort, appendArrayInPlace, copyElementRange } from \"@stardazed/container\";\nimport { Geometry, VertexAttribute, VertexAttributeRole, VertexField, vertexFieldElementCount, vertexFieldNumericType, PrimitiveType, makeStandardVertexLayout, allocateGeometry } from \"@stardazed/geometry\";\nimport { VertexBufferAttributeView } from \"@stardazed/geometry-data\";\n\nexport const enum VertexAttributeMapping {\n\tUndefined,\n\n\tVertex,\n\tPolygonVertex,\n\tPolygon,\n\tSingleValue\n}\n\nexport interface VertexAttributeStream {\n\tname?: string;\n\tattr?: VertexAttribute;\n\tmapping: VertexAttributeMapping;\n\tincludeInMesh: boolean;\n\tcontrolsGrouping?: boolean;\n\n\tvalues?: TypedArray;\n\tindexes?: TypedArray;\n\n\telementCount?: number;\n}\n\nexport interface VertexIndexMapping {\n\tadd(from: number, to: number): void;\n\tmappedValues(forIndex: number): number[];\n\n\treadonly indexCount: number;\n}\n\n/*\nVertexIndexMapping method A was to test a growing single array technique used\nin native code, but in JS it lost out (badly) to method B, which is just to\nuse a Map with a lot of small arrays in it. Left here to test in the future.\n\nclass VertexIndexMappingA implements VertexIndexMapping {\n\tprivate offsets_: number[] = [];\n\tprivate values_: number[] = [];\n\tprivate highest_ = -1;\n\n\tget indexCount() { return this.offsets_.length; }\n\n\tadd(from: number, to: number) {\n\t\tif (from > this.highest_) {\n\t\t\tfill(this.offsets_, this.values_.length, from - this.highest_, this.highest_ + 1);\n\t\t\tthis.highest_ = from;\n\t\t}\n\t\tconst fromOff = this.offsets_[from];\n\t\tthis.values_.splice(fromOff, 0, to);\n\t\tfor (let n = from + 1; n <= this.highest_; ++n) {\n\t\t\tthis.offsets_[n]++;\n\t\t}\n\t}\n\n\tmappedValues(forIndex: number) {\n\t\tconst offA = this.offsets_[forIndex];\n\t\tconst offB = (forIndex < this.offsets_.length - 1) ? this.offsets_[forIndex + 1] : this.values_.length;\n\t\treturn this.values_.slice(offA, offB);\n\t}\n}\n*/\n\nclass VertexIndexMappingB implements VertexIndexMapping {\n\tprivate data_ = new Map<number, number[]>();\n\n\tget indexCount() { return this.data_.size; }\n\n\tadd(from: number, to: number) {\n\t\tif (! this.data_.has(from)) {\n\t\t\tthis.data_.set(from, [to]);\n\t\t}\n\t\telse {\n\t\t\tconst mapped = this.data_.get(from)!;\n\t\t\tif (mapped.indexOf(to) === -1) {\n\t\t\t\tmapped.push(to);\n\t\t\t}\n\t\t\tthis.data_.set(from, mapped);\n\t\t}\n\t}\n\n\tmappedValues(forIndex: number) {\n\t\treturn this.data_.get(forIndex)!;\n\t}\n}\n\n\nexport class MeshBuilder {\n\tprivate vertexData_: number[][];\n\n\tprivate sourcePolygonIndex_ = 0;\n\tprivate streamCount_ = 0;\n\tprivate vertexCount_ = 0;\n\tprivate triangleCount_ = 0;\n\tprivate vertexMapping_: Map<string, number>;\n\tprivate indexMap_: VertexIndexMapping;\n\n\tprivate groupIndex_: number;\n\tprivate groupIndexStreams_: Map<number, number[]>;\n\tprivate groupIndexesRef_: number[];\n\n\tprivate streams_: VertexAttributeStream[];\n\n\n\tconstructor(positions: Float32Array | Float64Array, positionIndexes: Uint32Array | null, streams: VertexAttributeStream[]) {\n\t\t// create a local copy of the streams array so we can modify it\n\t\tthis.streams_ = streams.slice(0);\n\n\t\t// create the positions stream, which is needed for both simple and rigged models\n\t\tconst positionStream: VertexAttributeStream = {\n\t\t\tattr: { role: VertexAttributeRole.Position, field: VertexField.Floatx3 },\n\t\t\tmapping: VertexAttributeMapping.Vertex,\n\t\t\tincludeInMesh: true,\n\t\t\tvalues: positions,\n\t\t\tindexes: positionIndexes === null ? undefined : positionIndexes\n\t\t};\n\n\t\t// add positions stream at the beginning for simple models and at end for rigged models\n\t\tif (this.streams_.find(s => s.attr!.role === VertexAttributeRole.JointIndexes)) {\n\t\t\tthis.streams_.push(positionStream);\n\t\t}\n\t\telse {\n\t\t\tthis.streams_.unshift(positionStream);\n\t\t}\n\n\t\t// sort attr streams ensuring ones that are not to be included in the geometry\n\t\t// end up at the end.\n\t\tstableSort(this.streams_, (sA, sB) => {\n\t\t\tif (sA.includeInMesh === sB.includeInMesh) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn sA.includeInMesh ? -1 : 1;\n\t\t});\n\n\n\t\t// minor optimization as the element count will be requested many times\n\t\t// also check for ambigious or incorrect grouping\n\t\tlet groupers = 0;\n\t\tfor (const s of this.streams_) {\n\t\t\ts.elementCount = vertexFieldElementCount(s.attr!.field);\n\t\t\tif (s.controlsGrouping === true) {\n\t\t\t\tassert(s.elementCount === 1, \"A grouping stream must use a single element field\");\n\t\t\t\tconst groupNumType = vertexFieldNumericType(s.attr!.field);\n\t\t\t\tassert(groupNumType !== Float && groupNumType !== Double, \"A grouping stream must use an integer element\");\n\t\t\t\tgroupers++;\n\t\t\t}\n\t\t}\n\t\tassert(groupers < 2, \"More than 1 attr stream indicates it's the grouping stream\");\n\n\t\t// start at group 0 in case there is no explicit initial group set\n\t\tthis.groupIndexStreams_ = new Map<number, number[]>();\n\t\tthis.groupIndexStreams_.set(0, []);\n\t\tthis.groupIndex_ = 0;\n\t\tthis.groupIndexesRef_ = this.groupIndexStreams_.get(0)!;\n\n\t\t// output and de-duplication data\n\t\tthis.vertexData_ = this.streams_.map(_ => []);\n\t\tthis.vertexMapping_ = new Map<string, number>();\n\t\tthis.indexMap_ = new VertexIndexMappingB();\n\t\tthis.streamCount_ = this.streams_.length;\n\t}\n\n\n\tprivate streamIndexesForPVI(polygonVertexIndex: number, vertexIndex: number, polygonIndex: number) {\n\t\tconst res: number[] = [];\n\n\t\tfor (const stream of this.streams_) {\n\t\t\tlet index: number;\n\t\t\tif (stream.mapping === VertexAttributeMapping.Vertex) {\n\t\t\t\tindex = vertexIndex;\n\t\t\t}\n\t\t\telse if (stream.mapping === VertexAttributeMapping.PolygonVertex) {\n\t\t\t\tindex = polygonVertexIndex;\n\t\t\t}\n\t\t\telse if (stream.mapping === VertexAttributeMapping.Polygon) {\n\t\t\t\tindex = polygonIndex;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tindex = 0;\n\t\t\t}\n\n\t\t\tif (stream.indexes) {\n\t\t\t\tindex = stream.indexes[index];\n\t\t\t}\n\t\t\tres.push(index);\n\t\t}\n\n\t\treturn res;\n\t}\n\n\n\tsetGroup(newGroupIndex: number) {\n\t\tassert(newGroupIndex >= 0, \"group index must be >= 0\");\n\n\t\tthis.groupIndex_ = newGroupIndex;\n\t\tif (! this.groupIndexStreams_.has(newGroupIndex)) {\n\t\t\tthis.groupIndexStreams_.set(newGroupIndex, []);\n\t\t}\n\n\t\tthis.groupIndexesRef_ = this.groupIndexStreams_.get(newGroupIndex)!;\n\t}\n\n\n\tprivate getVertexIndex(streamIndexes: number[]): number {\n\t\tconst key = streamIndexes.join(\"|\");\n\t\tif (this.vertexMapping_.has(key)) {\n\t\t\treturn this.vertexMapping_.get(key)!;\n\t\t}\n\t\telse {\n\t\t\tfor (let streamIx = 0; streamIx < this.streamCount_; ++streamIx) {\n\t\t\t\tconst stream = this.streams_[streamIx];\n\t\t\t\tconst elemCount = stream.elementCount!;\n\t\t\t\tconst array = this.vertexData_[streamIx];\n\t\t\t\tconst fieldIndex = streamIndexes[streamIx];\n\t\t\t\tlet values: NumArray = stream.values!; // TODO: is this guaranteed to exist in this loop?\n\t\t\t\tlet fieldOffset = elemCount * fieldIndex;\n\n\t\t\t\t// This is slowest on all browsers (by a mile)\n\t\t\t\t// array.push.apply(array, stream.values.subarray(fieldOffset, fieldOffset + stream.elementCount));\n\n\t\t\t\t// This is 20% faster in Firefox\n\t\t\t\t// for (let el = 0; el < elemCount; ++el) {\n\t\t\t\t// \tarray.push(values[fieldOffset + el]);\n\t\t\t\t// }\n\n\t\t\t\t// in FBX it is apparently valid to have -1 indexes to indicate absence of a value\n\t\t\t\t// we replace that with a 0-filled value\n\t\t\t\tif (fieldOffset < 0) {\n\t\t\t\t\tvalues = [0, 0, 0, 0];\n\t\t\t\t\tfieldOffset = 0;\n\t\t\t\t}\n\n\t\t\t\t// This is 20% faster in Webkit\n\t\t\t\tif (elemCount === 3) {\n\t\t\t\t\tarray.push(values[fieldOffset], values[fieldOffset + 1], values[fieldOffset + 2]);\n\t\t\t\t}\n\t\t\t\telse if (elemCount === 2) {\n\t\t\t\t\tarray.push(values[fieldOffset], values[fieldOffset + 1]);\n\t\t\t\t}\n\t\t\t\telse if (elemCount === 4) {\n\t\t\t\t\tarray.push(values[fieldOffset], values[fieldOffset + 1], values[fieldOffset + 2], values[fieldOffset + 3]);\n\t\t\t\t}\n\t\t\t\telse if (elemCount === 1) {\n\t\t\t\t\tarray.push(values[fieldOffset]);\n\n\t\t\t\t\tif (stream.controlsGrouping) {\n\t\t\t\t\t\tconst gi = values[fieldOffset];\n\t\t\t\t\t\tif (gi !== this.groupIndex_) {\n\t\t\t\t\t\t\tthis.setGroup(gi);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst vertexIndex = this.vertexCount_;\n\t\t\tthis.vertexCount_++;\n\t\t\tthis.vertexMapping_.set(key, vertexIndex);\n\n\t\t\treturn vertexIndex;\n\t\t}\n\t}\n\n\n\tprivate addTriangle(polygonVertexIndexes: NumArray, vertexIndexes: NumArray) {\n\t\tconst indexesA = this.streamIndexesForPVI(polygonVertexIndexes[0], vertexIndexes[0], this.sourcePolygonIndex_);\n\t\tconst indexesB = this.streamIndexesForPVI(polygonVertexIndexes[1], vertexIndexes[1], this.sourcePolygonIndex_);\n\t\tconst indexesC = this.streamIndexesForPVI(polygonVertexIndexes[2], vertexIndexes[2], this.sourcePolygonIndex_);\n\n\t\tconst dstVIxA = this.getVertexIndex(indexesA);\n\t\tconst dstVIxB = this.getVertexIndex(indexesB);\n\t\tconst dstVIxC = this.getVertexIndex(indexesC);\n\n\t\tthis.indexMap_.add(vertexIndexes[0], dstVIxA);\n\t\tthis.indexMap_.add(vertexIndexes[1], dstVIxB);\n\t\tthis.indexMap_.add(vertexIndexes[2], dstVIxC);\n\n\t\tthis.groupIndexesRef_.push(dstVIxA, dstVIxB, dstVIxC);\n\t\tthis.triangleCount_++;\n\t}\n\n\n\taddPolygon(polygonVertexIndexes: NumArray, vertexIndexes: NumArray) {\n\t\tif (polygonVertexIndexes.length === 3) {\n\t\t\tthis.addTriangle(polygonVertexIndexes, vertexIndexes);\n\t\t}\n\t\telse {\n\t\t\tconst polyPoints = vertexIndexes.length;\n\t\t\tconst pv0 = polygonVertexIndexes[0];\n\t\t\tconst v0 = vertexIndexes[0];\n\t\t\tlet polyNext = 2;\n\n\t\t\twhile (polyNext < polyPoints) {\n\t\t\t\tthis.addTriangle(\n\t\t\t\t\t[pv0, polygonVertexIndexes[polyNext - 1], polygonVertexIndexes[polyNext]],\n\t\t\t\t\t[v0, vertexIndexes[polyNext - 1], vertexIndexes[polyNext]]\n\t\t\t\t);\n\t\t\t\tpolyNext++;\n\t\t\t}\n\t\t}\n\n\t\tthis.sourcePolygonIndex_++;\n\t}\n\n\tget curPolygonIndex() { return this.sourcePolygonIndex_; }\n\n\tget indexMap() { return this.indexMap_; }\n\n\n\tcomplete() {\n\t\t// Create Geometry with a VB with the streams marked for inclusion in the\n\t\t// final geometry data. Because we sorted the non-included streams to the end\n\t\t// of the list the order of this filtered list will still be the same as\n\t\t// of the vertexData arrays, so no need for mapping etc.\n\t\tconst meshAttributeStreams = this.streams_.filter(s => s.includeInMesh);\n\t\tconst attrs = meshAttributeStreams.map(s => s.attr!);\n\n\t\t// allocate as single buffer\n\t\tconst geom: Geometry = allocateGeometry({\n\t\t\tlayout: makeStandardVertexLayout(attrs),\n\t\t\tvertexCount: this.vertexCount_,\n\t\t\tindexCount: this.triangleCount_ * 3\n\t\t});\n\t\tconst layout = geom.layout.layouts[0];\n\n\t\t// copy vertex streams\n\t\tfor (let six = 0; six < meshAttributeStreams.length; ++six) {\n\t\t\tconst streamData = this.vertexData_[six];\n\t\t\tconst attribute = layout.attrByIndex(six);\n\t\t\tif (attribute) {\n\t\t\t\tconst view = new VertexBufferAttributeView(geom.vertexBuffers[0], attribute);\n\t\t\t\tview.copyValuesFrom(streamData, this.vertexCount_);\n\t\t\t}\n\t\t\t// FIXME else unexpected()\n\t\t}\n\n\t\t// All triangles with the same material were merged, create full index buffer\n\t\t// and primitive groups\n\t\tconst mergedIndexes: number[] = [];\n\t\tlet nextElementIndex = 0;\n\n\t\tthis.groupIndexStreams_.forEach((indexes, group) => {\n\t\t\tif (indexes.length) {\n\t\t\t\tappendArrayInPlace(mergedIndexes, indexes);\n\t\t\t\tconst groupElementCount = indexes.length;\n\n\t\t\t\tgeom.subMeshes.push({\n\t\t\t\t\ttype: PrimitiveType.Triangle,\n\t\t\t\t\tfromElement: nextElementIndex,\n\t\t\t\t\telementCount: groupElementCount,\n\t\t\t\t\tmaterialIx: group\n\t\t\t\t});\n\n\t\t\t\tnextElementIndex += groupElementCount;\n\t\t\t}\n\t\t});\n\n\t\tconst indexView = geom.indexBuffer!.typedBasePtr(0, mergedIndexes.length);\n\t\tcopyElementRange(indexView, 0, mergedIndexes, 0, mergedIndexes.length);\n\t\t// geom.indexBuffer!.setIndexes(0, mergedIndexes.length, mergedIndexes);\n\n\t\treturn geom;\n\t}\n}\n","/**\n * geometry-gen/calc-derived - calculate normals and tangents\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"@stardazed/core\";\nimport { vec3 } from \"@stardazed/math\";\nimport { copyIndexedVec3, setIndexedVec3 } from \"@stardazed/container\";\nimport { Geometry, VertexAttributeRole, VertexBufferLayout, VertexBuffer } from \"@stardazed/geometry\";\nimport { VertexBufferAttributeView, TriangleView, TriangleProxy, triangleViewForGeometry } from \"@stardazed/geometry-data\";\n\nexport function genVertexNormals(geom: Geometry) {\n\treturn triangleViewForGeometry(geom).then(\n\t\ttriView => {\n\t\t\tgeom.vertexBuffers.forEach((vertexBuffer, ix) => {\n\t\t\t\tcalcVertexNormals(geom.layout.layouts[ix], vertexBuffer, triView);\n\t\t\t});\n\t\t}\n\t);\n}\n\nexport function genVertexTangents(geom: Geometry) {\n\treturn triangleViewForGeometry(geom).then(\n\t\ttriView => {\n\t\t\tgeom.vertexBuffers.forEach((vertexBuffer, ix) => {\n\t\t\t\tcalcVertexTangents(geom.layout.layouts[ix], vertexBuffer, triView);\n\t\t\t});\n\t\t}\n\t);\n}\n\nexport function calcVertexNormals(layout: VertexBufferLayout, vertexBuffer: VertexBuffer, triView: TriangleView) {\n\tconst posAttr = layout.attrByRole(VertexAttributeRole.Position);\n\tconst normAttr = layout.attrByRole(VertexAttributeRole.Normal);\n\n\tif (posAttr && normAttr) {\n\t\tconst posView = new VertexBufferAttributeView(vertexBuffer, posAttr);\n\t\tconst normView = new VertexBufferAttributeView(vertexBuffer, normAttr);\n\n\t\tcalcVertexNormalsViews(posView, normView, triView);\n\t}\n\t// TODO: else warn?\n}\n\n\nexport function calcVertexNormalsViews(posView: VertexBufferAttributeView, normView: VertexBufferAttributeView, triView: TriangleView) {\n\tconst vertexCount = posView.vertexCount;\n\tconst normalCount = normView.vertexCount;\n\tassert(vertexCount <= normalCount);\n\tconst baseVertex = normView.fromVertex;\n\n\tnormView.forEach(norm => {\n\t\tvec3.set(norm, 0, 0, 1);\n\t});\n\tconst usages = new Float32Array(vertexCount);\n\n\tconst lineA = vec3.create(), lineB = vec3.create();\n\tconst faceNormal = vec3.create(), temp = vec3.create();\n\n\ttriView.forEach((face: TriangleProxy) => {\n\t\tconst posA = posView.copyItem(face.a - baseVertex);\n\t\tconst posB = posView.copyItem(face.b - baseVertex);\n\t\tconst posC = posView.copyItem(face.c - baseVertex);\n\n\t\tvec3.subtract(lineA, posB, posA);\n\t\tvec3.subtract(lineB, posC, posB);\n\n\t\tif (vec3.length(lineA) < 0.00001 || vec3.length(lineB) < 0.00001) {\n\t\t\treturn;\n\t\t}\n\n\t\tvec3.cross(faceNormal, lineA, lineB);\n\t\tvec3.normalize(faceNormal, faceNormal);\n\n\t\tfor (let fi = 0; fi < 3; ++fi) {\n\t\t\tconst fvi = face.index(fi) - baseVertex;\n\t\t\tconst norm = normView.refItem(fvi);\n\n\t\t\t// normBegin[fvi] = (normBegin[fvi] * usages[fvi] + faceNormal) / (usages[fvi] + 1.0f);\n\t\t\tvec3.scaleAndAdd(temp, faceNormal, norm, usages[fvi]);\n\t\t\tvec3.scale(norm, temp, 1 / (usages[fvi] + 1));\n\n\t\t\tusages[fvi] += 1;\n\t\t}\n\t});\n\n\tnormView.forEach((norm) => {\n\t\tvec3.normalize(norm, norm);\n\t});\n}\n\n\nexport function calcVertexTangents(layout: VertexBufferLayout, vertexBuffer: VertexBuffer, triView: TriangleView, uvSet = VertexAttributeRole.UV0) {\n\tconst posAttr = layout.attrByRole(VertexAttributeRole.Position);\n\tconst normAttr = layout.attrByRole(VertexAttributeRole.Normal);\n\tconst uvAttr = layout.attrByRole(uvSet);\n\tconst tanAttr = layout.attrByRole(VertexAttributeRole.Tangent);\n\n\tif (posAttr && normAttr && uvAttr && tanAttr) {\n\t\tconst posView = new VertexBufferAttributeView(vertexBuffer, posAttr);\n\t\tconst normView = new VertexBufferAttributeView(vertexBuffer, normAttr);\n\t\tconst uvView = new VertexBufferAttributeView(vertexBuffer, uvAttr);\n\t\tconst tanView = new VertexBufferAttributeView(vertexBuffer, tanAttr);\n\n\t\tcalcVertexTangentsViews(posView, normView, uvView, tanView, triView);\n\t}\n\t// TODO: else warn?\n}\n\n\nexport function calcVertexTangentsViews(\n\tposView: VertexBufferAttributeView,\n\tnormView: VertexBufferAttributeView,\n\tuvView: VertexBufferAttributeView,\n\ttanView: VertexBufferAttributeView,\n\ttriView: TriangleView\n) {\n\t// adaptation of http://www.terathon.com/code/tangent.html\n\t// by Eric Lengyel\n\n\tconst vertexCount = posView.vertexCount;\n\tassert(vertexCount <= normView.vertexCount);\n\tassert(vertexCount <= uvView.vertexCount);\n\tassert(vertexCount <= tanView.vertexCount);\n\n\tconst tanBuf = new Float32Array(vertexCount * 3 * 2);\n\tconst tan1 = tanBuf.subarray(0, vertexCount);\n\tconst tan2 = tanBuf.subarray(vertexCount);\n\n\ttriView.forEach(face => {\n\t\tconst { a, b, c } = face;\n\n\t\tconst v1 = posView.copyItem(a),\n\t\t\tv2 = posView.copyItem(b),\n\t\t\tv3 = posView.copyItem(c);\n\n\t\tconst w1 = uvView.copyItem(a),\n\t\t\tw2 = uvView.copyItem(b),\n\t\t\tw3 = uvView.copyItem(c);\n\n\t\tconst x1 = v2[0] - v1[0];\n\t\tconst x2 = v3[0] - v1[0];\n\t\tconst y1 = v2[1] - v1[1];\n\t\tconst y2 = v3[1] - v1[1];\n\t\tconst z1 = v2[2] - v1[2];\n\t\tconst z2 = v3[2] - v1[2];\n\n\t\tconst s1 = w2[0] - w1[0];\n\t\tconst s2 = w3[0] - w1[0];\n\t\tconst t1 = w2[1] - w1[1];\n\t\tconst t2 = w3[1] - w1[1];\n\n\t\tconst rd = (s1 * t2 - s2 * t1);\n\t\tconst r = rd === 0 ? 0.0 : 1.0 / rd;\n\t\tconst sdir = [\n\t\t\t(t2 * x1 - t1 * x2) * r,\n\t\t\t(t2 * y1 - t1 * y2) * r,\n\t\t\t(t2 * z1 - t1 * z2) * r\n\t\t];\n\t\tconst tdir = [\n\t\t\t(s1 * x2 - s2 * x1) * r,\n\t\t\t(s1 * y2 - s2 * y1) * r,\n\t\t\t(s1 * z2 - s2 * z1) * r\n\t\t];\n\n\t\t// tan1[a] += sdir;\n\t\t// tan1[b] += sdir;\n\t\t// tan1[c] += sdir;\n\t\tconst tan1a = copyIndexedVec3(tan1, a);\n\t\tconst tan1b = copyIndexedVec3(tan1, b);\n\t\tconst tan1c = copyIndexedVec3(tan1, c);\n\t\tsetIndexedVec3(tan1, a, vec3.add(tan1a, tan1a, sdir));\n\t\tsetIndexedVec3(tan1, b, vec3.add(tan1b, tan1b, sdir));\n\t\tsetIndexedVec3(tan1, c, vec3.add(tan1c, tan1c, sdir));\n\n\t\t// tan2[a] += tdir;\n\t\t// tan2[b] += tdir;\n\t\t// tan2[c] += tdir;\n\t\tconst tan2a = copyIndexedVec3(tan2, a);\n\t\tconst tan2b = copyIndexedVec3(tan2, b);\n\t\tconst tan2c = copyIndexedVec3(tan2, c);\n\t\tsetIndexedVec3(tan2, a, vec3.add(tan2a, tan2a, tdir));\n\t\tsetIndexedVec3(tan2, b, vec3.add(tan2b, tan2b, tdir));\n\t\tsetIndexedVec3(tan2, c, vec3.add(tan2c, tan2c, tdir));\n\t});\n\n\tfor (let ix = 0; ix < vertexCount; ++ix) {\n\t\tconst n = normView.copyItem(ix);\n\t\tconst t = copyIndexedVec3(tan1, ix);\n\t\tconst t2 = copyIndexedVec3(tan2, ix);\n\n\t\t// Gram-Schmidt orthogonalize, specify standard normal in case n or t = 0\n\t\tconst tangent = vec3.normalize([0, 0, 1], vec3.sub([], t, vec3.scale([], n, vec3.dot(n, t))));\n\n\t\t// Reverse tangent to conform to GL handedness if needed\n\t\tif (vec3.dot(vec3.cross([], n, t), t2) < 0) {\n\t\t\tvec3.scale(tangent, tangent, -1);\n\t\t}\n\n\t\tif (isNaN(tangent[0]) || isNaN(tangent[1]) || isNaN(tangent[2])) {\n\t\t\tassert(false, \"Failure during tangent calculation\");\n\t\t}\n\t\tvec3.copy(tanView.refItem(ix), tangent);\n\t}\n}\n","/**\n * geometry-gen/generate - geometry generators\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert, Float2, Float3, Float4 } from \"@stardazed/core\";\nimport { vec3, mat3, mat4, quat, clamp01 } from \"@stardazed/math\";\nimport { VertexAttribute, Geometry, VertexAttributeRole, allocateGeometry, makeStandardVertexLayout, PrimitiveType } from \"@stardazed/geometry\";\nimport { VertexBufferAttributeView, triangleViewForGeometry } from \"@stardazed/geometry-data\";\nimport { AttrList, attrPosition2, attrUV2 } from \"./vertex-types\";\nimport { calcVertexNormalsViews } from \"./calc-derived\";\n\nexport type Vec2AddFn = (u: number, v: number) => void;\nexport type Vec3AddFn = (x: number, y: number, z: number) => void;\nexport type IndexesAddFn = (a: number, b: number, c: number) => void;\n\nexport interface MeshGenerator {\n\treadonly vertexCount: number;\n\treadonly faceCount: number;\n\n\treadonly explicitNormals: boolean;\n\n\tgenerate(position: Vec3AddFn, face: IndexesAddFn, normal: Vec3AddFn, uv: Vec2AddFn): void;\n}\n\nexport interface TransformedMeshGen {\n\tgenerator: MeshGenerator;\n\trotation?: Float4; // quat\n\ttranslation?: Float3; // vec3\n\tscale?: Float3; // vec3\n}\n\nexport type MeshGenSource = MeshGenerator | TransformedMeshGen;\n\n\nexport async function generate(gens: MeshGenSource | MeshGenSource[], attrList?: VertexAttribute[]): Promise<Geometry> {\n\tif (! attrList) {\n\t\tattrList = AttrList.Pos3Norm3UV2();\n\t}\n\n\tconst genList = Array.isArray(gens) ? gens : [gens];\n\tlet totalVertexCount = 0;\n\tlet totalFaceCount = 0;\n\n\tfor (const genSource of genList) {\n\t\tconst generator: MeshGenerator = (\"generator\" in genSource) ? (genSource as TransformedMeshGen).generator : genSource as MeshGenerator;\n\t\ttotalVertexCount += generator.vertexCount;\n\t\ttotalFaceCount += generator.faceCount;\n\t}\n\n\t// -- create vertex and index buffers for combined geometry\n\tconst geom = allocateGeometry({\n\t\tlayout: makeStandardVertexLayout(attrList),\n\t\tvertexCount: totalVertexCount,\n\t\tindexCount: totalFaceCount * 3\n\t});\n\tconst layout = geom.layout.layouts[0];\n\tconst vertexBuffer = geom.vertexBuffers[0];\n\n\t// -- views into various attributes and the index buffer\n\tconst normalAttr = layout.attrByRole(VertexAttributeRole.Normal);\n\tconst texAttr = layout.attrByRole(VertexAttributeRole.UV);\n\n\tconst posView = new VertexBufferAttributeView(geom.vertexBuffers[0], layout.attrByRole(VertexAttributeRole.Position)!);\n\tconst normalView = normalAttr ? new VertexBufferAttributeView(vertexBuffer, normalAttr) : null;\n\tconst texView = texAttr ? new VertexBufferAttributeView(vertexBuffer, texAttr) : null;\n\n\tconst triView = await (await triangleViewForGeometry(geom)).mutableView();\n\n\t// -- data add functions for the generators\n\tlet posIx = 0, faceIx = 0, normalIx = 0, uvIx = 0, baseVertex = 0;\n\n\tconst pos2: Vec3AddFn = (x: number, y: number, _z: number) => {\n\t\tconst v2 = posView.refItem(posIx);\n\t\tv2[0] = x; v2[1] = y;\n\t\tposIx++;\n\t};\n\n\tconst pos3: Vec3AddFn = (x: number, y: number, z: number) => {\n\t\tconst v3 = posView.refItem(posIx);\n\t\tv3[0] = x; v3[1] = y; v3[2] = z;\n\t\tposIx++;\n\t};\n\n\tconst pos = posView.elementCount === 2 ? pos2 : pos3;\n\n\tconst face: IndexesAddFn = (a: number, b: number, c: number) => {\n\t\tconst i3 = triView.refItemMutable!(faceIx);\n\t\ti3[0] = a + baseVertex; i3[1] = b + baseVertex; i3[2] = c + baseVertex;\n\t\tfaceIx++;\n\t};\n\n\tconst normal: Vec3AddFn = normalView ?\n\t\t(x: number, y: number, z: number) => {\n\t\t\tconst v3 = normalView!.refItem(normalIx);\n\t\t\tv3[0] = x; v3[1] = y; v3[2] = z;\n\t\t\tnormalIx++;\n\t\t}\n\t\t: (_x: number, _y: number, _z: number) => { /* ignored */ };\n\n\tconst uv: Vec2AddFn = texView ?\n\t\t(u: number, v: number) => {\n\t\t\tconst v2 = texView!.refItem(uvIx);\n\t\t\tv2[0] = u; v2[1] = v;\n\t\t\tuvIx++;\n\t\t}\n\t\t: (_u: number, _v: number) => { /* ignored */ };\n\n\t// -- generate and optionally transform each part\n\tconst posTransMatrix = mat4.create();\n\tconst normTransMatrix = mat3.create();\n\n\tfor (const genSource of genList) {\n\t\tconst generator: MeshGenerator = (\"generator\" in genSource) ? (genSource as TransformedMeshGen).generator : genSource as MeshGenerator;\n\t\tgenerator.generate(pos, face, normal, uv);\n\n\t\tconst subVtxCount = generator.vertexCount;\n\t\tconst subFaceCount = generator.faceCount;\n\t\tconst subPosView = posView.subView(baseVertex, subVtxCount); // WARNING FIXME: param 2 has changed to \"toTriangle\"\n\t\tconst subNormalView = normalView ? normalView.subView(baseVertex, subVtxCount) : null; // WARNING FIXME: param 2 has changed to \"toTriangle\"\n\n\t\t// -- if the generator does not supply normals but the geometry has a Normal attribute, we calculate them\n\t\tif (subNormalView && ! generator.explicitNormals) {\n\t\t\tconst subFaceView = triView.subView(faceIx - subFaceCount, subFaceCount); // WARNING FIXME: param 2 has changed to \"toTriangle\"\n\t\t\tcalcVertexNormalsViews(subPosView, subNormalView, subFaceView);\n\n\t\t\tnormalIx += subVtxCount;\n\t\t}\n\n\t\t// is this a TransformedMeshGen?\n\t\tif (\"generator\" in genSource) {\n\t\t\tconst xformGen = genSource as TransformedMeshGen;\n\t\t\tconst rotation = xformGen.rotation || quat.create();\n\t\t\tconst translation = xformGen.translation || vec3.create();\n\t\t\tconst scale = xformGen.scale || vec3.fromValues(1, 1, 1);\n\n\t\t\t// -- transform positions\n\t\t\tmat4.fromRotationTranslationScale(posTransMatrix, rotation, translation, scale);\n\t\t\tsubPosView.forEach(vtxPos => { vec3.transformMat4(vtxPos, vtxPos, posTransMatrix); });\n\n\t\t\t// -- transform normals\n\t\t\tif (subNormalView) {\n\t\t\t\tmat3.normalFromMat4(normTransMatrix, posTransMatrix);\n\t\t\t\tsubNormalView.forEach((norm) => { vec3.transformMat3(norm, norm, normTransMatrix); });\n\t\t\t}\n\t\t}\n\n\t\tbaseVertex += generator.vertexCount;\n\t}\n\n\t// -- currently generate single primitive group for full geometry\n\t// TODO: make this more configurable\n\tgeom.subMeshes.push({\n\t\ttype: PrimitiveType.Triangle,\n\t\tfromElement: 0,\n\t\telementCount: totalFaceCount * 3,\n\t\tmaterialIx: 0\n\t});\n\n\treturn geom;\n}\n\n\n//   ___               _\n//  / _ \\ _  _ __ _ __| |\n// | (_) | || / _` / _` |\n//  \\__\\_\\\\_,_\\__,_\\__,_|\n//\n\nexport class Quad implements MeshGenerator {\n\tconstructor(private width_ = 1, private height_ = 1) {\n\t\tassert(width_ > 0);\n\t\tassert(height_ > 0);\n\t}\n\n\tget vertexCount(): number {\n\t\treturn 4;\n\t}\n\n\tget faceCount(): number {\n\t\treturn 2;\n\t}\n\n\tget explicitNormals() {\n\t\treturn true;\n\t}\n\n\tgenerate(position: Vec3AddFn, face: IndexesAddFn, normal: Vec3AddFn, uv: Vec2AddFn) {\n\t\tconst xh = this.width_ / 2;\n\t\tconst yh = this.height_ / 2;\n\n\t\tposition(-xh, yh, 0);\n\t\tposition(xh, yh, 0);\n\t\tposition(-xh, -yh, 0);\n\t\tposition(xh, -yh, 0);\n\n\t\tnormal(0, 0, -1);\n\t\tnormal(0, 0, -1);\n\t\tnormal(0, 0, -1);\n\t\tnormal(0, 0, -1);\n\n\t\t// quad shows texture fully\n\t\tuv(0, 0);\n\t\tuv(1, 0);\n\t\tuv(0, 1);\n\t\tuv(1, 1);\n\n\t\t// ccw faces\n\t\tface(0, 3, 1);\n\t\tface(0, 2, 3);\n\t}\n}\n\nexport async function genFullscreenQuad() {\n\treturn await generate(new Quad(2, 2), [attrPosition2(), attrUV2()]);\n}\n\n\n//  _  _ ___   ___ _____    _                _     \n// | \\| |   \\ / __|_   _| _(_)__ _ _ _  __ _| |___ \n// | .` | |) | (__  | || '_| / _` | ' \\/ _` | / -_)\n// |_|\\_|___/ \\___| |_||_| |_\\__,_|_||_\\__, |_\\___|\n//                                     |___/       \n\nexport class NDCTriangle implements MeshGenerator {\n\tget vertexCount(): number {\n\t\treturn 3;\n\t}\n\n\tget faceCount(): number {\n\t\treturn 1;\n\t}\n\n\tget explicitNormals() {\n\t\treturn true;\n\t}\n\n\tgenerate(position: Vec3AddFn, face: IndexesAddFn, normal: Vec3AddFn, uv: Vec2AddFn) {\n\t\tposition(-1, -1, 0);\n\t\tposition(-1, 4, 0);\n\t\tposition( 4, -1, 0);\n\n\t\tnormal(0, 0, -1);\n\t\tnormal(0, 0, -1);\n\t\tnormal(0, 0, -1);\n\n\t\t// UVs go from 0 to 1 over 2 units\n\t\tuv(0, 0);\n\t\tuv(0, 2);\n\t\tuv(2, 0);\n\n\t\t// ccw\n\t\tface(0, 1, 2);\n\t}\n}\n\nexport async function genFullscreenTriangle() {\n\treturn await generate(new NDCTriangle(), [attrPosition2(), attrUV2()]);\n}\n\n\n//  ___ _\n// | _ \\ |__ _ _ _  ___\n// |  _/ / _` | ' \\/ -_)\n// |_| |_\\__,_|_||_\\___|\n//\n\nexport type PlaneYGenerator = (x: number, z: number) => number;\n\nexport interface PlaneDescriptor {\n\twidth: number;\n\tdepth: number;\n\tyGen?: PlaneYGenerator;\n\n\trows: number;\n\tsegs: number;\n}\n\nexport class Plane implements MeshGenerator {\n\tprivate width_: number;\n\tprivate depth_: number;\n\tprivate rows_: number;\n\tprivate segs_: number;\n\tprivate yGen_: PlaneYGenerator;\n\n\tconstructor(desc: PlaneDescriptor) {\n\t\tthis.width_ = desc.width;\n\t\tthis.depth_ = desc.depth;\n\t\tthis.rows_ = desc.rows | 0;\n\t\tthis.segs_ = desc.segs | 0;\n\t\tthis.yGen_ = desc.yGen || ((_x, _z) => 0);\n\n\t\tassert(this.width_ > 0);\n\t\tassert(this.depth_ > 0);\n\t\tassert(this.rows_ > 0);\n\t\tassert(this.segs_ > 0);\n\t}\n\n\tget vertexCount(): number {\n\t\treturn (this.rows_ + 1) * (this.segs_ + 1);\n\t}\n\n\tget faceCount(): number {\n\t\treturn 2 * this.rows_ * this.segs_;\n\t}\n\n\tget explicitNormals() {\n\t\treturn false;\n\t}\n\n\tgenerate(position: Vec3AddFn, face: IndexesAddFn, _normal: Vec3AddFn, uv: Vec2AddFn) {\n\t\tconst halfWidth = this.width_ / 2;\n\t\tconst halfDepth = this.depth_ / 2;\n\t\tconst tileDimX = this.width_ / this.segs_;\n\t\tconst tileDimZ = this.depth_ / this.rows_;\n\n\t\t// -- positions\n\t\tfor (let z = 0; z <= this.rows_; ++z) {\n\t\t\tconst posZ = -halfDepth + (z * tileDimZ);\n\n\t\t\tfor (let x = 0; x <= this.segs_; ++x) {\n\t\t\t\tconst posX = -halfWidth + (x * tileDimX);\n\n\t\t\t\tposition(posX, this.yGen_(posX, posZ), posZ);\n\t\t\t\tuv(x / this.segs_, z / this.rows_);\n\t\t\t}\n\t\t}\n\n\t\t// -- faces\n\t\tlet baseIndex = 0;\n\t\tconst vertexRowCount = this.segs_ + 1;\n\n\t\tfor (let z = 0; z < this.rows_; ++z) {\n\t\t\tfor (let x = 0; x < this.segs_; ++x) {\n\t\t\t\tface(\n\t\t\t\t\tbaseIndex + x + 1,\n\t\t\t\t\tbaseIndex + x + vertexRowCount,\n\t\t\t\t\tbaseIndex + x + vertexRowCount + 1\n\t\t\t\t);\n\t\t\t\tface(\n\t\t\t\t\tbaseIndex + x,\n\t\t\t\t\tbaseIndex + x + vertexRowCount,\n\t\t\t\t\tbaseIndex + x + 1\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tbaseIndex += vertexRowCount;\n\t\t}\n\t}\n}\n\n\n//  ___\n// | _ ) _____ __\n// | _ \\/ _ \\ \\ /\n// |___/\\___/_\\_\\\n//\n\nexport interface BoxDescriptor {\n\twidth: number;  // float, dimension in X\n\theight: number; // float, dimension in Y\n\tdepth: number;  // float, dimension in Z\n\n\tinward?: boolean;\n\tuvRange?: Float2;\n\tuvOffset?: Float2;\n}\n\nexport function cubeDescriptor(diam: number, inward = false): BoxDescriptor {\n\treturn { width: diam, height: diam, depth: diam, inward };\n}\n\nexport class Box implements MeshGenerator {\n\tprivate xDiam_: number;\n\tprivate yDiam_: number;\n\tprivate zDiam_: number;\n\tprivate uvRange_: Float2;\n\tprivate uvOffset_: Float2;\n\tprivate inward_: boolean;\n\n\tconstructor(desc: BoxDescriptor) {\n\t\tthis.xDiam_ = desc.width;\n\t\tthis.yDiam_ = desc.height;\n\t\tthis.zDiam_ = desc.depth;\n\t\tthis.inward_ = desc.inward || false;\n\n\t\tassert(this.xDiam_ > 0);\n\t\tassert(this.yDiam_ > 0);\n\t\tassert(this.zDiam_ > 0);\n\n\t\tthis.uvRange_ = desc.uvRange ? [desc.uvRange[0], desc.uvRange[1]] : [1, 1];\n\t\tthis.uvOffset_ = desc.uvOffset ? [desc.uvOffset[0], desc.uvOffset[1]] : [0, 0];\n\t}\n\n\tget vertexCount(): number {\n\t\treturn 24;\n\t}\n\n\tget faceCount(): number {\n\t\treturn 12;\n\t}\n\n\tget explicitNormals() {\n\t\treturn true;\n\t}\n\n\tgenerate(position: Vec3AddFn, face: IndexesAddFn, normal: Vec3AddFn, uv: Vec2AddFn) {\n\t\tconst xh = this.xDiam_ / 2;\n\t\tconst yh = this.yDiam_ / 2;\n\t\tconst zh = this.zDiam_ / 2;\n\t\tconst uA = this.uvOffset_[0];\n\t\tconst uB = this.uvOffset_[0] + this.uvRange_[0];\n\t\tconst vA = this.uvOffset_[1];\n\t\tconst vB = this.uvOffset_[1] + this.uvRange_[1];\n\t\tlet curVtx = 0;\n\n\t\t// unique positions\n\t\tconst p: number[][] = [\n\t\t\t[ -xh, -yh, -zh ],\n\t\t\t[ xh, -yh, -zh ],\n\t\t\t[ xh, yh, -zh ],\n\t\t\t[ -xh, yh, -zh ],\n\n\t\t\t[ -xh, -yh, zh ],\n\t\t\t[ xh, -yh, zh ],\n\t\t\t[ xh, yh, zh ],\n\t\t\t[ -xh, yh, zh ]\n\t\t];\n\n\t\t// topleft, topright, botright, botleft\n\t\tconst quad = (a: number, b: number, c: number, d: number, norm: Float3) => {\n\t\t\tif (this.inward_) {\n\t\t\t\tvec3.negate(norm, norm);\n\t\t\t}\n\n\t\t\tposition(p[a][0], p[a][1], p[a][2]);\n\t\t\tposition(p[b][0], p[b][1], p[b][2]);\n\t\t\tposition(p[c][0], p[c][1], p[c][2]);\n\t\t\tposition(p[d][0], p[d][1], p[d][2]);\n\n\t\t\t// normals\n\t\t\tnormal(norm[0], norm[1], norm[2]);\n\t\t\tnormal(norm[0], norm[1], norm[2]);\n\t\t\tnormal(norm[0], norm[1], norm[2]);\n\t\t\tnormal(norm[0], norm[1], norm[2]);\n\n\t\t\t// each cube quad shows texture fully by default\n\t\t\tuv(uB, vA);\n\t\t\tuv(uA, vA);\n\t\t\tuv(uA, vB);\n\t\t\tuv(uB, vB);\n\n\t\t\t// ccw faces\n\t\t\tif (this.inward_) {\n\t\t\t\tface(curVtx, curVtx + 2, curVtx + 1);\n\t\t\t\tface(curVtx + 2, curVtx, curVtx + 3);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tface(curVtx, curVtx + 1, curVtx + 2);\n\t\t\t\tface(curVtx + 2, curVtx + 3, curVtx);\n\t\t\t}\n\n\t\t\tcurVtx += 4;\n\t\t};\n\n\t\t/* tslint:disable:whitespace */\n\t\tquad(3, 2, 1, 0, [ 0, 0,-1]); // front\n\t\tquad(7, 3, 0, 4, [-1, 0, 0]); // left\n\t\tquad(6, 7, 4, 5, [ 0, 0, 1]); // back\n\t\tquad(2, 6, 5, 1, [ 1, 0, 0]); // right\n\t\tquad(7, 6, 2, 3, [ 0, 1, 0]); // top\n\t\tquad(5, 4, 0, 1, [ 0,-1, 0]); // bottom\n\t\t/* tslint:enable:whitespace */\n\t}\n}\n\n\n//  ___\n// | _ ) _____ __\n// | _ \\/ _ \\ \\ /\n// |___/\\___/_\\_\\ 2\n//\n\nexport interface RoundedBoxDescriptor {\n\twidth: number;  // float, dimension in X\n\theight: number; // float, dimension in Y\n\tdepth: number;  // float, dimension in Z\n\tcornerRadius: number;\n\tcornerSteps: number;\n\n\tinward?: boolean;\n\tuvRange?: Float2;\n\tuvOffset?: Float2;\n}\n\nexport class RoundedBox implements MeshGenerator {\n\tprivate xDiam_: number;\n\tprivate yDiam_: number;\n\tprivate zDiam_: number;\n\tprivate radius_: number;\n\tprivate uvRange_: Float2;\n\tprivate uvOffset_: Float2;\n\tprivate inward_: boolean;\n\n\tconstructor(desc: RoundedBoxDescriptor) {\n\t\tthis.xDiam_ = desc.width;\n\t\tthis.yDiam_ = desc.height;\n\t\tthis.zDiam_ = desc.depth;\n\t\tthis.radius_ = desc.cornerRadius;\n\t\tthis.inward_ = desc.inward || false;\n\n\t\tassert(this.xDiam_ > 0);\n\t\tassert(this.yDiam_ > 0);\n\t\tassert(this.zDiam_ > 0);\n\t\tconst minDiamHalf = Math.min(this.xDiam_, this.yDiam_, this.zDiam_) / 2;\n\t\tassert(this.radius_ >= 0 && this.radius_ <= minDiamHalf);\n\n\t\tthis.uvRange_ = desc.uvRange ? [desc.uvRange[0], desc.uvRange[1]] : [1, 1];\n\t\tthis.uvOffset_ = desc.uvOffset ? [desc.uvOffset[0], desc.uvOffset[1]] : [0, 0];\n\t}\n\n\tget vertexCount(): number {\n\t\treturn 24;\n\t}\n\n\tget faceCount(): number {\n\t\treturn 12;\n\t}\n\n\tget explicitNormals() {\n\t\treturn true;\n\t}\n\n\tgenerate(position: Vec3AddFn, face: IndexesAddFn, normal: Vec3AddFn, uv: Vec2AddFn) {\n\t\tconst xh = this.xDiam_ / 2;\n\t\tconst yh = this.yDiam_ / 2;\n\t\tconst zh = this.zDiam_ / 2;\n\t\tconst uA = this.uvOffset_[0];\n\t\tconst uB = this.uvOffset_[0] + this.uvRange_[0];\n\t\tconst vA = this.uvOffset_[1];\n\t\tconst vB = this.uvOffset_[1] + this.uvRange_[1];\n\t\tlet curVtx = 0;\n\n\t\t// unique positions\n\t\tconst p: number[][] = [\n\t\t\t[ -xh, -yh, -zh ],\n\t\t\t[ xh, -yh, -zh ],\n\t\t\t[ xh, yh, -zh ],\n\t\t\t[ -xh, yh, -zh ],\n\n\t\t\t[ -xh, -yh, zh ],\n\t\t\t[ xh, -yh, zh ],\n\t\t\t[ xh, yh, zh ],\n\t\t\t[ -xh, yh, zh ]\n\t\t];\n\n\t\t// topleft, topright, botright, botleft\n\t\tconst quad = (a: number, b: number, c: number, d: number, norm: Float3) => {\n\t\t\tif (this.inward_) {\n\t\t\t\tvec3.negate(norm, norm);\n\t\t\t}\n\n\t\t\tposition(p[a][0], p[a][1], p[a][2]);\n\t\t\tposition(p[b][0], p[b][1], p[b][2]);\n\t\t\tposition(p[c][0], p[c][1], p[c][2]);\n\t\t\tposition(p[d][0], p[d][1], p[d][2]);\n\n\t\t\t// normals\n\t\t\tnormal(norm[0], norm[1], norm[2]);\n\t\t\tnormal(norm[0], norm[1], norm[2]);\n\t\t\tnormal(norm[0], norm[1], norm[2]);\n\t\t\tnormal(norm[0], norm[1], norm[2]);\n\n\t\t\t// each cube quad shows texture fully by default\n\t\t\tuv(uB, vA);\n\t\t\tuv(uA, vA);\n\t\t\tuv(uA, vB);\n\t\t\tuv(uB, vB);\n\n\t\t\t// ccw faces\n\t\t\tif (this.inward_) {\n\t\t\t\tface(curVtx, curVtx + 2, curVtx + 1);\n\t\t\t\tface(curVtx + 2, curVtx, curVtx + 3);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tface(curVtx, curVtx + 1, curVtx + 2);\n\t\t\t\tface(curVtx + 2, curVtx + 3, curVtx);\n\t\t\t}\n\n\t\t\tcurVtx += 4;\n\t\t};\n\n\t\t/* tslint:disable:whitespace */\n\t\tquad(3, 2, 1, 0, [ 0, 0,-1]); // front\n\t\tquad(7, 3, 0, 4, [-1, 0, 0]); // left\n\t\tquad(6, 7, 4, 5, [ 0, 0, 1]); // back\n\t\tquad(2, 6, 5, 1, [ 1, 0, 0]); // right\n\t\tquad(7, 6, 2, 3, [ 0, 1, 0]); // top\n\t\tquad(5, 4, 0, 1, [ 0,-1, 0]); // bottom\n\t\t/* tslint:enable:whitespace */\n\t}\n}\n\n\n//   ___\n//  / __|___ _ _  ___\n// | (__/ _ \\ ' \\/ -_)\n//  \\___\\___/_||_\\___|\n//\n\nexport interface ConeDescriptor {\n\tradiusA: number; // float, 0..\n\tradiusB: number; // float, 0.., radiusA == radiusB -> cylinder\n\theight: number;  // float, 0..\n\n\trows: number;    // int, 1..\n\tsegs: number;    // int, 3..\n}\n\nexport class Cone implements MeshGenerator {\n\tprivate radiusA_: number;\n\tprivate radiusB_: number;\n\tprivate height_: number;\n\tprivate rows_: number;\n\tprivate segs_: number;\n\n\tconstructor(desc: ConeDescriptor) {\n\t\tthis.radiusA_ = desc.radiusA;\n\t\tthis.radiusB_ = desc.radiusB;\n\t\tthis.height_ = desc.height;\n\t\tthis.rows_ = desc.rows | 0;\n\t\tthis.segs_ = desc.segs | 0;\n\n\t\tassert(this.radiusA_ >= 0);\n\t\tassert(this.radiusB_ >= 0);\n\t\tassert(! ((this.radiusA_ === 0) && (this.radiusB_ === 0)));\n\t\tassert(this.rows_ >= 1);\n\t\tassert(this.segs_ >= 3);\n\t}\n\n\tget vertexCount(): number {\n\t\treturn (this.segs_ + 1) * (this.rows_ + 1);\n\t}\n\n\tget faceCount(): number {\n\t\tlet fc = (2 * this.segs_ * this.rows_);\n\t\tif ((this.radiusA_ === 0) || (this.radiusB_ === 0)) {\n\t\t\tfc -= this.segs_;\n\t\t}\n\t\treturn fc;\n\t}\n\n\tget explicitNormals() {\n\t\treturn true;\n\t}\n\n\tgenerate(position: Vec3AddFn, face: IndexesAddFn, normal: Vec3AddFn, uv: Vec2AddFn) {\n\t\tlet vix = 0;\n\t\tconst radiusDiff = this.radiusB_ - this.radiusA_;\n\t\tconst tau = Math.PI * 2;\n\n\t\tconst yNorm = radiusDiff / this.height_;\n\n\t\tfor (let row = 0; row <= this.rows_; ++row) {\n\t\t\tconst relPos = row / this.rows_;\n\n\t\t\tconst y = (relPos * -this.height_) + (this.height_ / 2);\n\t\t\tconst segRad = this.radiusA_ + (relPos * radiusDiff);\n\t\t\tconst texV = relPos;\n\n\t\t\tfor (let seg = 0; seg <= this.segs_; ++seg) {\n\t\t\t\tconst x = Math.sin((tau / this.segs_) * seg) * segRad;\n\t\t\t\tconst z = Math.cos((tau / this.segs_) * seg) * segRad;\n\t\t\t\tconst texU = seg / this.segs_;\n\n\t\t\t\tposition(x, y, z);\n\t\t\t\tconst norm = vec3.normalize([], [x, yNorm, z]);\n\t\t\t\tnormal(norm[0], norm[1], norm[2]);\n\t\t\t\tuv(texU, texV);\n\t\t\t\t++vix;\n\t\t\t}\n\n\t\t\t// construct row of faces\n\t\t\tif (row > 0) {\n\t\t\t\tconst raix = vix - ((this.segs_ + 1) * 2);\n\t\t\t\tconst rbix = vix - (this.segs_ + 1);\n\n\t\t\t\tfor (let seg = 0; seg < this.segs_; ++seg) {\n\t\t\t\t\tconst rl = seg;\n\t\t\t\t\tconst rr = seg + 1;\n\n\t\t\t\t\tif (row > 1 || this.radiusA_ > 0) {\n\t\t\t\t\t\tface(raix + rl, rbix + rl, raix + rr);\n\t\t\t\t\t}\n\t\t\t\t\tif (row < this.rows_ || this.radiusB_ > 0) {\n\t\t\t\t\t\tface(raix + rr, rbix + rl, rbix + rr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n//  ___      _\n// / __|_ __| |_  ___ _ _ ___\n// \\__ \\ '_ \\ ' \\/ -_) '_/ -_)\n// |___/ .__/_||_\\___|_| \\___|\n//     |_|\n\nexport interface SphereDescriptor {\n\tradius: number;     // float\n\n\trows: number;       // int: 2.., number of row subdivisions\n\tsegs: number;       // int: 3.., number of quad facets per row\n\n\tsliceFrom?: number; // float: 0.0..1.0, vertical start of sphere section (def: 0.0)\n\tsliceTo?: number;   // float: 0.0..1.0, vertical end of sphere section (def: 1.0)\n}\n\nexport class Sphere implements MeshGenerator {\n\tprivate radius_: number;\n\tprivate rows_: number;\n\tprivate segs_: number;\n\tprivate sliceFrom_: number;\n\tprivate sliceTo_: number;\n\n\tconstructor(desc: SphereDescriptor) {\n\t\tthis.radius_ = desc.radius;\n\t\tthis.rows_ = desc.rows | 0;\n\t\tthis.segs_ = desc.segs | 0;\n\t\tthis.sliceFrom_ = clamp01(desc.sliceFrom || 0.0);\n\t\tthis.sliceTo_ = clamp01(desc.sliceTo || 1.0);\n\n\t\tassert(this.radius_ > 0);\n\t\tassert(this.rows_ >= 2);\n\t\tassert(this.segs_ >= 3);\n\t\tassert(this.sliceTo_ > this.sliceFrom_);\n\t}\n\n\tget vertexCount(): number {\n\t\treturn (this.segs_ + 1) * (this.rows_ + 1);\n\t}\n\n\tget faceCount(): number {\n\t\tlet fc = 2 * this.segs_ * this.rows_;\n\t\tif (this.sliceFrom_ === 0.0) {\n\t\t\tfc -= this.segs_;\n\t\t}\n\t\tif (this.sliceTo_ === 1.0) {\n\t\t\tfc -= this.segs_;\n\t\t}\n\t\treturn fc;\n\t}\n\n\tget explicitNormals() {\n\t\treturn true;\n\t}\n\n\tgenerate(position: Vec3AddFn, face: IndexesAddFn, normal: Vec3AddFn, uv: Vec2AddFn) {\n\t\tconst pi = Math.PI;\n\t\tconst tau = Math.PI * 2;\n\n\t\tconst slice = this.sliceTo_ - this.sliceFrom_;\n\t\tconst piFrom = this.sliceFrom_ * pi;\n\t\tconst piSlice = slice * pi;\n\n\t\tlet vix = 0;\n\t\tconst openTop = this.sliceFrom_ > 0.0;\n\t\tconst openBottom = this.sliceTo_ < 1.0;\n\n\t\tfor (let row = 0; row <= this.rows_; ++row) {\n\t\t\tconst y = Math.cos(piFrom + (piSlice / this.rows_) * row) * this.radius_;\n\t\t\tconst segRad = Math.sin(piFrom + (piSlice / this.rows_) * row) * this.radius_;\n\t\t\tconst texV = this.sliceFrom_ + ((row / this.rows_) * slice);\n\n\t\t\tfor (let seg = 0; seg <= this.segs_; ++seg) {\n\t\t\t\tconst tauSeg = (tau / this.segs_);\n\t\t\t\tconst x = Math.sin(tauSeg * seg) * segRad;\n\t\t\t\tconst z = Math.cos(tauSeg * seg) * segRad;\n\t\t\t\tconst texU = seg / this.segs_;\n\n\t\t\t\t// for a sphere with origin at [0,0,0], the normalized position is the normal\n\t\t\t\tposition(x, y, z);\n\t\t\t\tconst norm = vec3.normalize([], [x, y, z]);\n\t\t\t\tnormal(norm[0], norm[1], norm[2]);\n\t\t\t\tuv(texU, texV);\n\t\t\t\t++vix;\n\t\t\t}\n\n\t\t\t// construct row of faces\n\t\t\tif (row > 0) {\n\t\t\t\tconst raix = vix - ((this.segs_ + 1) * 2);\n\t\t\t\tconst rbix = vix - (this.segs_ + 1);\n\n\t\t\t\tfor (let seg = 0; seg < this.segs_; ++seg) {\n\t\t\t\t\tconst rl = seg;\n\t\t\t\t\tconst rr = seg + 1;\n\n\t\t\t\t\tif (row > 1 || openTop) {\n\t\t\t\t\t\tface(raix + rl, rbix + rl, raix + rr);\n\t\t\t\t\t}\n\t\t\t\t\tif (row < this.rows_ || openBottom) {\n\t\t\t\t\t\tface(raix + rr, rbix + rl, rbix + rr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n//  _____\n// |_   _|__ _ _ _  _ ___\n//   | |/ _ \\ '_| || (_-<\n//   |_|\\___/_|  \\_,_/__/\n//\n\nexport interface TorusDescriptor {\n\tminorRadius: number; // float, >= 0\n\tmajorRadius: number; // float, >= minorRadius\n\n\trows: number;       // int: 4.., number of row subdivisions\n\tsegs: number;       // int: 3.., number of quad facets per row\n\n\tsliceFrom?: number; // float: 0.0..1.0, start point of torus center axis\n\tsliceTo?: number;   // float: 0.0..1.0, end point of torus center axis\n}\n\nexport class Torus implements MeshGenerator {\n\tprivate minorRadius_: number;\n\tprivate majorRadius_: number;\n\tprivate rows_: number;\n\tprivate segs_: number;\n\tprivate sliceFrom_: number;\n\tprivate sliceTo_: number;\n\n\tconstructor(desc: TorusDescriptor) {\n\t\tthis.minorRadius_ = desc.minorRadius;\n\t\tthis.majorRadius_ = desc.majorRadius;\n\t\tthis.rows_ = desc.rows | 0;\n\t\tthis.segs_ = desc.segs | 0;\n\t\tthis.sliceFrom_ = clamp01(desc.sliceFrom || 0.0);\n\t\tthis.sliceTo_ = clamp01(desc.sliceTo || 1.0);\n\n\t\tassert(this.minorRadius_ >= 0);\n\t\tassert(this.majorRadius_ >= this.minorRadius_);\n\t\tassert(this.minorRadius_ > 0 || this.majorRadius_ > 0);\n\t\tassert(this.rows_ >= 4);\n\t\tassert(this.segs_ >= 3);\n\t\tassert(this.sliceTo_ > this.sliceFrom_);\n\t}\n\n\tget vertexCount(): number {\n\t\treturn (this.segs_ + 1) * (this.rows_ + 1);\n\t}\n\n\tget faceCount(): number {\n\t\treturn 2 * this.segs_ * this.rows_;\n\t}\n\n\tget explicitNormals() {\n\t\treturn true;\n\t}\n\n\tgenerate(position: Vec3AddFn, face: IndexesAddFn, normal: Vec3AddFn, uv: Vec2AddFn) {\n\t\tconst tau = Math.PI * 2;\n\n\t\tconst slice = this.sliceTo_ - this.sliceFrom_;\n\t\tconst piFrom = this.sliceFrom_ * tau;\n\t\tconst piSlice = slice * tau;\n\n\t\tlet vix = 0;\n\t\tconst innerRadius = this.majorRadius_ - this.minorRadius_;\n\n\t\tfor (let row = 0; row <= this.rows_; ++row) {\n\t\t\tconst majorAngle = piFrom + ((piSlice * row) / this.rows_); // angle on the x-y plane\n\t\t\tconst texV = this.sliceFrom_ + ((row / this.rows_) * slice);\n\n\t\t\tfor (let seg = 0; seg <= this.segs_; ++seg) {\n\t\t\t\tconst innerAngle = (tau * seg) / this.segs_;\n\n\t\t\t\tconst cx = Math.cos(majorAngle) * this.majorRadius_;\n\t\t\t\tconst cy = Math.sin(majorAngle) * this.majorRadius_;\n\n\t\t\t\tconst x = Math.cos(majorAngle) * (this.majorRadius_ + Math.cos(innerAngle) * innerRadius);\n\t\t\t\tconst y = Math.sin(majorAngle) * (this.majorRadius_ + Math.cos(innerAngle) * innerRadius);\n\n\t\t\t\tconst z = Math.sin(innerAngle) * innerRadius;\n\n\t\t\t\tconst texU = seg / this.segs_;\n\t\t\t\tconst vNorm = vec3.normalize([], [x - cx, y - cy, z]);\n\n\t\t\t\tposition(x, y, z);\n\t\t\t\tnormal(vNorm[0], vNorm[1], vNorm[2]);\n\t\t\t\tuv(texU, texV);\n\t\t\t\t++vix;\n\t\t\t}\n\n\t\t\t// construct row of faces\n\t\t\tif (row > 0) {\n\t\t\t\tconst raix = vix - ((this.segs_ + 1) * 2);\n\t\t\t\tconst rbix = vix - (this.segs_ + 1);\n\n\t\t\t\tfor (let seg = 0; seg < this.segs_; ++seg) {\n\t\t\t\t\tconst rl = seg;\n\t\t\t\t\tconst rr = seg + 1;\n\n\t\t\t\t\tface(raix + rl, rbix + rl, raix + rr);\n\t\t\t\t\tface(raix + rr, rbix + rl, rbix + rr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * geometry-gen/manipulate - geometry manipulators\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { Float3, Float4 } from \"@stardazed/core\";\nimport { Geometry, findAttributeOfRoleInGeometry, VertexAttributeRole } from \"@stardazed/geometry\";\nimport { VertexBufferAttributeView } from \"@stardazed/geometry-data\";\nimport { vec3, mat3, mat4, quat } from \"@stardazed/math\";\n\nexport function scale(geom: Geometry, scale: Float3) {\n\tconst posAttr = findAttributeOfRoleInGeometry(geom, VertexAttributeRole.Position);\n\tif (posAttr) {\n\t\tconst posView = new VertexBufferAttributeView(posAttr.vertexBuffer, posAttr.attr);\n\t\tposView.forEach(pos => { vec3.multiply(pos, pos, scale); });\n\t}\n}\n\n\nexport function translate(geom: Geometry, globalDelta: Float3) {\n\tconst posAttr = findAttributeOfRoleInGeometry(geom, VertexAttributeRole.Position);\n\tif (posAttr) {\n\t\tconst posView = new VertexBufferAttributeView(posAttr.vertexBuffer, posAttr.attr);\n\t\tposView.forEach(pos => { vec3.add(pos, pos, globalDelta); });\n\t}\n}\n\n\nexport function rotate(geom: Geometry, rotation: Float4) {\n\tconst posAttr = findAttributeOfRoleInGeometry(geom, VertexAttributeRole.Position);\n\tif (posAttr) {\n\t\tconst posView = new VertexBufferAttributeView(posAttr.vertexBuffer, posAttr.attr);\n\t\tposView.forEach(pos => { vec3.transformQuat(pos, pos, rotation); });\n\t}\n\n\tconst normAttr = findAttributeOfRoleInGeometry(geom, VertexAttributeRole.Normal);\n\tif (normAttr) {\n\t\tconst normView = new VertexBufferAttributeView(normAttr.vertexBuffer, normAttr.attr);\n\t\tnormView.forEach(norm => { vec3.transformQuat(norm, norm, rotation); });\n\t}\n}\n\n\nexport function transform(geom: Geometry, actions: { rotate?: Float4, translate?: Float3, scale?: Float3 }) {\n\tconst rotation = actions.rotate || quat.create();\n\tconst translation = actions.translate || vec3.zero();\n\tconst scale = actions.scale || vec3.one();\n\tconst posMatrix = mat4.fromRotationTranslationScale([], rotation, translation, scale);\n\n\tconst posAttr = findAttributeOfRoleInGeometry(geom, VertexAttributeRole.Position);\n\tif (posAttr) {\n\t\tconst posView = new VertexBufferAttributeView(posAttr.vertexBuffer, posAttr.attr);\n\t\tposView.forEach(pos => { vec3.transformMat4(pos, pos, posMatrix); });\n\t}\n\n\tconst normAttr = findAttributeOfRoleInGeometry(geom, VertexAttributeRole.Normal);\n\tif (normAttr) {\n\t\tconst normView = new VertexBufferAttributeView(normAttr.vertexBuffer, normAttr.attr);\n\t\tconst normalMatrix = mat3.normalFromMat4([], posMatrix);\n\n\t\tnormView.forEach(norm => { vec3.transformMat3(norm, norm, normalMatrix); });\n\t}\n}\n","/**\n * @stardazed/geometry-gen - geometry generation\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nexport * from \"./vertex-types\";\nexport * from \"./builder\";\nexport * from \"./calc-derived\";\nexport * from \"./generate\";\nexport * from \"./manipulate\";\n"],"names":[],"mappings":"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"}