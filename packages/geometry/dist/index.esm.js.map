{"version":3,"file":"index.esm.js","sources":["../../core/src/debug.ts","../../core/src/numeric.ts","../../core/src/struct.ts","../src/vertex-field.ts","../src/vertex-attribute.ts","../../math/src/common.ts","../src/vertex-buffer-layout.ts","../src/vertex-buffer.ts","../src/index-element.ts","../src/index-primitive.ts","../src/index-buffer.ts","../src/geometry.ts","../src/index.ts"],"sourcesContent":["/**\n * core/debug - debugging helpers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nconst DEBUG_MODE = true;\n\n/**\n * asserts a condition to be true or throw an error otherwise\n * @param cond A condition that can be evaluated to true or false\n * @param msg Error message that will be thrown if cond is false\n */\nexport function assert(cond: any, msg?: string) {\n\tif (DEBUG_MODE && !cond) {\n\t\tconsole.error(msg || \"assertion failed\");\n\t\tthrow new Error(msg || \"assertion failed\");\n\t}\n}\n","/**\n * core/numeric - numeric types, traits and array helpers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { TypedArrayConstructor } from \"./array\";\n\n/**\n * Interface describing a binary representation of a number including its\n * limits, storage requirements and associated TypedArray constructor.\n */\nexport interface NumericType {\n\treadonly min: number;\n\treadonly max: number;\n\treadonly signed: boolean;\n\n\treadonly byteSize: number;\n\treadonly arrayType: TypedArrayConstructor;\n}\n\n/**\n * Traits of unsigned 8-bit integer numbers.\n */\nexport const UInt8: NumericType = {\n\tmin: 0,\n\tmax: 255,\n\tsigned: false,\n\tbyteSize: 1,\n\tarrayType: Uint8Array\n};\n\n/**\n * Traits of unsigned 8-bit clamped integer numbers.\n */\nexport const UInt8Clamped: NumericType = {\n\tmin: 0,\n\tmax: 255,\n\tsigned: false,\n\tbyteSize: 1,\n\tarrayType: Uint8ClampedArray\n};\n\n/**\n * Traits of signed 8-bit integer numbers.\n */\nexport const SInt8: NumericType = {\n\tmin: -128,\n\tmax: 127,\n\tsigned: true,\n\tbyteSize: 1,\n\tarrayType: Int8Array\n};\n\n/**\n * Traits of unsigned 16-bit integer numbers.\n */\nexport const UInt16: NumericType = {\n\tmin: 0,\n\tmax: 65535,\n\tsigned: false,\n\tbyteSize: 2,\n\tarrayType: Uint16Array\n};\n\n/**\n * Traits of signed 16-bit integer numbers.\n */\nexport const SInt16: NumericType = {\n\tmin: -32768,\n\tmax: 32767,\n\tsigned: true,\n\tbyteSize: 2,\n\tarrayType: Int16Array\n};\n\n/**\n * Traits of unsigned 32-bit integer numbers.\n */\nexport const UInt32: NumericType = {\n\tmin: 0,\n\tmax: 4294967295,\n\tsigned: false,\n\tbyteSize: 4,\n\tarrayType: Uint32Array\n};\n\n/**\n * Traits of signed 32-bit integer numbers.\n */\nexport const SInt32: NumericType = {\n\tmin: -2147483648,\n\tmax: 2147483647,\n\tsigned: true,\n\tbyteSize: 4,\n\tarrayType: Int32Array\n};\n\n/**\n * Traits of 32-bit floating point numbers.\n */\nexport const Float: NumericType = {\n\tmin: -340282346638528859811704183484516925440.0,\n\tmax: 340282346638528859811704183484516925440.0,\n\tsigned: true,\n\tbyteSize: 4,\n\tarrayType: Float32Array\n};\n\n/**\n * Traits of 64-bit floating point numbers.\n */\nexport const Double: NumericType = {\n\tmin: -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0,\n\tmax: 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0,\n\tsigned: true,\n\tbyteSize: 8,\n\tarrayType: Float64Array\n};\n","/**\n * core/struct - structural primitive helpers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\n/**\n * Deep clone an object. Use only for simple struct types.\n * @param object The object to clone\n */\nexport function cloneStructDeep<T extends object>(object: T): T {\n\tconst copy: any = {};\n\tObject.getOwnPropertyNames(object).forEach(name => {\n\t\tif (typeof (object as any)[name] === \"object\" && (object as any)[name] !== null) {\n\t\t\tcopy[name] = cloneStructDeep((object as any)[name]);\n\t\t}\n\t\telse {\n\t\t\tcopy[name] = (object as any)[name];\n\t\t}\n\t});\n\treturn copy as T;\n}\n\n/**\n * Returns the count of properties in an object.\n * @param obj Any object\n */\nexport function propertyCount(obj: object) {\n\treturn Object.getOwnPropertyNames(obj).length;\n}\n\n/**\n * Create an immutable object that acts as a lookup table with numerical keys, such as (const) enum values.\n * @param keyVals Alternating key, value pairs\n */\nexport function makeLUT<A extends number, B>(...keyVals: (A | B)[]): { readonly [k: number]: Readonly<B>; } {\n\tconst lut: { [k: number]: B; } = {};\n\tconst count = keyVals.length;\n\tfor (let i = 0; i < count; i += 2) {\n\t\tlut[keyVals[i] as number] = keyVals[i + 1] as B;\n\t}\n\treturn Object.freeze(lut);\n}\n","/**\n * geometry/vertexfield - vertex field types and properties\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n * \n * A single field in a vertex buffer\n * 3 properties: element type, count and normalization\n */\n\nimport { NumericType, SInt8, UInt8, SInt16, UInt16, SInt32, UInt32, Float } from \"@stardazed/core\";\n\nexport const enum VertexField {\n\tUndefined,\n\n\t// integer\n\tUInt8,\n\tUInt8x2,\n\tUInt8x3,\n\tUInt8x4,\n\n\tSInt8,\n\tSInt8x2,\n\tSInt8x3,\n\tSInt8x4,\n\n\tUInt16,\n\tUInt16x2,\n\tUInt16x3,\n\tUInt16x4,\n\n\tSInt16,\n\tSInt16x2,\n\tSInt16x3,\n\tSInt16x4,\n\n\tUInt32,\n\tUInt32x2,\n\tUInt32x3,\n\tUInt32x4,\n\n\tSInt32,\n\tSInt32x2,\n\tSInt32x3,\n\tSInt32x4,\n\n\t// floating point\n\tFloat,\n\tFloatx2,\n\tFloatx3,\n\tFloatx4,\n\n\t// normalized\n\tNorm_UInt8 = 0x81,\t// normalized fields have high bit set\n\tNorm_UInt8x2,\n\tNorm_UInt8x3,\n\tNorm_UInt8x4,\n\n\tNorm_SInt8,\n\tNorm_SInt8x2,\n\tNorm_SInt8x3,\n\tNorm_SInt8x4,\n\n\tNorm_UInt16,\n\tNorm_UInt16x2,\n\tNorm_UInt16x3,\n\tNorm_UInt16x4,\n\n\tNorm_SInt16,\n\tNorm_SInt16x2,\n\tNorm_SInt16x3,\n\tNorm_SInt16x4\n}\n\n\nexport function vertexFieldElementCount(vf: VertexField) {\n\tswitch (vf) {\n\t\tcase VertexField.UInt32:\n\t\tcase VertexField.SInt32:\n\t\tcase VertexField.Float:\n\t\t\treturn 1;\n\n\t\tcase VertexField.UInt8x2:\n\t\tcase VertexField.Norm_UInt8x2:\n\t\tcase VertexField.SInt8x2:\n\t\tcase VertexField.Norm_SInt8x2:\n\t\tcase VertexField.UInt16x2:\n\t\tcase VertexField.Norm_UInt16x2:\n\t\tcase VertexField.SInt16x2:\n\t\tcase VertexField.Norm_SInt16x2:\n\t\tcase VertexField.UInt32x2:\n\t\tcase VertexField.SInt32x2:\n\t\tcase VertexField.Floatx2:\n\t\t\treturn 2;\n\n\t\tcase VertexField.UInt8x3:\n\t\tcase VertexField.Norm_UInt8x3:\n\t\tcase VertexField.SInt8x3:\n\t\tcase VertexField.Norm_SInt8x3:\n\t\tcase VertexField.UInt16x3:\n\t\tcase VertexField.Norm_UInt16x3:\n\t\tcase VertexField.SInt16x3:\n\t\tcase VertexField.Norm_SInt16x3:\n\t\tcase VertexField.UInt32x3:\n\t\tcase VertexField.SInt32x3:\n\t\tcase VertexField.Floatx3:\n\t\t\treturn 3;\n\n\t\tcase VertexField.UInt8x4:\n\t\tcase VertexField.Norm_UInt8x4:\n\t\tcase VertexField.SInt8x4:\n\t\tcase VertexField.Norm_SInt8x4:\n\t\tcase VertexField.UInt16x4:\n\t\tcase VertexField.Norm_UInt16x4:\n\t\tcase VertexField.SInt16x4:\n\t\tcase VertexField.Norm_SInt16x4:\n\t\tcase VertexField.UInt32x4:\n\t\tcase VertexField.SInt32x4:\n\t\tcase VertexField.Floatx4:\n\t\t\treturn 4;\n\n\t\tcase VertexField.Undefined:\n\t\tdefault:\n\t\t\treturn 0;\n\t}\n}\n\nexport function vertexFieldNumericType(vf: VertexField): NumericType | null {\n\tswitch (vf) {\n\t\tcase VertexField.Float:\n\t\tcase VertexField.Floatx2:\n\t\tcase VertexField.Floatx3:\n\t\tcase VertexField.Floatx4:\n\t\t\treturn Float;\n\n\t\tcase VertexField.UInt32:\n\t\tcase VertexField.UInt32x2:\n\t\tcase VertexField.UInt32x3:\n\t\tcase VertexField.UInt32x4:\n\t\t\treturn UInt32;\n\n\t\tcase VertexField.SInt32:\n\t\tcase VertexField.SInt32x2:\n\t\tcase VertexField.SInt32x3:\n\t\tcase VertexField.SInt32x4:\n\t\t\treturn SInt32;\n\n\t\tcase VertexField.UInt16x2:\n\t\tcase VertexField.Norm_UInt16x2:\n\t\tcase VertexField.UInt16x3:\n\t\tcase VertexField.Norm_UInt16x3:\n\t\tcase VertexField.UInt16x4:\n\t\tcase VertexField.Norm_UInt16x4:\n\t\t\treturn UInt16;\n\n\t\tcase VertexField.SInt16x2:\n\t\tcase VertexField.Norm_SInt16x2:\n\t\tcase VertexField.SInt16x3:\n\t\tcase VertexField.Norm_SInt16x3:\n\t\tcase VertexField.SInt16x4:\n\t\tcase VertexField.Norm_SInt16x4:\n\t\t\treturn SInt16;\n\n\t\tcase VertexField.UInt8x2:\n\t\tcase VertexField.Norm_UInt8x2:\n\t\tcase VertexField.UInt8x3:\n\t\tcase VertexField.Norm_UInt8x3:\n\t\tcase VertexField.UInt8x4:\n\t\tcase VertexField.Norm_UInt8x4:\n\t\t\treturn UInt8;\n\n\t\tcase VertexField.SInt8x2:\n\t\tcase VertexField.Norm_SInt8x2:\n\t\tcase VertexField.SInt8x3:\n\t\tcase VertexField.Norm_SInt8x3:\n\t\tcase VertexField.SInt8x4:\n\t\tcase VertexField.Norm_SInt8x4:\n\t\t\treturn SInt8;\n\n\t\tcase VertexField.Undefined:\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\nexport function vertexFieldElementSizeBytes(vf: VertexField) {\n\tconst nt = vertexFieldNumericType(vf);\n\treturn nt ? nt.byteSize : 0;\n}\n\nexport function vertexFieldSizeBytes(vf: VertexField) {\n\treturn vertexFieldElementSizeBytes(vf) * vertexFieldElementCount(vf);\n}\n\nexport function vertexFieldIsNormalized(vf: VertexField) {\n\treturn (vf & 0x80) !== 0;\n}\n","/**\n * geometry/vertex-attribute - vertex buffer attributes\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { VertexField } from \"./vertex-field\";\n\n/**\n * The role of a vertex attribute indicates usage purpose\n * and is used for shader attribute mapping.\n */\nexport const enum VertexAttributeRole {\n\tNone,\n\n\t// standard attributes\n\tPosition,\n\tNormal,\n\tTangent,\n\tColour,\n\tMaterial,\n\n\t// UV sets\n\tUV,\n\tUV0 = UV,\n\tUV1,\n\tUV2,\n\tUV3,\n\n\t// skinned geometry\n\tWeightedPos0, WeightedPos1, WeightedPos2, WeightedPos3,\n\tJointIndexes\n}\n\n/**\n * A VertexAttribute is a Field with a certain Role inside a VertexBuffer\n */\nexport interface VertexAttribute {\n\tfield: VertexField;\n\trole: VertexAttributeRole;\n}\n\nexport function isVertexAttribute(va: object): va is VertexAttribute {\n\treturn typeof (va as any).field === \"number\" && typeof (va as any).role === \"number\";\n}\n","/**\n * math/common - shared elements\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { ArrayOfConstNumber, ArrayOfNumber } from \"@stardazed/core\";\n\n// constants\nexport const EPSILON = 0.000001;\n\n// functions\nexport function clamp(n: number, min: number, max: number): number {\n\treturn Math.max(min, Math.min(max, n));\n}\n\nexport function clamp01(n: number): number {\n\treturn Math.max(0.0, Math.min(1.0, n));\n}\n\nexport function mix(a: number, b: number, ratio: number): number {\n\treturn a * (1 - ratio) + b * ratio;\n}\n\nexport function intRandom(maximum: number): number {\n\treturn (Math.random() * (maximum + 1)) | 0;\n}\n\nexport function intRandomRange(minimum: number, maximum: number): number {\n\tconst diff = (maximum - minimum) | 0;\n\treturn minimum + intRandom(diff);\n}\n\nexport function hertz(hz: number) {\n\treturn 1 / hz;\n}\n\nexport function deg2rad(deg: number): number {\n\treturn deg * Math.PI / 180.0;\n}\n\nexport function rad2deg(rad: number): number {\n\treturn rad * 180.0 / Math.PI;\n}\n\nexport function isPowerOf2(n: number) {\n\treturn (n & (n - 1)) === 0;\n}\n\n// roundUpPowerOf2\n// return closest powerOf2 number that is >= n\n// e.g.: 15 -> 16; 16 -> 16; 17 -> 32\nexport function roundUpPowerOf2(n: number) {\n\tif (n <= 0) { return 1; }\n\tn = (n | 0) - 1;\n\tn |= n >> 1;\n\tn |= n >> 2;\n\tn |= n >> 4;\n\tn |= n >> 8;\n\tn |= n >> 16;\n\treturn n + 1;\n}\n\n// alignUp\n// round val up to closest alignmentPow2\nexport function alignUp(val: number, alignmentPow2: number) {\n\treturn (val + alignmentPow2 - 1) & (~(alignmentPow2 - 1));\n}\n\n// alignDown\n// round val down to closest alignmentPow2\nexport function alignDown(val: number, alignmentPow2: number) {\n\treturn val & (~(alignmentPow2 - 1));\n}\n\n// (strided) iteration of vecN types\nexport interface VecArrayIterationOptions {\n\tstride?: number;\n\toffset?: number;\n\tcount?: number;\n}\n\nexport type VecArrayIterationFunction = (out: ArrayOfNumber, a: ArrayOfConstNumber, ...args: any[]) => void;\n","/**\n * geometry/vertex-buffer-layout - layout of attributes within a buffer\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"@stardazed/core\";\nimport { roundUpPowerOf2 } from \"@stardazed/math\";\nimport { VertexAttribute, VertexAttributeRole } from \"./vertex-attribute\";\nimport { VertexField, vertexFieldElementSizeBytes, vertexFieldSizeBytes } from \"./vertex-field\";\n\nexport interface PositionedAttribute extends VertexAttribute {\n\tbufferIndex: number;\n\toffset: number;\n}\n\nexport interface VertexBufferLayout {\n\t// TODO: add instancing parameters\n\treadonly attributes: Readonly<PositionedAttribute>[];\n\treadonly stride: number;\n\n\tbytesRequiredForVertexCount(vertexCount: number): number;\n\tattrByRole(role: VertexAttributeRole): PositionedAttribute | undefined;\n\tattrByIndex(index: number): PositionedAttribute | undefined;\n\thasAttributeWithRole(role: VertexAttributeRole): boolean;\n}\n\nclass VertexBufferLayoutImpl implements VertexBufferLayout {\n\treadonly attributes: Readonly<PositionedAttribute>[];\n\treadonly stride: number;\n\n\tconstructor(attributes: PositionedAttribute[], stride: number) {\n\t\tassert(attributes.length > 0, \"Cannot create an empty VertexBufferLayout\");\n\t\tassert(stride > 0, \"stride must be positive\");\n\n\t\tthis.attributes = [...attributes];\n\t\tthis.stride = stride;\n\t}\n\n\tbytesRequiredForVertexCount(vertexCount: number) {\n\t\treturn vertexCount * this.stride;\n\t}\n\n\tattrByRole(role: VertexAttributeRole) {\n\t\treturn this.attributes.find(pa => pa.role === role);\n\t}\n\n\tattrByIndex(index: number) {\n\t\treturn this.attributes[index] || null;\n\t}\n\n\thasAttributeWithRole(role: VertexAttributeRole) {\n\t\treturn this.attrByRole(role) !== undefined;\n\t}\n}\n\n\n// ---- default buffer layout calc func\n\nfunction alignFieldOnSize(size: number, offset: number) {\n\tconst mask = roundUpPowerOf2(size) - 1;\n\treturn (offset + mask) & ~mask;\n}\n\nfunction alignVertexField(field: VertexField, offset: number) {\n\treturn alignFieldOnSize(vertexFieldElementSizeBytes(field), offset);\n}\n\nexport function makeStandardVertexBufferLayout(attrList: VertexAttribute[], bufferIndex = 0): VertexBufferLayout {\n\tlet offset = 0, maxElemSize = 0;\n\n\t// calculate positioning of successive attributes in linear item\n\tconst attributes = attrList.map((attr: VertexAttribute): PositionedAttribute => {\n\t\tconst size = vertexFieldSizeBytes(attr.field);\n\t\tmaxElemSize = Math.max(maxElemSize, vertexFieldElementSizeBytes(attr.field));\n\n\t\tconst alignedOffset = alignVertexField(attr.field, offset);\n\t\toffset = alignedOffset + size;\n\t\treturn {\n\t\t\tfield: attr.field,\n\t\t\trole: attr.role,\n\t\t\tbufferIndex,\n\t\t\toffset: alignedOffset\n\t\t};\n\t});\n\n\t// align full item size on boundary of biggest element in attribute list, with min of float boundary\n\tmaxElemSize = Math.max(Float32Array.BYTES_PER_ELEMENT, maxElemSize);\n\tconst stride = alignFieldOnSize(maxElemSize, offset);\n\n\treturn new VertexBufferLayoutImpl(attributes, stride);\n}\n","/**\n * geometry/vertex-buffer - vertex data storage\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"@stardazed/core\";\n\nexport class VertexBuffer {\n\treadonly storage: Uint8ClampedArray;\n\treadonly vertexCount: number;\n\treadonly stride: number;\n\n\tget sizeBytes() {\n\t\treturn this.vertexCount * this.stride;\n\t}\n\n\tconstructor(vertexCount: number, stride: number, usingStorage?: Uint8ClampedArray) {\n\t\tvertexCount = vertexCount | 0;\n\t\tstride = stride | 0;\n\t\tassert(vertexCount > 0);\n\t\tassert(stride > 0);\n\t\tthis.vertexCount = vertexCount;\n\t\tthis.stride = stride;\n\n\t\tif (usingStorage) {\n\t\t\tassert(usingStorage.byteLength >= this.sizeBytes, \"Not enough space in supplied storage\");\n\t\t\tthis.storage = usingStorage;\n\t\t}\n\t\telse {\n\t\t\tthis.storage = new Uint8ClampedArray(this.sizeBytes);\n\t\t}\n\t}\n}\n","/**\n * geometry/index-element vertex index element\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { makeLUT, TypedArrayConstructor, UInt8, UInt16 } from \"@stardazed/core\";\n\nexport const enum IndexElementType {\n\tNone,\n\n\tUInt8,\n\tUInt16,\n\tUInt32\n}\n\nexport const indexElementTypeSizeBytes = makeLUT<IndexElementType, number>(\n\tIndexElementType.UInt8, Uint8Array.BYTES_PER_ELEMENT,\n\tIndexElementType.UInt16, Uint16Array.BYTES_PER_ELEMENT,\n\tIndexElementType.UInt32, Uint32Array.BYTES_PER_ELEMENT\n);\n\nexport function minimumIndexElementTypeForVertexCount(vertexCount: number): IndexElementType {\n\tif (vertexCount <= UInt8.max) {\n\t\treturn IndexElementType.UInt8;\n\t}\n\tif (vertexCount <= UInt16.max) {\n\t\treturn IndexElementType.UInt16;\n\t}\n\n\treturn IndexElementType.UInt32;\n}\n\nexport function bytesRequiredForIndexCount(elementType: IndexElementType, indexCount: number) {\n\treturn indexElementTypeSizeBytes[elementType] * indexCount;\n}\n\n\nexport type TypedIndexArray = Uint32Array | Uint16Array | Uint8ClampedArray;\n\nexport function typedIndexArrayClassForIndexElement(elementType: IndexElementType): TypedArrayConstructor {\n\tswitch (elementType) {\n\t\tcase IndexElementType.UInt8: return Uint8ClampedArray;\n\t\tcase IndexElementType.UInt16: return Uint16Array;\n\t\tcase IndexElementType.UInt32: return Uint32Array;\n\t\tdefault:\n\t\t\tthrow new Error(\"Invalid IndexElementType\");\n\t}\n}\n","/**\n * geometry/index-primitive - index primitive traits\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"@stardazed/core\";\n\nexport const enum PrimitiveType {\n\tNone,\n\n\tPoint,\n\tLine,\n\tLineStrip,\n\tTriangle,\n\tTriangleStrip\n}\n\n\nexport function elementOffsetForPrimitiveCount(primitiveType: PrimitiveType, primitiveCount: number) {\n\tswitch (primitiveType) {\n\t\tcase PrimitiveType.Point:\n\t\t\treturn primitiveCount;\n\t\tcase PrimitiveType.Line:\n\t\t\treturn primitiveCount * 2;\n\t\tcase PrimitiveType.LineStrip:\n\t\t\treturn primitiveCount;\n\t\tcase PrimitiveType.Triangle:\n\t\t\treturn primitiveCount * 3;\n\t\tcase PrimitiveType.TriangleStrip:\n\t\t\treturn primitiveCount;\n\n\t\tdefault:\n\t\t\tassert(false, \"Unknown primitive type\");\n\t\t\treturn 0;\n\t}\n}\n\n\nexport function elementCountForPrimitiveCount(primitiveType: PrimitiveType, primitiveCount: number) {\n\tassert(primitiveCount >= 0);\n\n\tswitch (primitiveType) {\n\t\tcase PrimitiveType.Point:\n\t\t\treturn primitiveCount;\n\t\tcase PrimitiveType.Line:\n\t\t\treturn primitiveCount * 2;\n\t\tcase PrimitiveType.LineStrip:\n\t\t\treturn primitiveCount > 0 ? primitiveCount + 1 : 0;\n\t\tcase PrimitiveType.Triangle:\n\t\t\treturn primitiveCount * 3;\n\t\tcase PrimitiveType.TriangleStrip:\n\t\t\treturn primitiveCount > 0 ? primitiveCount + 2 : 0;\n\n\t\tdefault:\n\t\t\tassert(false, \"Unknown primitive type\");\n\t\t\treturn 0;\n\t}\n}\n\n\nexport function primitiveCountForElementCount(primitiveType: PrimitiveType, elementCount: number) {\n\tassert(elementCount >= 0);\n\n\tswitch (primitiveType) {\n\t\tcase PrimitiveType.Point:\n\t\t\treturn elementCount;\n\t\tcase PrimitiveType.Line:\n\t\t\treturn (elementCount / 2) | 0;\n\t\tcase PrimitiveType.LineStrip:\n\t\t\treturn elementCount > 0 ? elementCount - 1 : 0;\n\t\tcase PrimitiveType.Triangle:\n\t\t\treturn (elementCount / 3) | 0;\n\t\tcase PrimitiveType.TriangleStrip:\n\t\t\treturn elementCount > 0 ? elementCount - 2 : 0;\n\n\t\tdefault:\n\t\t\tassert(false, \"Unknown primitive type\");\n\t\t\treturn 0;\n\t}\n}\n","/**\n * geometry/index-buffer - index primitive storage\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"@stardazed/core\";\nimport { IndexElementType, indexElementTypeSizeBytes, TypedIndexArray, typedIndexArrayClassForIndexElement } from \"./index-element\";\n\nexport class IndexBuffer {\n\treadonly indexElementType: IndexElementType;\n\treadonly indexCount: number;\n\treadonly storage: Uint8ClampedArray;\n\tprivate indexElementSizeBytes_: number;\n\n\tconstructor(elementType: IndexElementType, indexCount: number, usingStorage?: Uint8ClampedArray) {\n\t\tassert(indexCount > 0, \"Invalid indexCount, must be > 0\");\n\t\tassert(elementType !== IndexElementType.None);\n\n\t\tthis.indexElementType = elementType;\n\t\tthis.indexElementSizeBytes_ = indexElementTypeSizeBytes[elementType];\n\t\tthis.indexCount = indexCount;\n\t\t\n\t\tassert(this.indexElementSizeBytes_ !== undefined);\n\n\t\tif (usingStorage) {\n\t\t\tassert(usingStorage.byteLength >= this.sizeBytes, \"Not enough space in supplied storage\");\n\t\t\tthis.storage = usingStorage;\n\t\t}\n\t\telse {\n\t\t\tthis.storage = new Uint8ClampedArray(this.sizeBytes);\n\t\t}\n\t}\n\n\tget sizeBytes() { return this.indexCount * this.indexElementSizeBytes_; }\n\n\t/**\n\t *  Direct (sub-)array access\n\t */\n\ttypedBasePtr(baseIndexNr: number, indexCount: number): TypedIndexArray {\n\t\tassert(baseIndexNr < this.indexCount);\n\t\tassert(baseIndexNr + indexCount <= this.indexCount);\n\n\t\tconst offsetBytes = this.storage.byteOffset + this.indexElementSizeBytes_ * baseIndexNr;\n\t\tconst arrayClass = typedIndexArrayClassForIndexElement(this.indexElementType);\n\t\treturn new arrayClass(this.storage.buffer, offsetBytes, indexCount) as TypedIndexArray;\n\t}\n}\n","/**\n * geometry/geometry - geometry compound type\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"@stardazed/core\";\nimport { alignUp } from \"@stardazed/math\";\nimport { PrimitiveType } from \"./index-primitive\";\nimport { minimumIndexElementTypeForVertexCount, bytesRequiredForIndexCount } from \"./index-element\";\nimport { IndexBuffer } from \"./index-buffer\";\nimport { VertexAttributeRole, VertexAttribute, isVertexAttribute } from \"./vertex-attribute\";\nimport { VertexBufferLayout, PositionedAttribute, makeStandardVertexBufferLayout } from \"./vertex-buffer-layout\";\nimport { VertexBuffer } from \"./vertex-buffer\";\n\n\nexport interface VertexLayout {\n\treadonly layouts: ReadonlyArray<VertexBufferLayout>;\n}\n\nexport const isVertexLayout = (vl: any): vl is VertexLayout =>\n\t(typeof vl === \"object\") && vl !== null &&\n\tArray.isArray(vl.layouts);\n\nexport function findAttributeOfRoleInLayout(vl: VertexLayout, role: VertexAttributeRole) {\n\tfor (const layout of vl.layouts) {\n\t\tconst pa = layout.attrByRole(role);\n\t\tif (pa) {\n\t\t\treturn pa;\n\t\t}\n\t}\n\treturn undefined;\n}\n\nexport function makeStandardVertexLayout(attrLists: VertexAttribute[] | VertexAttribute[][]): VertexLayout {\n\tconst layouts: VertexBufferLayout[] = [];\n\t\n\tif (attrLists.length > 0) {\n\t\tif (isVertexAttribute(attrLists[0])) {\n\t\t\tlayouts.push(makeStandardVertexBufferLayout(attrLists as VertexAttribute[]));\n\t\t}\n\t\telse {\n\t\t\tfor (let bufferIndex = 0; bufferIndex < attrLists.length; ++bufferIndex) {\n\t\t\t\tconst list = attrLists[bufferIndex] as VertexAttribute[];\n\t\t\t\tlayouts.push(makeStandardVertexBufferLayout(list, bufferIndex));\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tlayouts\n\t};\n}\n\n\nexport interface PrimitiveGroup {\n\ttype: PrimitiveType;\n\tfromElement: number;\n\telementCount: number;\n}\n\nexport interface SubMesh extends PrimitiveGroup {\n\tmaterialIx: number; // arbitrary material index or reference; representation of Materials is external to Geometry\n}\n\nconst enum BufferAlignment {\n\tSubBuffer = 8\n}\n\nexport interface GeometryAllocOptions {\n\tlayout: VertexLayout;\n\tvertexCount: number;\n\tindexCount: number;\n}\n\nexport interface Geometry {\n\tlayout: VertexLayout;\n\tvertexBuffers: VertexBuffer[];\n\tindexBuffer?: IndexBuffer;\n\tsubMeshes: SubMesh[];\n}\n\nexport const isGeometry = (geom: any): geom is Geometry =>\n\t(typeof geom === \"object\") && geom !== null &&\n\tisVertexLayout(geom.layout) &&\n\tArray.isArray(geom.vertexBuffers) &&\n\t(geom.indexBuffer === void 0 || geom.indexBuffer instanceof IndexBuffer) &&\n\tArray.isArray(geom.subMeshes);\n\nexport function allocateGeometry(options: GeometryAllocOptions): Geometry {\n\tlet totalBytes = 0;\n\tfor (const layout of options.layout.layouts) {\n\t\ttotalBytes += layout.bytesRequiredForVertexCount(options.vertexCount);\n\t\ttotalBytes = alignUp(totalBytes, BufferAlignment.SubBuffer);\n\t}\n\tif (options.indexCount > 0) {\n\t\tconst elementType = minimumIndexElementTypeForVertexCount(options.vertexCount);\n\t\ttotalBytes += bytesRequiredForIndexCount(elementType, options.indexCount);\n\t\ttotalBytes = alignUp(totalBytes, BufferAlignment.SubBuffer);\n\t}\n\n\tassert(totalBytes > 0, \"Nothing to allocate!\");\n\n\tconst geom: Geometry = {\n\t\tlayout: options.layout,\n\t\tvertexBuffers: [],\n\t\tsubMeshes: [],\n\t};\n\tconst storage = new ArrayBuffer(totalBytes);\n\n\tlet byteOffset = 0;\n\tfor (const layout of options.layout.layouts) {\n\t\tconst subSize = layout.bytesRequiredForVertexCount(options.vertexCount);\n\t\tconst subStorage = new Uint8ClampedArray(storage, byteOffset, subSize);\n\t\tconst vb = new VertexBuffer(options.vertexCount, layout.stride, subStorage);\n\t\tgeom.vertexBuffers.push(vb);\n\n\t\tbyteOffset += subSize;\n\t\tbyteOffset = alignUp(byteOffset, BufferAlignment.SubBuffer);\n\t}\n\tif (options.indexCount) {\n\t\tconst elementType = minimumIndexElementTypeForVertexCount(options.vertexCount);\n\t\tconst indexSize = bytesRequiredForIndexCount(elementType, options.indexCount);\n\t\tconst subSize = bytesRequiredForIndexCount(elementType, options.indexCount);\n\t\tconst subStorage = new Uint8ClampedArray(storage, byteOffset, subSize);\n\n\t\tgeom.indexBuffer = new IndexBuffer(elementType, options.indexCount, subStorage);\n\t\tbyteOffset += indexSize;\n\t\tbyteOffset = alignUp(byteOffset, BufferAlignment.SubBuffer);\n\t}\n\n\tassert(totalBytes === byteOffset, \"Mismatch of precalculated and actual buffer sizes\");\n\treturn geom;\n}\n\nexport function findAttributeOfRoleInGeometry(geom: Geometry, role: VertexAttributeRole): { vertexBuffer: VertexBuffer; attr: PositionedAttribute; } | undefined {\n\tconst pa = findAttributeOfRoleInLayout(geom.layout, role);\n\tconst avb = pa ? geom.vertexBuffers[pa.bufferIndex] : undefined;\n\n\tif (pa && avb) {\n\t\treturn { vertexBuffer: avb, attr: pa };\n\t}\n\treturn undefined;\n}\n","/**\n * @stardazed/geometry - geometry storage\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nexport * from \"./vertex-field\";\nexport * from \"./vertex-attribute\";\nexport * from \"./vertex-buffer-layout\";\nexport * from \"./vertex-buffer\";\n\nexport * from \"./index-element\";\nexport * from \"./index-primitive\";\nexport * from \"./index-buffer\";\n\nexport * from \"./geometry\";\n"],"names":[],"mappings":"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"}