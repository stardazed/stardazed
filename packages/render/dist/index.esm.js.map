{"version":3,"file":"index.esm.js","sources":["../src/resource.ts","../src/sampler.ts","../src/texture.ts","../src/shader.ts","../src/framebuffer.ts","../src/mesh.ts","../src/pipeline.ts","../src/command-buffer.ts","../src/index.ts"],"sourcesContent":["/**\n * render/resource - resource types in the render engine\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nexport const enum ResourceType {\n\tTexture = 1,\n\tSampler,\n\tFrameBuffer,\n\tMesh,\n\tShader,\n\t// ConstantBuffer,\n}\n\nexport interface RenderResourceBase {\n\treadonly renderResourceType: ResourceType;\n\trenderResourceHandle: number;\n}\n","/**\n * render/sampler - engine-side samplers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { RenderResourceBase, ResourceType } from \"./resource\";\n\nexport const enum TextureRepeatMode {\n\tRepeat,\n\tMirroredRepeat,\n\tClampToEdge\n}\n\n\nexport const enum TextureSizingFilter {\n\tNearest,\n\tLinear\n}\n\n\nexport const enum TextureMipFilter {\n\tNone,\n\tNearest,\n\tLinear\n}\n\n\nexport interface Sampler extends RenderResourceBase {\n\trepeatS: TextureRepeatMode;\n\trepeatT: TextureRepeatMode;\n\trepeatR: TextureRepeatMode;\n\n\tminFilter: TextureSizingFilter;\n\tmagFilter: TextureSizingFilter;\n\tmipFilter: TextureMipFilter;\n\n\tlodMinClamp: number;\n\tlodMaxClamp: number;\n\n\tmaxAnisotropy: number;\n}\n\n\nexport function makeSampler(): Sampler {\n\treturn {\n\t\trenderResourceType: ResourceType.Sampler,\n\t\trenderResourceHandle: 0,\n\n\t\trepeatS: TextureRepeatMode.Repeat,\n\t\trepeatT: TextureRepeatMode.Repeat,\n\t\trepeatR: TextureRepeatMode.Repeat,\n\n\t\tminFilter: TextureSizingFilter.Linear,\n\t\tmagFilter: TextureSizingFilter.Linear,\n\t\tmipFilter: TextureMipFilter.Linear,\n\n\t\tlodMinClamp: 0,\n\t\tlodMaxClamp: 1000,\n\n\t\tmaxAnisotropy: 1\n\t};\n}\n\n\nexport function makeCubemapSampler(mipmapped: boolean): Sampler {\n\treturn {\n\t\t...makeSampler(),\n\n\t\trepeatS: TextureRepeatMode.ClampToEdge,\n\t\trepeatT: TextureRepeatMode.ClampToEdge,\n\t\trepeatR: TextureRepeatMode.ClampToEdge,\n\n\t\tmipFilter: mipmapped ? TextureMipFilter.Linear : TextureMipFilter.None,\n\t};\n}\n\nexport function makeLookupTableSampler(): Sampler {\n\treturn {\n\t\t...makeSampler(),\n\n\t\trepeatS: TextureRepeatMode.ClampToEdge,\n\t\trepeatT: TextureRepeatMode.ClampToEdge,\n\t\trepeatR: TextureRepeatMode.ClampToEdge,\n\n\t\tminFilter: TextureSizingFilter.Nearest,\n\t\tmagFilter: TextureSizingFilter.Nearest,\n\t\tmipFilter: TextureMipFilter.None\n\t};\n}\n","/**\n * render/texture - engine-side textures\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"@stardazed/core\";\nimport { PixelDimensions, PixelFormat, makePixelDimensions, PixelDataProvider } from \"@stardazed/image\";\nimport { RenderResourceBase, ResourceType } from \"./resource\";\n\nexport const enum TextureClass {\n\tPlain,\n\tCubeMap\n}\n\nexport const enum MipMapMode {\n\tSource,\n\tStrip,\n\tRegenerate\n}\n\n// the numerical constant for each face is also the layer index in the cubemap\nexport const enum CubeMapFace {\n\tPosX,\n\tNegX,\n\tPosY,\n\tNegY,\n\tPosZ,\n\tNegZ\n}\n\nexport interface MipMapRange {\n\tbaseLevel: number;\n\tnumLevels: number;\n}\n\nexport function makeMipMapRange(baseLevel: number, numLevels: number): MipMapRange {\n\treturn { baseLevel, numLevels };\n}\n\n\nexport interface Texture extends RenderResourceBase {\n\ttextureClass: TextureClass;\n\tpixelFormat: PixelFormat;\n\tdim: PixelDimensions;\n\tmipmapMode: MipMapMode;\n\tmaxMipLevel?: number;\n\tlayers?: number;\n\n\t// If omitted, new textures will be created with zeroed data.\n\t// If included, the number of entries MUST equal `layers` * `dim.depth` for plain and 6 * `layers` for cubemap textures.\n\tpixelData?: PixelDataProvider[];\n}\n\n\nexport function maxMipLevelsForDimension(dim: number) {\n\treturn 1 + Math.floor(Math.log(dim | 0) / Math.LN2);\n}\n\n\nexport function makeTexture(): Texture {\n\treturn {\n\t\trenderResourceType: ResourceType.Texture,\n\t\trenderResourceHandle: 0,\n\n\t\ttextureClass: TextureClass.Plain,\n\t\tpixelFormat: PixelFormat.None,\n\t\tdim: makePixelDimensions(0, 0),\n\t\tmipmapMode: MipMapMode.Source\n\t};\n}\n\n\nexport function makeTex2D(pixelFormat: PixelFormat, width: number, height: number, mipmapMode: MipMapMode = MipMapMode.Source): Texture {\n\treturn {\n\t\trenderResourceType: ResourceType.Texture,\n\t\trenderResourceHandle: 0,\n\n\t\ttextureClass: TextureClass.Plain,\n\t\tpixelFormat,\n\t\tdim: makePixelDimensions(width, height),\n\t\tmipmapMode\n\t};\n}\n\n\nexport function makeTex2DFromProvider(provider: PixelDataProvider, mipmapMode: MipMapMode = MipMapMode.Source): Texture {\n\treturn {\n\t\trenderResourceType: ResourceType.Texture,\n\t\trenderResourceHandle: 0,\n\n\t\ttextureClass: TextureClass.Plain,\n\t\tpixelFormat: provider.pixelFormat,\n\t\tdim: makePixelDimensions(provider.dim.width, provider.dim.height),\n\t\tmipmapMode,\n\t\tpixelData: [provider]\n\t};\n}\n\n\n/*\nexport function makeTex2DFloatLUT(sourceData: Float32Array, width: number, height: number): Texture {\n\treturn {\n\t\trenderResourceType: ResourceType.Texture,\n\t\trenderResourceHandle: 0,\n\n\t\ttextureClass: TextureClass.Plain,\n\t\tpixelFormat: PixelFormat.RGBA32F,\n\t\tdim: makePixelDimensions(width, height),\n\t\tmipmapMode: MipMapMode.Source,\n\t\tpixelData: [providerForSingleBuffer({\n\t\t\tdata: sourceData,\n\t\t\tdim: makePixelDimensions(width, height),\n\t\t\tpixelFormat: PixelFormat.RGBA32F\n\t\t})]\n\t};\n}\n*/\n\nexport function makeTexCube(pixelFormat: PixelFormat, dimension: number, mipmapMode: MipMapMode = MipMapMode.Source): Texture {\n\treturn {\n\t\trenderResourceType: ResourceType.Texture,\n\t\trenderResourceHandle: 0,\n\n\t\ttextureClass: TextureClass.CubeMap,\n\t\tpixelFormat,\n\t\tdim: makePixelDimensions(dimension, dimension),\n\t\tmipmapMode\n\t};\n}\n\n\nexport function makeTexCubeFromProviders(sources: PixelDataProvider[], mipmapMode: MipMapMode = MipMapMode.Source): Texture {\n\tassert(sources.length === 6, \"Must pass 6 providers for CubeMap texture.\");\n\n\treturn {\n\t\trenderResourceType: ResourceType.Texture,\n\t\trenderResourceHandle: 0,\n\n\t\ttextureClass: TextureClass.CubeMap,\n\t\tpixelFormat: sources[0].pixelFormat,\n\t\tdim: makePixelDimensions(sources[0].dim.width, sources[0].dim.height),\n\t\tmipmapMode,\n\t\tpixelData: sources\n\t};\n}\n","/**\n * render/shader - Shaders and modules\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { VertexAttributeRole } from \"@stardazed/geometry\";\nimport { RenderResourceBase } from \"./resource\";\nimport { TextureClass } from \"./texture\";\n\nexport const enum ShaderValueType {\n\tInt,\n\tInt2,\n\tInt3,\n\tInt4,\n\tHalf,\n\tHalf2,\n\tHalf3,\n\tHalf4,\n\tFloat,\n\tFloat2,\n\tFloat3,\n\tFloat4,\n\tFloat2x2,\n\tFloat3x3,\n\tFloat4x4\n}\n\nexport type Conditional<T extends object> = T & {\n\tifExpr?: string;\n};\n\nexport interface SamplerSlot {\n\tname: string;\n\ttype: TextureClass;\n\tindex: number;\n}\n\nexport interface ShaderAttribute {\n\tname: string;\n\ttype: ShaderValueType;\n}\n\nexport interface ShaderVertexAttribute extends ShaderAttribute {\n\trole: VertexAttributeRole;\n\tindex: number;\n}\n\nexport interface ShaderConstant {\n\tname: string;\n\ttype: ShaderValueType;\n\tlength?: number;\n}\n\nexport interface ShaderDefine {\n\tname: string;\n\tvalue?: number | boolean;\n}\n\nexport interface ExtensionUsage {\n\tname: string;\n\taction: \"enable\" | \"require\";\n}\n\nexport interface ShaderConstValue {\n\tname: string;\n\ttype: ShaderValueType;\n\texpr: string;\n}\n\nexport interface ShaderStruct {\n\tname: string;\n\tcode: string;\n}\n\nexport interface ShaderModule {\n\textensions?: Conditional<ExtensionUsage>[];\n\tsamplers?: Conditional<SamplerSlot>[];\n\tconstants?: Conditional<ShaderConstant>[];\n\tconstValues?: ShaderConstValue[];\n\tstructs?: ShaderStruct[];\n\tcode?: string;\n}\n\nexport interface ShaderFunction extends ShaderModule {\n\tmodules?: string[];\n\tmain: string;\n}\n\nexport interface VertexFunction extends ShaderFunction {\n\tin: Conditional<ShaderVertexAttribute>[];\n\tout?: Conditional<ShaderAttribute>[];\n}\n\nexport interface FragmentFunction extends ShaderFunction {\n\tin?: Conditional<ShaderAttribute>[];\n\toutCount: number;\n}\n\nexport interface Shader extends RenderResourceBase {\n\tdefines: ShaderDefine[];\n\tvertexFunction: VertexFunction;\n\tfragmentFunction: FragmentFunction;\n}\n","/**\n * render/framebuffer - descriptors and enums related to FrameBuffer objects\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"@stardazed/core\";\n\nimport { RenderResourceBase, ResourceType } from \"./resource\";\nimport { CubeMapFace, Texture } from \"./texture\";\n\n/**\n * Describes the properties of a [[FrameBuffer]] attachment.\n */\nexport interface AttachmentDescriptor {\n\t/**\n\t * The texture resource that will act as the attachment buffer.\n\t */\n\ttexture: Texture;\n\t/**\n\t * The mipmap level of texture to use.\n\t * Not supported when using the WebGL 1 renderer.\n\t */\n\tlevel: number;\n\t/**\n\t * Either the [[CubeMapFace]] in case of a cube texture or the layer in case of a 2D Array texture. 0 otherwise.\n\t * Not supported when using the WebGL 1 renderer.\n\t */\n\tlayer: number | CubeMapFace;\n}\n\n/**\n * Utility function to create an [[AttachmentDescriptor]] object.\n * @param texture The [[Texture]] to bind.\n * @param level Optional: mipmap level of texture to bind.\n * @param layer Optional: cube map face or array layer to bind.\n */\nexport function makeAttachmentDescriptor(texture: Texture, level?: number, layer?: number | CubeMapFace): AttachmentDescriptor {\n\treturn {\n\t\ttexture,\n\t\tlevel: level! | 0,\n\t\tlayer: layer! | 0\n\t};\n}\n\n/**\n * A render resource referencing a frame buffer aka render target.\n * A FrameBuffer can have multiple colour attachment, an optional\n * depth attachments and an optional stencil attachment.\n */\nexport interface FrameBuffer extends RenderResourceBase {\n\t/**\n\t * Width in pixels for all attachments\n\t */\n\treadonly width: number;\n\t/**\n\t * Height in pixels for all attachments\n\t */\n\treadonly height: number;\n\n\t/**\n\t * Array of colour attachments, may be empty.\n\t */\n\treadonly colourAttachments: ReadonlyArray<AttachmentDescriptor>;\n\t/**\n\t * Optional depth attachment.\n\t */\n\treadonly depthAttachment?: AttachmentDescriptor;\n\t/**\n\t * Optional stencil attachment.\n\t */\n\treadonly stencilAttachment?: AttachmentDescriptor;\n}\n\n/**\n * Object describing a [[FrameBuffer]].\n */\nexport interface FrameBufferDescriptor {\n\tcolourAttachments: AttachmentDescriptor[];\n\tdepthAttachment?: AttachmentDescriptor;\n\tstencilAttachment?: AttachmentDescriptor;\n}\n\n/**\n * Makes a [[FrameBuffer]] render resource using a descriptor.\n * @param desc A [[FrameBufferDescriptor]] describing the [[FrameBuffer]] resource to make.\n */\nexport function makeFrameBuffer(desc: FrameBufferDescriptor): FrameBuffer {\n\tassert(desc.colourAttachments.length > 0, \"FrameBuffer must specify at least one colour attachment.\");\n\tconst { width, height } = desc.colourAttachments[0].texture.dim;\n\tassert(desc.colourAttachments.every(cd => cd.texture.dim.width === width && cd.texture.dim.height === height));\n\n\treturn {\n\t\trenderResourceType: ResourceType.FrameBuffer,\n\t\trenderResourceHandle: 0,\n\t\twidth, height,\n\t\t...desc\n\t};\n}\n","/**\n * render/mesh - engine-side representation of geometry data\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { Geometry } from \"@stardazed/geometry\";\nimport { RenderResourceBase, ResourceType } from \"./resource\";\n\nexport interface Mesh extends RenderResourceBase, Geometry {\n\t// no additional info for now\n}\n\nexport function makeMesh(geom: Geometry): Mesh {\n\treturn {\n\t\trenderResourceType: ResourceType.Mesh,\n\t\trenderResourceHandle: 0,\n\n\t\t...geom\n\t};\n}\n","/**\n * render/pipeline - shader variant and configuration\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { Float4 } from \"@stardazed/core\";\nimport { Shader } from \"./shader\";\n\nexport const enum FaceCulling {\n\tDisabled,\n\tFront,\n\tBack\n}\n\n\nexport const enum DepthTest {\n\tDisabled,\n\n\tAllowAll,\n\tDenyAll,\n\n\tLess,\n\tLessOrEqual,\n\tEqual,\n\tNotEqual,\n\tGreaterOrEqual,\n\tGreater\n}\n\n\nexport const enum BlendOperation {\n\tAdd,\n\tSubtract,\n\tReverseSubtract,\n\n\tMin,\n\tMax\n}\n\n\nexport const enum BlendFactor {\n\tZero,\n\tOne,\n\n\tSourceColour,\n\tOneMinusSourceColour,\n\n\tDestColour,\n\tOneMinusDestColour,\n\n\tSourceAlpha,\n\tOneMinusSourceAlpha,\n\tSourceAlphaSaturated,\n\n\tDestAlpha,\n\tOneMinusDestAlpha,\n\n\tConstantColour,\n\tOneMinusConstantColour,\n\tConstantAlpha,\n\tOneMinusConstantAlpha\n}\n\n\nexport interface ColourBlending {\n\trgbBlendOp: BlendOperation;\n\talphaBlendOp: BlendOperation;\n\n\tsourceRGBFactor: BlendFactor;\n\tsourceAlphaFactor: BlendFactor;\n\tdestRGBFactor: BlendFactor;\n\tdestAlphaFactor: BlendFactor;\n\n\tconstantColour: Float4;\n}\n\n\nexport interface ColourWriteMask {\n\tred: boolean;\n\tgreen: boolean;\n\tblue: boolean;\n\talpha: boolean;\n}\n\n\nexport function makeColourBlending(): ColourBlending {\n\treturn {\n\t\trgbBlendOp: BlendOperation.Add,\n\t\talphaBlendOp: BlendOperation.Add,\n\n\t\tsourceRGBFactor: BlendFactor.One,\n\t\tsourceAlphaFactor: BlendFactor.One,\n\t\tdestRGBFactor: BlendFactor.Zero,\n\t\tdestAlphaFactor: BlendFactor.Zero,\n\n\t\tconstantColour: [0, 0, 0, 1]\n\t};\n}\n\n\nexport function makeColourWriteMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): ColourWriteMask {\n\treturn {\n\t\tred, green,\tblue, alpha\n\t};\n}\n\n\nexport interface Pipeline {\n\tcolourWriteMask?: ColourWriteMask;\n\tdepthWrite: boolean;\n\tdepthTest: DepthTest;\n\tblending?: ColourBlending;\n\tfaceCulling: FaceCulling;\n\tshader: Shader;\n}\n","/**\n * render/command-buffer - typing and buildig command buffers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { TypedArray, Float4 } from \"@stardazed/core\";\nimport { PixelCoordinate, PixelDimensions } from \"@stardazed/image\";\nimport { PrimitiveGroup, PrimitiveType } from \"@stardazed/geometry\";\n\nimport { RenderResourceBase } from \"./resource\";\nimport { Sampler } from \"./sampler\";\nimport { Texture, CubeMapFace } from \"./texture\";\nimport { FrameBuffer } from \"./framebuffer\";\nimport { Mesh } from \"./mesh\";\nimport { Pipeline } from \"./pipeline\";\n\nexport const enum FrontFaceWinding {\n\tClockwise,\n\tCounterClockwise\n}\n\nexport const enum ClearMask {\n\tNone         = 0,\n\tColour       = 1,\n\tDepth        = 2,\n\tStencil      = 4,\n\tColourDepth  = Colour | Depth,\n\tDepthStencil = Depth | Stencil,\n\tAll          = Colour | Depth | Stencil\n}\n\nexport interface ScissorRect {\n\toriginX: number;\n\toriginY: number;\n\twidth: number;\n\theight: number;\n}\n\nexport function makeScissorRect(): ScissorRect {\n\treturn {\n\t\toriginX: 0,\n\t\toriginY: 0,\n\t\twidth: 32768,\n\t\theight: 32768\n\t};\n}\n\nexport interface Viewport {\n\toriginX: number;\n\toriginY: number;\n\twidth: number;\n\theight: number;\n\tnearZ: number;\n\tfarZ: number;\n}\n\nexport function makeViewport(): Viewport {\n\treturn {\n\t\toriginX: 0,\n\t\toriginY: 0,\n\t\twidth: 0,\n\t\theight: 0,\n\t\tnearZ: 0,\n\t\tfarZ: 1\n\t};\n}\n\nexport interface TEMPConstant {\n\tname: string;\n\tvalue: TypedArray;\n}\n\nexport interface RenderJob {\n\tmesh: Mesh;\n\tprimGroup: PrimitiveGroup;\n\n\tpipeline: Pipeline;\n\n\ttextures: (Texture | undefined)[];\n\tsamplers: (Sampler | undefined)[];\n\tconstants: TEMPConstant[];\n}\n\n\n// -- initial implementation for RenderCommand: use discriminated unions\n\nexport const enum RenderCommandType {\n\tNone,\n\tResource,\n\tFrameBuffer,\n\tScissor,\n\tViewport,\n\tFrontFace,\n\tTextureWrite,\n\tRenderJob\n}\n\nexport interface ResourceCommand {\n\ttype: RenderCommandType.Resource;\n\tsortKey: number;\n\talloc: RenderResourceBase[];\n\tfree: RenderResourceBase[];\n}\n\nexport interface ClearValues {\n\tcolour: Float4;\n\tdepth: number;\n\tstencil: number;\n}\n\nexport interface FrameBufferCommand {\n\ttype: RenderCommandType.FrameBuffer;\n\tsortKey: number;\n\tframeBufferHandle: number;\n\tclearMask: ClearMask;\n\tclearValues: ClearValues;\n}\n\nexport interface ScissorCommand {\n\ttype: RenderCommandType.Scissor;\n\tsortKey: number;\n\toriginX: number;\n\toriginY: number;\n\twidth: number;\n\theight: number;\n}\n\nexport interface ViewportCommand {\n\ttype: RenderCommandType.Viewport;\n\tsortKey: number;\n\toriginX: number;\n\toriginY: number;\n\twidth: number;\n\theight: number;\n\tnearZ: number;\n\tfarZ: number;\n}\n\nexport interface FrontFaceCommand {\n\ttype: RenderCommandType.FrontFace;\n\tsortKey: number;\n\tfrontFace: FrontFaceWinding;\n}\n\nexport interface TextureWriteCommand {\n\ttype: RenderCommandType.TextureWrite;\n\tsortKey: number;\n\ttextureHandle: number;\n\tlayer: CubeMapFace | number;\n\tx: number;\n\ty: number;\n\twidth: number;\n\theight: number;\n\tpixels: TypedArray;\n}\n\nexport interface RenderJobCommand {\n\ttype: RenderCommandType.RenderJob;\n\tsortKey: number;\n\n\tmeshHandle: number;\n\tprimitiveType: PrimitiveType;\n\tfromElement: number;\n\telementCount: number;\n\n\t// TODO: add instancing parameters\n\n\t// shader properties\n\tpipeline: Pipeline;\n\ttextureHandles: number[];\n\tsamplerHandles: number[];\n\tconstants: TEMPConstant[];\n}\n\nexport type RenderCommand = \n\tResourceCommand |\n\tFrameBufferCommand | ScissorCommand | ViewportCommand | FrontFaceCommand |\n\tTextureWriteCommand |\n\tRenderJobCommand;\n\nconst defaultClearColour_: Float4 = [0, 0, 0, 1];\n\nexport class RenderCommandBuffer {\n\treadonly commands: RenderCommand[] = [];\n\n\tprivate resourceCommand: ResourceCommand | undefined;\n\tprivate getResourceCommand(): ResourceCommand {\n\t\tif (! this.resourceCommand) {\n\t\t\tthis.resourceCommand = {\n\t\t\t\ttype: RenderCommandType.Resource,\n\t\t\t\tsortKey: 0,\n\t\t\t\talloc: [],\n\t\t\t\tfree: []\n\t\t\t};\n\t\t\tthis.commands.push(this.resourceCommand);\n\t\t}\n\t\treturn this.resourceCommand;\n\t}\n\n\tallocate(resource: RenderResourceBase) {\n\t\tconst cmd = this.getResourceCommand();\n\t\tcmd.alloc.push(resource);\n\t}\n\n\tfree(resource: RenderResourceBase) {\n\t\tconst cmd = this.getResourceCommand();\n\t\tcmd.free.push(resource);\n\t}\n\n\tsetFrameBuffer(fb: FrameBuffer | null, clearMask: ClearMask, clearValues?: Partial<ClearValues>) {\n\t\tthis.commands.push({\n\t\t\ttype: RenderCommandType.FrameBuffer,\n\t\t\tsortKey: 1,\n\t\t\tframeBufferHandle: fb ? fb.renderResourceHandle : 0,\n\t\t\tclearMask,\n\t\t\tclearValues: {\n\t\t\t\tcolour: (clearValues && clearValues.colour) ? clearValues.colour : defaultClearColour_,\n\t\t\t\tdepth: (clearValues && (clearValues.depth !== undefined)) ? clearValues.depth : 1.0,\n\t\t\t\tstencil: (clearValues && (clearValues.stencil !== undefined)) ? clearValues.stencil : 0,\n\t\t\t}\n\t\t});\n\t}\n\n\tsetScissor(rect: ScissorRect | null) {\n\t\tif (rect === null) {\n\t\t\trect = { originX: -1, originY: -1, width: -1, height: -1 };\n\t\t}\n\t\t// TODO: else assert >0-ness of all fields\n\t\tthis.commands.push({\n\t\t\ttype: RenderCommandType.Scissor,\n\t\t\tsortKey: 1,\n\t\t\t...rect\n\t\t});\n\t}\n\n\tsetViewport(viewport: Viewport) {\n\t\tthis.commands.push({\n\t\t\ttype: RenderCommandType.Viewport,\n\t\t\tsortKey: 1,\n\t\t\t...viewport\n\t\t});\n\t}\n\n\tsetFrontFace(winding: FrontFaceWinding) {\n\t\tthis.commands.push({\n\t\t\ttype: RenderCommandType.FrontFace,\n\t\t\tsortKey: 1,\n\t\t\tfrontFace: winding\n\t\t});\n\t}\n\n\ttextureWrite(texture: Texture, layer: CubeMapFace | number, offset: PixelCoordinate, dim: PixelDimensions, pixels: TypedArray) {\n\t\tthis.commands.push({\n\t\t\ttype: RenderCommandType.TextureWrite,\n\t\t\tsortKey: 1,\n\t\t\ttextureHandle: texture.renderResourceHandle,\n\t\t\tlayer,\n\t\t\tx: offset.x,\n\t\t\ty: offset.y,\n\t\t\twidth: dim.width,\n\t\t\theight: dim.height,\n\t\t\tpixels\n\t\t});\n\t}\n\n\trender(job: RenderJob, _normalizedDepth: number) {\n\t\tthis.commands.push({\n\t\t\ttype: RenderCommandType.RenderJob,\n\t\t\tsortKey: 1,\n\t\t\tpipeline: job.pipeline,\n\t\t\tmeshHandle: job.mesh.renderResourceHandle,\n\t\t\tprimitiveType: job.primGroup.type,\n\t\t\tfromElement: job.primGroup.fromElement,\n\t\t\telementCount: job.primGroup.elementCount,\n\t\t\ttextureHandles: job.textures.map(t => t ? t.renderResourceHandle : 0),\n\t\t\tsamplerHandles: job.samplers.map(s => s ? s.renderResourceHandle : 0),\n\t\t\tconstants: job.constants\n\t\t});\n\t}\n}\n","/**\n * @stardazed/render - render system interface\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nexport * from \"./resource\";\n\nexport * from \"./sampler\";\nexport * from \"./texture\";\nexport * from \"./shader\";\nexport * from \"./framebuffer\";\nexport * from \"./mesh\";\nexport * from \"./pipeline\";\n\nexport * from \"./command-buffer\";\nexport * from \"./device\";\n"],"names":[],"mappings":"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"}