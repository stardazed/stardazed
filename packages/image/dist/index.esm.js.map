{"version":3,"file":"index.esm.js","sources":["../src/pixelformat.ts","../src/provider.ts","../src/builtin.ts","../src/dds.ts","../src/tga.ts","../src/index.ts"],"sourcesContent":["/**\n * image/pixelformat - pixel formats and traits\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"@stardazed/core\";\n\nexport const enum PixelFormat {\n\tNone,\n\n\t// 8-bit component\n\tR8,\n\tRG8,\n\tRGB8,\n\tRGBA8,\n\n\t// 8-bit component sRGB\n\tSRGB8,\n\tSRGB8_Alpha8,\n\n\t// 16-bit component\n\tR16F,\n\tRG16F,\n\tRGB16F,\n\tRGBA16F,\n\n\t// 32-bit component\n\tR32F,\n\tRG32F,\n\tRGB32F,\n\tRGBA32F,\n\n\t// Packed 16-bits\n\tRGB_5_6_5,\n\tRGBA_4_4_4_4,\n\tRGBA_5_5_5_1,\n\n\t// Depth / Stencil\n\tDepth16I,\n\tDepth24I,\n\n\tStencil8,\n\n\tDepth24_Stencil8,\n\n\t// S3TC (desktop only)\n\tRGB_DXT1   = 0x100, // compressed formats start at 0x100\n\tRGBA_DXT1,\n\tRGBA_DXT3,\n\tRGBA_DXT5,\n}\n\nexport function pixelFormatIsCompressed(format: PixelFormat) {\n\treturn format >= 0x100;\n}\n\n\nexport function pixelFormatIsDepthFormat(format: PixelFormat) {\n\treturn\tformat === PixelFormat.Depth16I ||\n\t\t\tformat === PixelFormat.Depth24I;\n}\n\n\nexport function pixelFormatIsStencilFormat(format: PixelFormat) {\n\treturn format === PixelFormat.Stencil8;\n}\n\n\nexport function pixelFormatIsDepthStencilFormat(format: PixelFormat) {\n\treturn format === PixelFormat.Depth24_Stencil8;\n}\n\n\nexport function pixelFormatBytesPerElement(format: PixelFormat) {\n\t// Element means a pixel for non-compressed formats\n\t// and a block for compressed formats\n\n\tswitch (format) {\n\t\tcase PixelFormat.R8:\n\t\tcase PixelFormat.Stencil8:\n\t\t\treturn 1;\n\n\t\tcase PixelFormat.RG8:\n\t\tcase PixelFormat.RGB_5_6_5:\n\t\tcase PixelFormat.RGBA_4_4_4_4:\n\t\tcase PixelFormat.RGBA_5_5_5_1:\n\t\tcase PixelFormat.R16F:\n\t\tcase PixelFormat.Depth16I:\n\t\t\treturn 2;\n\n\t\tcase PixelFormat.RGB8:\n\t\tcase PixelFormat.SRGB8:\n\t\t\treturn 3;\n\n\t\tcase PixelFormat.RGBA8:\n\t\tcase PixelFormat.SRGB8_Alpha8:\n\t\tcase PixelFormat.RG16F:\n\t\tcase PixelFormat.R32F:\n\t\tcase PixelFormat.Depth24I:\n\t\tcase PixelFormat.Depth24_Stencil8:\n\t\t\treturn 4;\n\n\t\tcase PixelFormat.RGB16F:\n\t\t\treturn 6;\n\n\t\tcase PixelFormat.RGBA16F:\n\t\tcase PixelFormat.RG32F:\n\t\t\treturn 8;\n\n\t\tcase PixelFormat.RGB32F:\n\t\t\treturn 12;\n\n\t\tcase PixelFormat.RGBA32F:\n\t\t\treturn 16;\n\n\t\t// -- compressed formats\n\t\tcase PixelFormat.RGB_DXT1:\n\t\tcase PixelFormat.RGBA_DXT1:\n\t\t\treturn 8;\n\n\t\tcase PixelFormat.RGBA_DXT3:\n\t\tcase PixelFormat.RGBA_DXT5:\n\t\t\treturn 16;\n\n\t\tdefault:\n\t\t\tassert(false, \"unhandled pixel buffer format\");\n\t\t\treturn 0;\n\t}\n}\n","/**\n * image/provider - providers and buffers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { TypedArray } from \"@stardazed/core\";\nimport { isPowerOf2 } from \"@stardazed/math\";\nimport { PixelFormat, pixelFormatBytesPerElement, pixelFormatIsCompressed } from \"./pixelformat\";\n\nexport interface PixelCoordinate {\n\tx: number;\n\ty: number;\n}\n\nexport function makePixelCoordinate(x: number, y: number): PixelCoordinate {\n\treturn { x, y };\n}\n\nexport interface PixelDimensions {\n\twidth: number;\n\theight: number;\n\tdepth: number;\n}\n\nexport function makePixelDimensions(width: number, height = 1, depth = 1): PixelDimensions {\n\treturn { width, height, depth };\n}\n\nexport function dimensionAtMipLevel(dim: number, level: number) {\n\treturn Math.max(1, (dim | 0) >> (level | 0));\n}\n\nexport function isNonPowerOfTwo(dim: PixelDimensions) {\n\treturn !(isPowerOf2(dim.width) && isPowerOf2(dim.height));\n}\n\n\nexport function dataSizeBytesForPixelFormatAndDimensions(format: PixelFormat, dim: PixelDimensions) {\n\tconst elementSize = pixelFormatBytesPerElement(format);\n\tlet columns = dim.width;\n\tlet rows = dim.height;\n\n\tif (pixelFormatIsCompressed(format)) {\n\t\t// DXT 1, 3, 5\n\t\tcolumns = ((dim.width + 3) >> 2);\n\t\trows    = ((dim.height + 3) >> 2);\n\t}\n\n\treturn dim.depth * rows * columns * elementSize;\n}\n\n\nexport type ImageFrameSource = ImageData | ImageBitmap | HTMLImageElement | HTMLVideoElement | HTMLCanvasElement;\nexport type ImageFrameData = ImageFrameSource | TypedArray | DataView;\n\nexport interface ImageFrame {\n\treadonly pixelFormat: PixelFormat;\n\treadonly dim: Readonly<PixelDimensions>;\n\treadonly data: ImageFrameData;\n}\n\nexport function imageFrameBytesPerRow(frame: ImageFrame) {\n\treturn dataSizeBytesForPixelFormatAndDimensions(frame.pixelFormat, makePixelDimensions(frame.dim.width));\n}\n\nexport function imageFrameRequiredRowAlignment(frame: ImageFrame) {\n\tconst rowBytes = imageFrameBytesPerRow(frame);\n\treturn Math.min(8, rowBytes & -rowBytes);\n}\n\nexport function imageFrameSizeBytes(frame: ImageFrame) {\n\treturn dataSizeBytesForPixelFormatAndDimensions(frame.pixelFormat, frame.dim);\n}\n\n\nexport interface PixelDataProvider {\n\treadonly dim: Readonly<PixelDimensions>;\n\treadonly mipMapCount: number;\n\treadonly pixelFormat: PixelFormat;\n\n\timageFrameAtLevel(level: number): ImageFrame | undefined;\n}\n\nexport interface PixelDataProviderClass {\n\tnew (...args: any[]): PixelDataProvider;\n}\n\nexport function providerForSingleFrame(frame: ImageFrame): PixelDataProvider {\n\treturn {\n\t\tpixelFormat: frame.pixelFormat,\n\t\tdim: frame.dim,\n\t\tmipMapCount: 1,\n\t\timageFrameAtLevel: (level) => level === 0 ? frame : undefined\n\t};\n}\n","/**\n * image/builtin - browser built-in images\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { PixelFormat } from \"./pixelformat\";\nimport { PixelDimensions, makePixelDimensions, PixelDataProvider, ImageFrame } from \"./provider\";\n\nexport class HTMLImageDataProvider implements PixelDataProvider {\n\treadonly dim: PixelDimensions;\n\treadonly mipMapCount = 1;\n\n\tconstructor(private image_: HTMLImageElement) {\n\t\tthis.dim = makePixelDimensions(image_.width, image_.height);\n\t}\n\n\tget pixelFormat() {\n\t\t// return (this.colourSpace === ColourSpace.sRGB) ? PixelFormat.SRGB8_Alpha8 : PixelFormat.RGBA8;\n\t\treturn PixelFormat.RGBA8;\n\t}\n\n\timageFrameAtLevel(level: number): ImageFrame | undefined {\n\t\tif (level !== 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tpixelFormat: this.pixelFormat,\n\t\t\tdim: { ...this.dim },\n\t\t\tdata: this.image_\n\t\t};\n\t}\n}\n","/**\n * image/dds - DDS (DXT 1, 3, 5) image importer\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"@stardazed/core\";\nimport { PixelFormat } from \"./pixelformat\";\nimport { PixelDataProvider, ImageFrame, makePixelDimensions, dimensionAtMipLevel, dataSizeBytesForPixelFormatAndDimensions, PixelDimensions } from \"./provider\";\n\nconst enum DDSPixelFormatOffsets {\n\tdwSize = 0, // uint32\n\tdwFlags = 4, // uint32\n\tdwFourCC = 8, // uint32\n\tdwRGBBitCount = 12, // uint32\n\tdwRBitMask = 16, // uint32\n\tdwGBitMask = 20, // uint32\n\tdwBBitMask = 24, // uint32\n\tdwABitMask = 28, // uint32\n}\n\nconst enum DDSOffsets {\n\tdwCookie = 0, // fourcc\n\tdwSize = 4, // uint32\n\tdwFlags = 8, // uint32\n\tdwHeight = 12, // uint32\n\tdwWidth = 16, // uint32\n\tdwPitchOrLinearSize = 20, // uint32\n\tdwDepth = 24, // uint32\n\tdwMipMapCount = 28, // uint32\n\tdwReserved1 = 32, // uint32[11]\n\tddspf = 76, // DDS_PIXELFORMAT\n\tdwCaps = 108, // uint32\n\tdwCaps2 = 112, // uint32\n\tdwCaps3 = 116, // uint32\n\tdwCaps4 = 120, // uint32\n\tdwReserved2 = 124, // uint32\n}\n\n\nfunction fourCharCode(fcc: string) {\n\treturn (fcc.charCodeAt(3) << 24) | (fcc.charCodeAt(2) << 16) | (fcc.charCodeAt(1) << 8) | fcc.charCodeAt(0);\n}\n\nexport class DDSDataProvider implements PixelDataProvider {\n\tprivate width_: number;\n\tprivate height_: number;\n\tprivate mipMaps_: number;\n\tprivate format_: PixelFormat;\n\tprivate data_: ArrayBufferView;\n\n\tconstructor(view: ArrayBufferView) {\n\t\tconst headerView = new DataView(view.buffer, view.byteOffset, 128);\n\n\t\tconst cookie = headerView.getUint32(DDSOffsets.dwCookie, true);\n\t\tassert(cookie === fourCharCode(\"DDS \"), \"Not a DDS document\");\n\n\t\tthis.width_ = headerView.getUint32(DDSOffsets.dwWidth, true);\n\t\tthis.height_ = headerView.getUint32(DDSOffsets.dwHeight, true);\n\n\t\tswitch (headerView.getUint32(DDSOffsets.ddspf + DDSPixelFormatOffsets.dwFourCC, true)) {\n\t\t\tcase fourCharCode(\"DXT1\"): this.format_ = PixelFormat.RGBA_DXT1; break;\n\t\t\tcase fourCharCode(\"DXT3\"): this.format_ = PixelFormat.RGBA_DXT3; break;\n\t\t\tcase fourCharCode(\"DXT5\"): this.format_ = PixelFormat.RGBA_DXT5; break;\n\t\t\tdefault:\n\t\t\t\tassert(false, \"Unsupported pixel format of DDS file\");\n\t\t\t\tthis.format_ = PixelFormat.None;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.mipMaps_ = headerView.getUint32(DDSOffsets.dwMipMapCount, true);\n\t\tconst dataSize = this.dataOffsetForLevel(this.mipMaps_);\n\n\t\tthis.data_ = new Uint8ClampedArray(view.buffer, view.byteOffset + 128, dataSize);\n\t}\n\n\tget pixelFormat() { return this.format_; }\n\tget mipMapCount() { return this.mipMaps_; }\n\tget dim(): PixelDimensions { return makePixelDimensions(this.width_, this.height_); }\n\n\tprivate dataSizeForLevel(level: number) {\n\t\tconst mipWidth = dimensionAtMipLevel(this.width_, level);\n\t\tconst mipHeight = dimensionAtMipLevel(this.height_, level);\n\n\t\treturn dataSizeBytesForPixelFormatAndDimensions(this.format_, makePixelDimensions(mipWidth, mipHeight));\n\t}\n\n\tprivate dataOffsetForLevel(level: number) {\n\t\tlet mipOffset = 0;\n\t\tfor (let lv = 0; lv < level; ++lv) {\n\t\t\tmipOffset += this.dataSizeForLevel(lv);\n\t\t}\n\t\treturn mipOffset;\n\t}\n\n\timageFrameAtLevel(level: number): ImageFrame | undefined {\n\t\tif (level < 0 || level >= this.mipMaps_ || this.format_ === PixelFormat.None) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet mipOffset = 0;\n\t\tfor (let lv = 0; lv < level; ++lv) {\n\t\t\tmipOffset += this.dataSizeForLevel(lv);\n\t\t}\n\n\t\tconst mipWidth = dimensionAtMipLevel(this.width_, level);\n\t\tconst mipHeight = dimensionAtMipLevel(this.height_, level);\n\n\t\treturn {\n\t\t\tpixelFormat: this.pixelFormat,\n\t\t\tdim: makePixelDimensions(mipWidth, mipHeight),\n\t\t\tdata: new Uint8ClampedArray(this.data_.buffer, this.data_.byteOffset + mipOffset, this.dataSizeForLevel(level))\n\t\t};\n\t}\n}\n","/**\n * image/builtin - TGA image parser\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { ImageFrame, makePixelDimensions } from \"./provider\";\nimport { PixelFormat } from \"./pixelformat\";\n\nconst enum TGAImageType /* uint8 */ {\n\tNone = 0,\n\tPaletted = 1,\n\tRGB = 2,\n\tGrayscale = 3,\n\tModeMask = 7,\n\n\tRLEBit = 8,\n\tCompressedBit = 32\n}\n\nconst enum TGAFileOffsets {\n\tidentLengthUnused = 0, // uint8\n\tusePalette = 1, // uint8\n\timageType = 2, // TGAImageType\n\tfirstPaletteIndex = 3, // uint16\n\tpaletteEntryCount = 5, // uint16\n\tpaletteBits = 7, // uint8\n\toriginX = 8, // uint16\n\toriginY = 10, // uint16\n\twidth = 12, // uint16\n\theight = 14, // uint16\n\tbitDepth = 16, // uint8\n\tflagsUnused = 17, // uint8,\n\tpixelData = 18,\n}\n\nexport function loadTGAFrameFromBufferView(view: ArrayBufferView): Promise<ImageFrame> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst headerView = new DataView(view.buffer, view.byteOffset, 18);\n\t\tconst identLengthUnused = headerView.getUint8(TGAFileOffsets.identLengthUnused);\n\t\tconst usePalette = headerView.getUint8(TGAFileOffsets.usePalette);\n\t\tconst imageType: TGAImageType = headerView.getUint8(TGAFileOffsets.imageType);\n\n\t\t// we only support a subset of TGA image types\n\t\tif (identLengthUnused !== 0) {\n\t\t\treturn reject(\"Unknown or inconsistent TGA image type\");\n\t\t}\n\t\tif (usePalette !== 0) {\n\t\t\treturn reject(\"Paletted TGA images are not supported.\");\n\t\t}\n\t\tif ((imageType & TGAImageType.CompressedBit) !== 0) {\n\t\t\treturn reject(\"Compressed TGA images are not supported.\");\n\t\t}\n\n\t\tconst width = headerView.getUint16(TGAFileOffsets.width, true);\n\t\tconst height = headerView.getUint16(TGAFileOffsets.height, true);\n\t\tconst bitDepth = headerView.getUint8(TGAFileOffsets.bitDepth);\n\t\tlet bytesPerPixel = 0;\n\n\t\tconst imageMode = imageType & TGAImageType.ModeMask;\n\t\tif (imageMode === TGAImageType.RGB) {\n\t\t\tif (bitDepth === 24) {\n\t\t\t\tbytesPerPixel = 3;\n\t\t\t}\n\t\t\telse if (bitDepth === 32) {\n\t\t\t\tbytesPerPixel = 4;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn reject(\"Only 24 or 32 bit RGB TGA images are supported.\");\n\t\t\t}\n\t\t}\n\t\telse if (imageMode === TGAImageType.Grayscale) {\n\t\t\tbytesPerPixel = 1;\n\t\t\tif (bitDepth !== 8) {\n\t\t\t\treturn reject(\"Only 8-bit grayscale TGA images are supported.\");\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\treturn reject(\"Unknown or inconsistent TGA image type\");\n\t\t}\n\n\t\tconst imageData = document.createElement(\"canvas\").getContext(\"2d\")!.createImageData(width, height);\n\t\tconst sourcePixels = new Uint8ClampedArray(view.buffer, view.byteOffset + TGAFileOffsets.pixelData);\n\t\tconst destPixels = imageData.data;\n\t\tlet sourceOffset = 0;\n\t\tlet destOffset = (height - 1) * width * 4;\n\t\tlet pixelsLeft = width * height;\n\t\tlet pixelRunLeft = imageType & TGAImageType.RLEBit ? 0 : pixelsLeft;\n\t\tlet pixelRunRaw = true;\n\t\tlet linePixelsLeft = width;\n\n\t\tconst writePixel: () => void =\n\t\t\t(bytesPerPixel === 1) ? () => {\n\t\t\t\t// 8-bit Grayscale pixels\n\t\t\t\tconst gray = sourcePixels[sourceOffset];\n\t\t\t\tdestPixels[destOffset]     = gray;\n\t\t\t\tdestPixels[destOffset + 1] = gray;\n\t\t\t\tdestPixels[destOffset + 2] = gray;\n\t\t\t\tdestPixels[destOffset + 3] = 255;\n\t\t\t}\n\t\t\t: (bytesPerPixel === 3) ? () => {\n\t\t\t\t// 24-bit BGR pixels\n\t\t\t\tdestPixels[destOffset] = sourcePixels[sourceOffset + 2];\n\t\t\t\tdestPixels[destOffset + 1] = sourcePixels[sourceOffset + 1];\n\t\t\t\tdestPixels[destOffset + 2] = sourcePixels[sourceOffset];\n\t\t\t\tdestPixels[destOffset + 3] = 255;\n\t\t\t}\n\t\t\t: /* bytesPerPixel === 4 */ () => {\n\t\t\t\t// 32-bit BGRA pixels\n\t\t\t\tdestPixels[destOffset] = sourcePixels[sourceOffset + 2];\n\t\t\t\tdestPixels[destOffset + 1] = sourcePixels[sourceOffset + 1];\n\t\t\t\tdestPixels[destOffset + 2] = sourcePixels[sourceOffset];\n\t\t\t\tdestPixels[destOffset + 3] = sourcePixels[sourceOffset + 3];\n\t\t\t};\n\n\t\twhile (pixelsLeft > 0) {\n\t\t\tif (pixelRunLeft === 0) {\n\t\t\t\tconst ctrl = sourcePixels[sourceOffset];\n\t\t\t\tpixelRunRaw = (ctrl & 0x80) === 0;\n\t\t\t\tpixelRunLeft = 1 + (ctrl & 0x7f);\n\t\t\t\tsourceOffset += 1;\n\t\t\t}\n\n\t\t\twritePixel();\n\n\t\t\tpixelRunLeft -= 1;\n\t\t\tpixelsLeft -= 1;\n\t\t\tif (pixelRunRaw || pixelRunLeft === 0) {\n\t\t\t\tsourceOffset += bytesPerPixel;\n\t\t\t}\n\t\t\tdestOffset += 4;\n\t\t\tlinePixelsLeft -= 1;\n\t\t\tif (linePixelsLeft === 0) {\n\t\t\t\tdestOffset -= 2 * width * 4;\n\t\t\t\tlinePixelsLeft = width;\n\t\t\t}\n\t\t}\n\n\t\tresolve({\n\t\t\tpixelFormat: PixelFormat.RGBA8,\n\t\t\tdim: makePixelDimensions(width, height),\n\t\t\tdata: imageData\n\t\t});\n\t});\n}\n\n/*\nexport class TGADataProvider implements PixelDataProvider {\n\tprivate data_: ImageData;\n\n\tconstructor(source: ArrayBufferView) {\n\t\tthis.data_ = loadTGAFrameFromBufferView(source);\n\t}\n\n\tget pixelFormat() { return PixelFormat.RGBA8; }\n\tget mipMapCount() { return 1; }\n\tget dim(): PixelDimensions { return makePixelDimensions(this.data_.width, this.data_.height); }\n\n\timageFrameAtLevel(level: number): ImageFrame | undefined {\n\t\tif (level !== 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn {\n\t\t\tpixelFormat: this.pixelFormat,\n\t\t\tdim: { ...this.dim },\n\t\t\tdata: this.data_\n\t\t};\n\t}\n}\n*/\n","/**\n * @stardazed/image - image (meta)data representation\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nexport * from \"./pixelformat\";\nexport * from \"./provider\";\nexport * from \"./builtin\";\nexport * from \"./dds\";\nexport * from \"./tga\";\n"],"names":[],"mappings":"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"}