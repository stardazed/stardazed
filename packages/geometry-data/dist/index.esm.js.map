{"version":3,"file":"index.esm.js","sources":["../src/indexed-triangle-view.ts","../src/direct-triangle-view.ts","../src/vertex-buffer-attribute-view.ts","../src/index.ts"],"sourcesContent":["/**\n * geometry-data/indexed-triangle-view - mutable triangle view for indexed data\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { TypedIndexArray, IndexBuffer, primitiveCountForElementCount, PrimitiveType } from \"@stardazed/geometry\";\nimport { MutableTriangleProxy, MutableTriangle, TriangleView } from \"./triangle-view\";\n\nclass IndexedTriangleProxy implements MutableTriangleProxy {\n\tprivate data_!: TypedIndexArray;\n\n\tsetTriangleIndex(data: TypedIndexArray, triangleIndex: number) {\n\t\tthis.data_ = data.subarray(triangleIndex * 3, (triangleIndex + 1) * 3);\n\t}\n\n\tindex(index: number) { return this.data_[index]; }\n\tsetIndex(index: number, newValue: number) {\n\t\tthis.data_[index] = newValue;\n\t}\n\n\tget a() { return this.data_[0]; }\n\tset a(newValue: number) { this.data_[0] = newValue; }\n\tget b() { return this.data_[1]; }\n\tset b(newValue: number) { this.data_[1] = newValue; }\n\tget c() { return this.data_[2]; }\n\tset c(newValue: number) { this.data_[2] = newValue; }\n}\n\nexport class IndexBufferTriangleView implements TriangleView {\n\treadonly primitiveCount: number;\n\tprivate readonly fromTriangle_: number;\n\tprivate readonly toTriangle_: number;\n\n\tconstructor(private indexBuffer_: IndexBuffer, fromTriangle?: number, toTriangle?: number) {\n\t\tconst primitiveCount = primitiveCountForElementCount(PrimitiveType.Triangle, this.indexBuffer_.indexCount);\n\n\t\tif (fromTriangle !== undefined) {\n\t\t\tif (fromTriangle < 0 || fromTriangle >= primitiveCount) {\n\t\t\t\tthrow new Error(\"Invalid fromTriangle index\");\n\t\t\t}\n\t\t\tthis.fromTriangle_ = fromTriangle;\n\t\t}\n\t\telse {\n\t\t\tthis.fromTriangle_ = 0;\n\t\t}\n\n\t\tif (toTriangle !== undefined) {\n\t\t\tif ((toTriangle < this.fromTriangle_) || (toTriangle > primitiveCount)) {\n\t\t\t\tthrow new Error(\"Invalid toTriangle index\");\n\t\t\t}\n\t\t\tthis.toTriangle_ = toTriangle;\n\t\t}\n\t\telse {\n\t\t\tthis.toTriangle_ = primitiveCount;\n\t\t}\n\n\t\t// effective count covered by this view\n\t\tthis.primitiveCount = this.toTriangle_ - this.fromTriangle_;\n\t}\n\n\tforEach(callback: (proxy: MutableTriangleProxy) => void) {\n\t\tconst primCount = this.toTriangle_ - this.fromTriangle_;\n\t\tconst basePtr = this.indexBuffer_.typedBasePtr(this.fromTriangle_ * 3, primCount * 3);\n\t\tconst itp = new IndexedTriangleProxy();\n\n\t\tfor (let tix = 0; tix < primCount; ++tix) {\n\t\t\titp.setTriangleIndex(basePtr, tix);\n\t\t\tcallback(itp);\n\t\t}\n\t}\n\n\tforEachMutable = this.forEach;\n\n\trefItem(triangleIndex: number): MutableTriangle {\n\t\treturn this.indexBuffer_.typedBasePtr((triangleIndex + this.fromTriangle_) * 3, 3);\n\t}\n\n\trefItemMutable = this.refItem;\n\n\tsubView(fromTriangle: number, toTriangle: number) {\n\t\treturn new IndexBufferTriangleView(this.indexBuffer_, this.fromTriangle_ + fromTriangle, this.fromTriangle_ + toTriangle);\n\t}\n\n\tmutableView() {\n\t\treturn Promise.resolve(this);\n\t}\n}\n","/**\n * geometry-data/direct-triangle-view - immutable triangle view for non-indexed data\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { primitiveCountForElementCount, PrimitiveType, elementCountForPrimitiveCount } from \"@stardazed/geometry\";\nimport { TriangleProxy, TriangleView, Triangle } from \"./triangle-view\";\n\nclass DirectTriangleProxy implements TriangleProxy {\n\tindex(index: number) {\n\t\treturn this.baseIndex_ + index;\n\t}\n\tget a() { return this.baseIndex_; }\n\tget b() { return this.baseIndex_ + 1; }\n\tget c() { return this.baseIndex_ + 2; }\n\n\tbaseIndex_ = 0;\n\tsetTriangleIndex(tri: number) { this.baseIndex_ = tri * 3; }\n}\n\nexport class DirectTriangleView implements TriangleView {\n\treadonly primitiveCount: number;\n\tprivate readonly fromTriangle_: number;\n\tprivate readonly toTriangle_: number;\n\n\tconstructor(elementCount: number, fromTriangle?: number, toTriangle?: number) {\n\t\tconst primitiveCount = primitiveCountForElementCount(PrimitiveType.Triangle, elementCount);\n\n\t\tif (fromTriangle !== undefined) {\n\t\t\tif (fromTriangle < 0 || fromTriangle >= primitiveCount) {\n\t\t\t\tthrow new Error(\"Invalid fromTriangle index\");\n\t\t\t}\n\t\t\tthis.fromTriangle_ = fromTriangle;\n\t\t}\n\t\telse {\n\t\t\tthis.fromTriangle_ = 0;\n\t\t}\n\n\t\tif (toTriangle !== undefined) {\n\t\t\tif ((toTriangle < this.fromTriangle_) || (toTriangle > primitiveCount)) {\n\t\t\t\tthrow new Error(\"Invalid toTriangle index\");\n\t\t\t}\n\t\t\tthis.toTriangle_ = toTriangle;\n\t\t}\n\t\telse {\n\t\t\tthis.toTriangle_ = primitiveCount;\n\t\t}\n\n\t\t// effective count covered by this view\n\t\tthis.primitiveCount = this.toTriangle_ - this.fromTriangle_;\n\t}\n\n\tforEach(callback: (proxy: TriangleProxy) => void) {\n\t\tconst primCount = this.toTriangle_ - this.fromTriangle_;\n\t\tconst dtp = new DirectTriangleProxy();\n\n\t\tfor (let tri = 0; tri < primCount; ++tri) {\n\t\t\tdtp.setTriangleIndex(tri + this.fromTriangle_);\n\t\t\tcallback(dtp);\n\t\t}\n\t}\n\n\trefItem(triangleIndex: number): Triangle {\n\t\tconst baseIndex = triangleIndex * 3;\n\t\treturn [baseIndex, baseIndex + 1, baseIndex + 2];\n\t}\n\n\tsubView(fromTriangle: number, triangleCount: number) {\n\t\tconst elementCount = elementCountForPrimitiveCount(PrimitiveType.Triangle, this.primitiveCount);\n\t\treturn new DirectTriangleView(elementCount, this.fromTriangle_ + fromTriangle, this.fromTriangle_ + fromTriangle + triangleCount);\n\t}\n\n\tmutableView() {\n\t\t// direct triangle views are synthesised and thus immutable\n\t\treturn Promise.reject(\"This TriangleView is immutable\");\n\t}\n}\n","/**\n * geometry-data/vertex-buffer-attribute-view - vertex attribute data access\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert, NumericType, TypedArrayConstructor, TypedArray, NumArray } from \"@stardazed/core\";\nimport { PositionedAttribute, vertexFieldElementCount, vertexFieldNumericType, VertexField, VertexBuffer } from \"@stardazed/geometry\";\n\nexport class VertexBufferAttributeView {\n\tprivate readonly vertexBuffer_: VertexBuffer;\n\tprivate readonly attr_: PositionedAttribute;\n\tprivate readonly stride_: number;\n\tprivate readonly fieldNumType_: NumericType;\n\tprivate readonly typedViewCtor_: TypedArrayConstructor;\n\tprivate readonly buffer_: ArrayBuffer;\n\tprivate readonly dataView_: DataView;\n\t\n\treadonly fromVertex: number;\n\treadonly toVertex: number;\n\treadonly vertexCount: number;\n\treadonly elementCount: number;\n\n\tconstructor(vertexBuffer: VertexBuffer, attr: PositionedAttribute, fromVertex?: number, toVertex?: number) {\n\t\tthis.vertexBuffer_ = vertexBuffer;\n\t\tthis.attr_ = attr;\n\t\tthis.stride_ = this.vertexBuffer_.stride;\n\t\tthis.elementCount = vertexFieldElementCount(this.attr_.field);\n\n\t\t// validate or use default range\n\t\tconst fullVertexCount = this.vertexBuffer_.vertexCount;\n\t\tif (fromVertex !== undefined) {\n\t\t\tif (fromVertex < 0 || fromVertex > fullVertexCount) {\n\t\t\t\tthrow new Error(\"Invalid fromVertex index\");\n\t\t\t}\n\t\t\tthis.fromVertex = fromVertex;\n\t\t}\n\t\telse {\n\t\t\tthis.fromVertex = 0;\n\t\t}\n\t\tif (toVertex !== undefined) {\n\t\t\tif ((toVertex < this.fromVertex) || (toVertex > fullVertexCount)) {\n\t\t\t\tthrow new Error(\"Invalid toVertex index\");\n\t\t\t}\n\t\t\tthis.toVertex = toVertex;\n\t\t}\n\t\telse {\n\t\t\tthis.toVertex = fullVertexCount;\n\t\t}\n\n\t\tthis.vertexCount = this.toVertex - this.fromVertex;\n\n\t\t// save some often-used fields\n\t\tconst fieldNumType = vertexFieldNumericType(this.attr_.field);\n\t\tif (! fieldNumType) {\n\t\t\tthrow new Error(\"Invalid attribute field type\");\n\t\t}\n\t\tthis.fieldNumType_ = fieldNumType;\n\t\tthis.typedViewCtor_ = this.fieldNumType_.arrayType;\n\n\t\tthis.buffer_ = this.vertexBuffer_.storage.buffer as ArrayBuffer;\n\t\tthis.dataView_ = new DataView(this.buffer_);\n\t}\n\n\tforEach(callback: (item: TypedArray) => void) {\n\t\tconst max = this.vertexCount;\n\t\tfor (let ix = 0; ix < max; ++ix) {\n\t\t\tcallback(this.refItem(ix));\n\t\t}\n\t}\n\n\tcopyValuesFrom(source: NumArray, valueCount: number, offset = 0) {\n\t\tassert(this.fromVertex + offset + valueCount <= this.vertexCount, \"buffer overflow\");\n\t\tassert(source.length >= valueCount * this.elementCount, \"not enough elements in source\");\n\n\t\tconst buffer = this.buffer_;\n\t\tconst stride = this.stride_;\n\t\tconst elementSize = this.fieldNumType_.byteSize;\n\t\tconst firstIndex = this.fromVertex + offset;\n\t\tlet offsetBytes = this.vertexBuffer_.storage.byteOffset + (this.stride_ * firstIndex) + this.attr_.offset;\n\t\tlet sourceIndex = 0;\n\t\tlet arrView: TypedArray;\n\n\t\tif (this.elementCount === 1) {\n\t\t\tif (stride % elementSize === 0) {\n\t\t\t\tconst strideInElements = (stride / elementSize) | 0;\n\t\t\t\tconst offsetInElements = (offsetBytes / elementSize) | 0;\n\t\t\t\tarrView = new (this.typedViewCtor_)(buffer, offsetBytes, (valueCount * strideInElements) - offsetInElements);\n\t\t\t\tlet vertexOffset = 0;\n\t\t\t\tfor (let n = 0; n < valueCount; ++n) {\n\t\t\t\t\tarrView[vertexOffset] = source[sourceIndex];\n\t\t\t\t\tsourceIndex += 1;\n\t\t\t\t\tvertexOffset += strideInElements;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (let n = 0; n < valueCount; ++n) {\n\t\t\t\t\tarrView = new (this.typedViewCtor_)(buffer, offsetBytes, 1);\n\t\t\t\t\tarrView[0] = source[sourceIndex];\n\t\t\t\t\tsourceIndex += 1;\n\t\t\t\t\toffsetBytes += stride;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.elementCount === 2) {\n\t\t\tif (stride % elementSize === 0) {\n\t\t\t\tconst strideInElements = (stride / elementSize) | 0;\n\t\t\t\tconst offsetInElements = (offsetBytes / elementSize) | 0;\n\t\t\t\tarrView = new (this.typedViewCtor_)(buffer, offsetBytes, (valueCount * strideInElements) - offsetInElements);\n\t\t\t\tlet vertexOffset = 0;\n\t\t\t\tfor (let n = 0; n < valueCount; ++n) {\n\t\t\t\t\tarrView[0 + vertexOffset] = source[sourceIndex];\n\t\t\t\t\tarrView[1 + vertexOffset] = source[sourceIndex + 1];\n\t\t\t\t\tsourceIndex += 2;\n\t\t\t\t\tvertexOffset += strideInElements;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (let n = 0; n < valueCount; ++n) {\n\t\t\t\t\tarrView = new (this.typedViewCtor_)(buffer, offsetBytes, 2);\n\t\t\t\t\tarrView[0] = source[sourceIndex];\n\t\t\t\t\tarrView[1] = source[sourceIndex + 1];\n\t\t\t\t\tsourceIndex += 2;\n\t\t\t\t\toffsetBytes += stride;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.elementCount === 3) {\n\t\t\tif (stride % elementSize === 0) {\n\t\t\t\tconst strideInElements = (stride / elementSize) | 0;\n\t\t\t\tconst offsetInElements = (offsetBytes / elementSize) | 0;\n\t\t\t\tarrView = new (this.typedViewCtor_)(buffer, offsetBytes, (valueCount * strideInElements) - offsetInElements);\n\t\t\t\tlet vertexOffset = 0;\n\t\t\t\tfor (let n = 0; n < valueCount; ++n) {\n\t\t\t\t\tarrView[0 + vertexOffset] = source[sourceIndex];\n\t\t\t\t\tarrView[1 + vertexOffset] = source[sourceIndex + 1];\n\t\t\t\t\tarrView[2 + vertexOffset] = source[sourceIndex + 2];\n\t\t\t\t\tsourceIndex += 3;\n\t\t\t\t\tvertexOffset += strideInElements;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (let n = 0; n < valueCount; ++n) {\n\t\t\t\t\tarrView = new (this.typedViewCtor_)(buffer, offsetBytes, 3);\n\t\t\t\t\tarrView[0] = source[sourceIndex];\n\t\t\t\t\tarrView[1] = source[sourceIndex + 1];\n\t\t\t\t\tarrView[2] = source[sourceIndex + 2];\n\t\t\t\t\tsourceIndex += 3;\n\t\t\t\t\toffsetBytes += stride;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (this.elementCount === 4) {\n\t\t\tif (stride % elementSize === 0) {\n\t\t\t\tconst strideInElements = (stride / elementSize) | 0;\n\t\t\t\tconst offsetInElements = (offsetBytes / elementSize) | 0;\n\t\t\t\tarrView = new (this.typedViewCtor_)(buffer, offsetBytes, (valueCount * strideInElements) - offsetInElements);\n\t\t\t\tlet vertexOffset = 0;\n\t\t\t\tfor (let n = 0; n < valueCount; ++n) {\n\t\t\t\t\tarrView[0 + vertexOffset] = source[sourceIndex];\n\t\t\t\t\tarrView[1 + vertexOffset] = source[sourceIndex + 1];\n\t\t\t\t\tarrView[2 + vertexOffset] = source[sourceIndex + 2];\n\t\t\t\t\tarrView[3 + vertexOffset] = source[sourceIndex + 3];\n\t\t\t\t\tsourceIndex += 4;\n\t\t\t\t\tvertexOffset += strideInElements;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfor (let n = 0; n < valueCount; ++n) {\n\t\t\t\t\tarrView = new (this.typedViewCtor_)(buffer, offsetBytes, 4);\n\t\t\t\t\tarrView[0] = source[sourceIndex];\n\t\t\t\t\tarrView[1] = source[sourceIndex + 1];\n\t\t\t\t\tarrView[2] = source[sourceIndex + 2];\n\t\t\t\t\tarrView[3] = source[sourceIndex + 3];\n\t\t\t\t\tsourceIndex += 4;\n\t\t\t\t\toffsetBytes += stride;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\trefItem(index: number): TypedArray {\n\t\tindex += this.fromVertex;\n\t\tconst offsetBytes = this.vertexBuffer_.storage.byteOffset + (this.stride_ * index) + this.attr_.offset;\n\t\treturn new (this.typedViewCtor_)(this.buffer_, offsetBytes, this.elementCount);\n\t}\n\n\tcopyItem(index: number): number[] {\n\t\tindex += this.fromVertex;\n\t\tlet offsetBytes = this.vertexBuffer_.storage.byteOffset + (this.stride_ * index) + this.attr_.offset;\n\t\tconst result: number[] = [];\n\n\t\tswitch (this.attr_.field) {\n\t\t\tcase VertexField.Floatx4:\n\t\t\t\tresult.push(this.dataView_.getFloat32(offsetBytes, true));\n\t\t\t\toffsetBytes += 4;\n\t\t\t\t// fall-through\n\t\t\tcase VertexField.Floatx3:\n\t\t\t\tresult.push(this.dataView_.getFloat32(offsetBytes, true));\n\t\t\t\toffsetBytes += 4;\n\t\t\t\t// fall-through\n\t\t\tcase VertexField.Floatx2:\n\t\t\t\tresult.push(this.dataView_.getFloat32(offsetBytes, true));\n\t\t\t\toffsetBytes += 4;\n\t\t\t\t// fall-through\n\t\t\tcase VertexField.Float:\n\t\t\t\tresult.push(this.dataView_.getFloat32(offsetBytes, true));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tassert(false, \"copyItem not implemented for this fieldtype\");\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tsubView(fromVertex: number, toVertex: number) {\n\t\treturn new VertexBufferAttributeView(this.vertexBuffer_, this.attr_, this.fromVertex + fromVertex, this.fromVertex + toVertex);\n\t}\n}\n","/**\n * @stardazed/geometry-data - vertex and index buffer element access\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { Geometry, PrimitiveType, IndexBuffer, primitiveCountForElementCount } from \"@stardazed/geometry\";\nimport { TriangleView } from \"./triangle-view\";\nimport { IndexBufferTriangleView } from \"./indexed-triangle-view\";\nimport { DirectTriangleView } from \"./direct-triangle-view\";\n\nexport * from \"./vertex-buffer-attribute-view\";\nexport * from \"./triangle-view\";\n\nexport function triangleViewForIndexBuffer(ib: IndexBuffer): TriangleView {\n\treturn new IndexBufferTriangleView(ib);\n}\n\nexport function triangleViewForGeometry(geom: Geometry) {\n\treturn new Promise<TriangleView>((resolve, reject) => {\n\t\tconst allTrianglePrimitives = geom.subMeshes.every(sm => sm.type === PrimitiveType.Triangle);\n\t\tif (! allTrianglePrimitives) {\n\t\t\treturn reject(\"Cannot create TriangleView as not all submeshes are of Triangle type\");\n\t\t}\n\n\t\tif (geom.indexBuffer) {\n\t\t\tresolve(new IndexBufferTriangleView(geom.indexBuffer));\n\t\t}\n\t\telse {\n\t\t\tconst elementCount = geom.subMeshes.map(sm => sm.elementCount).reduce((sum, count) => sum + count, 0);\n\t\t\tresolve(new DirectTriangleView(elementCount));\n\t\t}\n\t});\n}\n\nexport function triangleViewForSubMesh(geom: Geometry, subMeshIndex: number) {\n\treturn new Promise<TriangleView>((resolve, reject) => {\n\t\tconst subMesh = geom.subMeshes[subMeshIndex];\n\t\tif (! subMesh) {\n\t\t\treturn reject(`SubMesh index ${subMeshIndex} is out of range`);\n\t\t}\n\t\tif (subMesh.type !== PrimitiveType.Triangle) {\n\t\t\treturn reject(`SubMesh at index ${subMeshIndex} does not use Triangle primitives`);\n\t\t}\n\t\tconst fromTriangle = primitiveCountForElementCount(PrimitiveType.Triangle, subMesh.fromElement);\n\t\tconst toTriangle = fromTriangle + primitiveCountForElementCount(PrimitiveType.Triangle, subMesh.elementCount);\n\n\t\tif (geom.indexBuffer) {\n\t\t\tresolve(new IndexBufferTriangleView(geom.indexBuffer, fromTriangle, toTriangle));\n\t\t}\n\t\telse {\n\t\t\tresolve(new DirectTriangleView(subMesh.elementCount, fromTriangle, toTriangle));\n\t\t}\n\t});\n}\n"],"names":[],"mappings":"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"}