{"version":3,"file":"index.esm.js","sources":["../src/linear-range.ts","../../container/src/algorithm.ts","../../container/src/array.ts","../../core/src/debug.ts","../../container/src/deque.ts","../../container/src/sortedarray.ts","../src/array-range.ts","../src/set-range.ts","../../core/src/array.ts","../src/entity.ts","../src/index.ts"],"sourcesContent":["/**\n * entity/linear-range - simplest instance range\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { Instance, InstanceIterator, InstanceRange } from \"./instance\";\n\nclass InstanceLinearIterator<C> implements InstanceIterator<C> {\n\tcurrent: Instance<C>;\n\n\tconstructor(first: Instance<C>, private last_: Instance<C>) {\n\t\tthis.current = first as number - 1;\n\t}\n\n\tnext() {\n\t\tthis.current = (this.current as number + 1) as Instance<C>;\n\t\treturn this.current > 0 && this.current <= this.last_;\n\t}\n}\n\nexport class InstanceLinearRange<C> implements InstanceRange<C> {\n\tconstructor(private first_: Instance<C>, private last_: Instance<C>) {\n\t\t// valid ranges require first >= 1 and last >= first\n\t\t// invalid ranges are just treated as empty\n\t}\n\n\tget empty() {\n\t\treturn this.first_ < 1 || this.last_ < this.first_;\n\t}\n\n\tget front() { return this.first_; }\n\tget back() { return this.last_; }\n\n\thas(inst: Instance<C>): boolean {\n\t\treturn inst >= this.first_ && inst <= this.last_;\n\t}\n\n\tmakeIterator(): InstanceIterator<C> {\n\t\treturn new InstanceLinearIterator(this.first_, this.last_);\n\t}\n\n\tforEach(fn: (inst: Instance<C>) => void, thisObj?: any): void {\n\t\tlet index = this.first_ as number;\n\t\tconst end = this.last_ as number;\n\n\t\tif (index > 0) {\n\t\t\twhile (index <= end) {\n\t\t\t\tfn.call(thisObj, index as Instance<C>);\n\t\t\t\t++index;\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * container/algorithm - some container-oriented algorithms\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\n/**\n * Generate a hash value (a number containing a 32-bit signed int) for a string.\n * Based on Java's string hashing algorithm adapted for how JS stores strings.\n * @param s The string to hash\n */\nexport function hashString(s: string) {\n\tif (s.length === 0) {\n\t\treturn 0;\n\t}\n\tlet hash = 0;\n\tfor (let i = 0; i < s.length; ++i) {\n\t\tconst chr = s.charCodeAt(i);\n\t\t// JS charcodes are 16-bit, hash higher-order byte first (often 0)\n\t\thash = (((hash << 5) - hash) + ((chr >> 8) & 0xFF)) | 0;\n\t\t// hash lower-order byte\n\t\thash = (((hash << 5) - hash) + (chr & 0xFF)) | 0;\n\t}\n\treturn hash;\n}\n\n/**\n * Copy all or a specified set of values from source to dest, including undefined values.\n * Thus, this may unset values in the destination object as well as set or change them.\n * @param dest The object to overwrite values in\n * @param source The source object to read values from\n * @param keys Optional explicit set of keys to copy, defaults to all values in source\n */\nexport function override<T extends object, K extends keyof T>(dest: T, source: Partial<T>, keys?: K[]) {\n\tif (keys === undefined) {\n\t\tkeys = Object.keys(source) as K[];\n\t}\n\tfor (const k of keys) {\n\t\tdest[k] = source[k] as T[K];\n\t}\n\treturn dest;\n}\n\nexport type MappingFunc<T, U> = (t: T, k: string) => U;\n\n/**\n * Map each keyed propertiy of obj using the provided function returning a new object.\n * @param obj The source object to convert\n * @param mapper A conversion function that takes each keyed prop of obj and returns a converted value\n */\nexport function mapObject<T, K extends keyof T, U>(obj: T, mapper: MappingFunc<T[K], U>) {\n\tconst result = {} as Record<keyof T, U>;\n\tfor (const key in obj) {\n\t\tif (obj.hasOwnProperty(key)) {\n\t\t\tresult[key] = mapper(obj[key] as T[K], key);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport type ArrayFields<T> = { [P in keyof T]: T[P][]; };\n\nexport interface GroupedItems<T extends object> {\n\t[name: string]: ArrayFields<T>;\n}\n\n/**\n * Takes an array of isomorphic objects and groups the values of the fields together keyed\n * by a field name provided as group. The grouped values are deduplicated as well.\n * @example Given ts = [{n:\"a\", v:1}, {n:\"a\", v:2}, {n:\"b\", v:50}] and group = \"n\"\n * the output will be: { a:{v:[1,2]}, b:{v:[50]} }\n * @param group Name of the field in the items that will be used to group the other fields by\n * @param ts List of objects that have will be grouped by {{group}}\n */\nexport function groupFieldsBy<T extends object, K extends keyof T>(group: K, ts: T[]) {\n\treturn ts.reduce((res, val) => {\n\t\tconst key = val[group] as any as string; // FIXME: check with TS group why K is not essentially a string\n\t\tlet coll: ArrayFields<T>;\n\t\tif (!(key in res)) {\n\t\t\tcoll = {} as ArrayFields<T>;\n\t\t\tres[key] = coll;\n\t\t}\n\t\telse {\n\t\t\tcoll = res[key];\n\t\t}\n\t\tfor (const k in val) {\n\t\t\tif (k !== group && val.hasOwnProperty(k)) {\n\t\t\t\tif (!(k in coll)) {\n\t\t\t\t\tcoll[k] = [];\n\t\t\t\t}\n\t\t\t\tif (coll[k]!.indexOf(val[k]) === -1) {\n\t\t\t\t\tcoll[k]!.push(val[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}, {} as GroupedItems<T>);\n}\n\n/**\n * Standard string sort comparison function, used when comparing\n * multiple string fields together or when using non-standars sort.\n * @param a left string to compare\n * @param b right string to compare\n */\nexport function stringOrder(a: string, b: string) {\n\treturn a < b ? -1 : ((a === b) ? 0 : 1);\n}\n\n/**\n * A function that returns the relative order of 2 items.\n * If a < b, it returns a number < 0\n * If a = b, it returns 0\n * If a > b, it returns a number > 0\n */\nexport type CompareFn<T> = (a: Readonly<T>, b: Readonly<T>) => number;\n\n/**\n * In-place stable insertion sort a range of elements inside an array\n * @internal\n * @param a The array to sort\n * @param l Left index (inclusive) inside {a} of the range to operate on\n * @param r Right index (exclusive) inside {a} of the range to operate on\n * @param pred Function that returns the relative order of 2 items\n */\nfunction insertionSortInternal<T>(a: T[], l: number, r: number, pred: CompareFn<T>) {\n\tconst len = r - l;\n\tfor (let i = 1; i < len + 1; i++) {\n\t\tconst temp = a[i + l];\n\t\tlet j = i;\n\t\twhile ((j > 0) && (pred(a[j + l - 1], temp) > 0)) {\n\t\t\ta[j + l] = a[j + l - 1];\n\t\t\tj -= 1;\n\t\t}\n\t\ta[j + l] = temp;\n\t}\n}\n\n/**\n * In-place stable insertion sort for homogeneous standard arrays.\n * @param a The array to be sorted (in-place)\n * @param pred Function that returns the relative order of 2 items\n * @returns The sorted array\n */\nexport function insertionSort<T>(a: T[], pred: CompareFn<T>) {\n\tinsertionSortInternal(a, 0, a.length - 1, pred);\n\treturn a;\n}\n\n/**\n * Standard merge of two sorted half arrays into a single sorted array.\n * @internal\n * @param merged Destination array\n * @param start Index into {merged} to start inserting\n * @param left Left range of items\n * @param startLeft Index into {left} to start from\n * @param sizeLeft Count of items in {left} to process\n * @param right Right range of items\n * @param startRight Index into {right} to start from\n * @param sizeRight Count of items in {right} to process\n * @param pred Function that returns the relative order of 2 items\n */\nfunction merge<T>(\n\tmerged: T[], start: number,\n\tleft: T[], startLeft: number, sizeLeft: number, \n\tright: T[], startRight: number, sizeRight: number,\n\tpred: CompareFn<T>\n) {\n\tconst totalSize = sizeLeft + sizeRight;\n\tconst endMerged = start + totalSize;\n\tconst endLeft = startLeft + sizeLeft;\n\tconst endRight = startRight + sizeRight;\n\tfor (let i = startLeft, j = startRight, k = start; k < endMerged; k++) {\n\t\t// if reached end of first half array, run through the loop \n\t\t// filling in only from the second half array\n\t\tif (i === endLeft) {\n\t\t\tmerged[k] = right[j++];\n\t\t\tcontinue;\n\t\t}\n\t\t// if reached end of second half array, run through the loop \n\t\t// filling in only from the first half array\n\t\tif (j === endRight) {\n\t\t\tmerged[k] = left[i++];\n\t\t\tcontinue;\n\t\t}\n\t\t// merged array is filled with the smaller or equal element of the two \n\t\t// arrays, in order, ensuring a stable sort\n\t\tmerged[k] = (pred(left[i], right[j]) <= 0) ?\n\t\t\t\t\tleft[i++] : right[j++];\n\t}\n}\n\n/**\n * Merge sort data during merging without the additional copying back to array.\n * All data movement is done during the course of the merges.\n * @internal\n * @param a Source array\n * @param b Duplicate of source array\n * @param l Left index (inclusive) inside {a} of the range to operate on\n * @param r Right index (exclusive) inside {a} of the range to operate on\n * @param pred Function that returns the relative order of 2 items\n */\nfunction mergeSortInternal<T>(a: T[], b: T[], l: number, r: number, pred: CompareFn<T>) {\n\tif (r <= l) {\n\t\treturn;\n\t}\n\tif (r - l <= 10) {\n\t\tinsertionSortInternal(a, l, r, pred);\n\t\treturn;\n\t}\n\tconst m = ((l + r) / 2) >>> 0;\n\t// switch arrays to msort b thus recursively writing results to b\n\tmergeSortInternal(b, a, l, m, pred); // merge sort left\n\tmergeSortInternal(b, a, m + 1, r, pred); // merge sort right\n\t// merge partitions of b into a\n\tmerge(a, l, b, l, m - l + 1, b, m + 1, r - m, pred); // merge\n}\n\n/**\n * In-place stable merge sort for homogeneous standard arrays.\n * @param a The array to be sorted (in-place)\n * @param pred Function that returns the relative order of 2 items\n * @returns The sorted array\n */\nexport function mergeSort<T>(a: T[], pred: CompareFn<T>) {\n\tconst b = a.slice(0);\n\tmergeSortInternal(a, b, 0, a.length - 1, pred);\n\treturn a;\n}\n\n/**\n * @alias The common stable sort algorithm.\n */\nexport const stableSort = mergeSort;\n\n/**\n * Remove all duplicates found in the source array leaving only the first\n * instance of each individual element, leaving the order of the remaining\n * elements intact. Elements can optionally be given an explicit comparison proxy\n * by means of a provided helper function.\n * @param arr Source array\n * @param idGen Optional function to provide a unique identifier for each item\n */\nexport function stableUnique<T, U>(arr: T[], idGen?: (t: T) => U) {\n\tconst seen = new Set<T | U>();\n\treturn arr.filter(val => {\n\t\tconst key = idGen ? idGen(val) : val;\n\t\tif (seen.has(key)) {\n\t\t\treturn false;\n\t\t}\n\t\tseen.add(key);\n\t\treturn true;\n\t});\n}\n","/**\n * container/array - helpers to manage mostly dynamic typed arrays\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { Float2, Float3, Float3x3, Float4, Float4x4, MutableArrayLike, TypedArray } from \"@stardazed/core\";\n\nexport function copyElementRange<T, A extends MutableArrayLike<T>>(dest: A, destOffset: number, src: ArrayLike<T>, srcOffset: number, srcCount: number) {\n\tfor (let ix = 0; ix < srcCount; ++ix) {\n\t\tdest[destOffset++] = src[srcOffset++];\n\t}\n\treturn dest;\n}\n\n\nexport function fill<T, A extends MutableArrayLike<T>>(dest: A, value: T, count: number, offset = 0) {\n\tfor (let ix = 0; ix < count; ++ix) {\n\t\tdest[ix + offset] = value;\n\t}\n\treturn dest;\n}\n\n\nexport function appendArrayInPlace<T>(dest: T[], source: T[]) {\n\tconst MAX_BLOCK_SIZE = 65535;\n\n\tlet offset = 0;\n\tlet itemsLeft = source.length;\n\n\tif (itemsLeft <= MAX_BLOCK_SIZE) {\n\t\tdest.push.apply(dest, source);\n\t}\n\telse {\n\t\twhile (itemsLeft > 0) {\n\t\t\tconst pushCount = Math.min(MAX_BLOCK_SIZE, itemsLeft);\n\t\t\tconst subSource = source.slice(offset, offset + pushCount);\n\t\t\tdest.push.apply(dest, subSource);\n\t\t\titemsLeft -= pushCount;\n\t\t\toffset += pushCount;\n\t\t}\n\t}\n\treturn dest;\n}\n\n\n// -- single element ref, copy and set methods, mostly meant for accessors of components with MABs\n\nexport function refIndexedVec2(data: TypedArray, index: number): TypedArray {\n\treturn data.subarray(index * 2, (index + 1) * 2);\n}\n\nexport function copyIndexedVec2(data: TypedArray, index: number): number[] {\n\tconst offset = (index * 2) | 0;\n\treturn [data[offset], data[offset + 1]];\n}\n\nexport function setIndexedVec2(data: TypedArray, index: number, v2: Float2) {\n\tconst offset = (index * 2) | 0;\n\tdata[offset]     = v2[0];\n\tdata[offset + 1] = v2[1];\n}\n\nexport function copyVec2FromOffset(data: TypedArray, offset: number): Float2 {\n\treturn [data[offset], data[offset + 1]];\n}\n\nexport function setVec2AtOffset(data: TypedArray, offset: number, v2: Float2) {\n\tdata[offset] = v2[0];\n\tdata[offset + 1] = v2[1];\n}\n\nexport function offsetOfIndexedVec2(index: number) { return (index * 2) | 0; }\n\n\nexport function refIndexedVec3(data: TypedArray, index: number): TypedArray {\n\treturn data.subarray(index * 3, (index + 1) * 3);\n}\n\nexport function copyIndexedVec3(data: TypedArray, index: number): number[] {\n\tconst offset = (index * 3) | 0;\n\treturn [data[offset], data[offset + 1], data[offset + 2]];\n}\n\nexport function setIndexedVec3(data: TypedArray, index: number, v3: Float3) {\n\tconst offset = (index * 3) | 0;\n\tdata[offset]     = v3[0];\n\tdata[offset + 1] = v3[1];\n\tdata[offset + 2] = v3[2];\n}\n\nexport function copyVec3FromOffset(data: TypedArray, offset: number): Float3 {\n\treturn [data[offset], data[offset + 1], data[offset + 2]];\n}\n\nexport function setVec3AtOffset(data: TypedArray, offset: number, v3: Float3) {\n\tdata[offset]     = v3[0];\n\tdata[offset + 1] = v3[1];\n\tdata[offset + 2] = v3[2];\n}\n\nexport function offsetOfIndexedVec3(index: number) { return (index * 3) | 0; }\n\n\nexport function refIndexedVec4(data: TypedArray, index: number): TypedArray {\n\treturn data.subarray(index * 4, (index + 1) * 4);\n}\n\nexport function copyIndexedVec4(data: TypedArray, index: number): number[] {\n\tconst offset = (index * 4) | 0;\n\treturn [data[offset], data[offset + 1], data[offset + 2], data[offset + 3]];\n}\n\nexport function setIndexedVec4(data: TypedArray, index: number, v4: Float4) {\n\tconst offset = (index * 4) | 0;\n\tdata[offset]     = v4[0];\n\tdata[offset + 1] = v4[1];\n\tdata[offset + 2] = v4[2];\n\tdata[offset + 3] = v4[3];\n}\n\nexport function copyVec4FromOffset(data: TypedArray, offset: number): Float4 {\n\treturn [data[offset], data[offset + 1], data[offset + 2], data[offset + 3]];\n}\n\nexport function setVec4AtOffset(data: TypedArray, offset: number, v4: Float4) {\n\tdata[offset]     = v4[0];\n\tdata[offset + 1] = v4[1];\n\tdata[offset + 2] = v4[2];\n\tdata[offset + 3] = v4[3];\n}\n\nexport function offsetOfIndexedVec4(index: number) { return (index * 4) | 0; }\n\n\nexport function refIndexedMat3(data: TypedArray, index: number): TypedArray {\n\treturn data.subarray(index * 9, (index + 1) * 9);\n}\n\nexport function copyIndexedMat3(data: TypedArray, index: number): number[] {\n\tconst offset = (index * 9) | 0;\n\treturn [\n\t\tdata[offset],     data[offset + 1], data[offset + 2],\n\t\tdata[offset + 3], data[offset + 4], data[offset + 5],\n\t\tdata[offset + 6], data[offset + 7], data[offset + 8],\n\t];\n}\n\nexport function setIndexedMat3(data: TypedArray, index: number, m3: Float3x3) {\n\tconst offset = (index * 9) | 0;\n\tdata[offset]     = m3[0]; data[offset + 1] = m3[1]; data[offset + 2] = m3[2];\n\tdata[offset + 3] = m3[3]; data[offset + 4] = m3[4]; data[offset + 5] = m3[5];\n\tdata[offset + 6] = m3[6]; data[offset + 7] = m3[7]; data[offset + 8] = m3[8];\n}\n\nexport function offsetOfIndexedMat3(index: number) { return (index * 9) | 0; }\n\n\nexport function refIndexedMat4(data: TypedArray, index: number): TypedArray {\n\treturn data.subarray(index * 16, (index + 1) * 16);\n}\n\nexport function copyIndexedMat4(data: TypedArray, index: number): number[] {\n\tconst offset = (index * 16) | 0;\n\treturn [\n\t\tdata[offset],      data[offset + 1],  data[offset + 2],  data[offset + 3],\n\t\tdata[offset + 4],  data[offset + 5],  data[offset + 6],  data[offset + 7],\n\t\tdata[offset + 8],  data[offset + 9],  data[offset + 10], data[offset + 11],\n\t\tdata[offset + 12], data[offset + 13], data[offset + 14], data[offset + 15]\n\t];\n}\n\nexport function setIndexedMat4(data: TypedArray, index: number, m4: Float4x4) {\n\tconst offset = (index * 16) | 0;\n\tdata[offset]      = m4[0];  data[offset + 1]  = m4[1];  data[offset + 2]  = m4[2];  data[offset + 3]  = m4[3];\n\tdata[offset + 4]  = m4[4];  data[offset + 5]  = m4[5];  data[offset + 6]  = m4[6];  data[offset + 7]  = m4[7];\n\tdata[offset + 8]  = m4[8];  data[offset + 9]  = m4[9];  data[offset + 10] = m4[10]; data[offset + 11] = m4[11];\n\tdata[offset + 12] = m4[12]; data[offset + 13] = m4[13]; data[offset + 14] = m4[14]; data[offset + 15] = m4[15];\n}\n\nexport function offsetOfIndexedMat4(index: number) { return (index * 16) | 0; }\n","/**\n * core/debug - debugging helpers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nconst DEBUG_MODE = true;\n\n/**\n * asserts a condition to be true or throw an error otherwise\n * @param cond A condition that can be evaluated to true or false\n * @param msg Error message that will be thrown if cond is false\n */\nexport function assert(cond: any, msg?: string) {\n\tif (DEBUG_MODE && !cond) {\n\t\tconsole.error(msg || \"assertion failed\");\n\t\tthrow new Error(msg || \"assertion failed\");\n\t}\n}\n","/**\n * container/deque - generic double-ended queue container class\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"@stardazed/core\";\n\nexport class Deque<T> {\n\tprivate blocks_: T[][];\n\tprivate headBlock_: number;\n\tprivate headIndex_: number;\n\tprivate tailBlock_: number;\n\tprivate tailIndex_: number;\n\tprivate count_: number;\n\n\t// -- block access\n\tprivate blockCapacity = 512;\n\n\tprivate newBlock(): T[] {\n\t\treturn [];\n\t}\n\n\tprivate get headBlock() { return this.blocks_[this.headBlock_]; }\n\tprivate get tailBlock() { return this.blocks_[this.tailBlock_]; }\n\n\n\tconstructor() {\n\t\tthis.blocks_ = [];\n\t\tthis.blocks_.push(this.newBlock());\n\n\t\tthis.headBlock_ = this.tailBlock_ = 0;\n\t\tthis.headIndex_ = this.tailIndex_ = 0;\n\t\tthis.count_ = 0;\n\t}\n\n\n\t// -- adding elements\n\tappend(t: T) {\n\t\tif (this.tailIndex_ === this.blockCapacity) {\n\t\t\tif (this.tailBlock_ === this.blocks_.length - 1) {\n\t\t\t\tthis.blocks_.push(this.newBlock());\n\t\t\t}\n\n\t\t\tthis.tailBlock_++;\n\t\t\tthis.tailIndex_ = 0;\n\t\t}\n\n\t\tthis.tailBlock[this.tailIndex_] = t;\n\t\t++this.tailIndex_;\n\t\t++this.count_;\n\t}\n\n\tprepend(t: T) {\n\t\tif (this.headIndex_ === 0) {\n\t\t\tif (this.headBlock_ === 0) {\n\t\t\t\tthis.blocks_.unshift(this.newBlock());\n\t\t\t\t++this.tailBlock_;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t--this.headBlock_;\n\t\t\t}\n\n\t\t\tthis.headIndex_ = this.blockCapacity;\n\t\t}\n\n\t\t--this.headIndex_;\n\t\tthis.headBlock[this.headIndex_] = t;\n\t\t++this.count_;\n\t}\n\n\n\t// -- removing elements\n\tpopFront() {\n\t\tassert(this.count_ > 0);\n\n\t\tdelete this.headBlock[this.headIndex_];\n\n\t\t++this.headIndex_;\n\n\t\tif (this.headIndex_ === this.blockCapacity) {\n\t\t\t// Strategy: keep max. 1 block before head if it was previously created.\n\t\t\t// Once we get to 2 empty blocks before head, then remove the front block.\n\n\t\t\tif (this.headBlock_ === 0) {\n\t\t\t\t++this.headBlock_;\n\t\t\t}\n\t\t\telse if (this.headBlock_ === 1) {\n\t\t\t\tthis.blocks_.shift();\n\t\t\t\tthis.tailBlock_--;\n\t\t\t}\n\n\t\t\tthis.headIndex_ = 0;\n\t\t}\n\n\t\t--this.count_;\n\t}\n\n\n\tpopBack() {\n\t\tassert(this.count_ > 0);\n\n\t\tif (this.tailIndex_ === 0) {\n\t\t\t// Strategy: keep max. 1 block after tail if it was previously created.\n\t\t\t// Once we get to 2 empty blocks after tail, then remove the back block.\n\t\t\tconst lastBlockIndex = this.blocks_.length - 1;\n\n\t\t\tif (this.tailBlock_ === lastBlockIndex - 1) {\n\t\t\t\tthis.blocks_.pop();\n\t\t\t}\n\n\t\t\t--this.tailBlock_;\n\t\t\tthis.tailIndex_ = this.blockCapacity;\n\t\t}\n\n\t\t--this.tailIndex_;\n\n\t\tdelete this.tailBlock[this.tailIndex_];\n\n\t\t--this.count_;\n\t}\n\n\n\tclear() {\n\t\tthis.blocks_ = [];\n\n\t\tthis.headBlock_ = this.tailBlock_ = 0;\n\t\tthis.headIndex_ = this.tailIndex_ = 0;\n\t\tthis.count_ = 0;\n\t}\n\n\n\t// -- observers\n\tget count() { return this.count_; }\n\tget empty() { return this.count_ === 0; }\n\n\tget front(): T {\n\t\tassert(this.count_ > 0);\n\t\treturn this.headBlock[this.headIndex_];\n\t}\n\n\tget back(): T {\n\t\tassert(this.count_ > 0);\n\t\treturn (this.tailIndex_ > 0) ? this.tailBlock[this.tailIndex_ - 1] : this.blocks_[this.tailBlock_ - 1][this.blockCapacity - 1];\n\t}\n}\n","/**\n * container/sortedarray - always-sorted array type\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { appendArrayInPlace } from \"./array\";\n\nexport function lowerBound<T>(array: ArrayLike<T>, value: T) {\n\tlet count = array.length;\n\tlet it: number;\n\tlet first = 0;\n\n\twhile (count > 0) {\n\t\tconst step = count >> 1;\n\t\tit = first + step;\n\t\tif (array[it] < value) {\n\t\t\tfirst = ++it;\n\t\t\tcount -= step + 1;\n\t\t}\n\t\telse {\n\t\t\tcount = step;\n\t\t}\n\t}\n\treturn first;\n}\n\n\nexport function upperBound<T>(array: ArrayLike<T>, value: T) {\n\tlet count = array.length;\n\tlet it: number;\n\tlet first = 0;\n\n\twhile (count > 0) {\n\t\tconst step = count >> 1;\n\t\tit = first + step;\n\t\tif (array[it] <= value) {\n\t\t\tfirst = ++it;\n\t\t\tcount -= step + 1;\n\t\t}\n\t\telse {\n\t\t\tcount = step;\n\t\t}\n\t}\n\treturn first;\n}\n\n\nexport class SortedArray<T> {\n\tprivate data_: T[];\n\n\tconstructor(source?: T[], private compareFn_?: (a: T, b: T) => number) {\n\t\tthis.data_ = source ? source.slice(0) : [];\n\t\tif (source) {\n\t\t\tthis.sort();\n\t\t}\n\t}\n\n\tprivate sort() {\n\t\tif (this.data_.length < 2) {\n\t\t\treturn;\n\t\t}\n\t\tconst t0 = this.data_[0];\n\t\tlet cmp = this.compareFn_;\n\t\tif (cmp === undefined && typeof t0 !== \"string\") {\n\t\t\tcmp = (a: T, b: T) => (a < b) ? -1 : ((a > b) ? 1 : 0);\n\t\t}\n\t\tthis.data_.sort(cmp);\n\t}\n\n\tinsert(value: T) {\n\t\tconst successor = lowerBound(this.data_, value);\n\t\tthis.data_.splice(successor, 0, value);\n\t}\n\n\tinsertMultiple(values: T[]) {\n\t\tconst sourceLength = values.length;\n\t\tif (sourceLength > Math.min(20, this.data_.length / 2)) {\n\t\t\tappendArrayInPlace(this.data_, values);\n\t\t\tthis.sort();\n\t\t}\n\t\telse {\n\t\t\tfor (let ix = 0; ix < sourceLength; ++ix) {\n\t\t\t\tthis.insert(values[ix]);\n\t\t\t}\n\t\t}\n\t}\n\n\tget array(): ReadonlyArray<T> {\n\t\treturn this.data_;\n\t}\n\n\tget length() {\n\t\treturn this.data_.length;\n\t}\n\n\t// indexOf(value: T) {\n\t// \tconst successor = lowerBound(this.data_, value);\n\t// \tif (successor < 0) {\n\t// \t\treturn -1;\n\t// \t}\n\t// }\n}\n","\n/**\n * entity/array-range - instance range as a sorted array\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { SortedArray } from \"@stardazed/container\";\nimport { Instance, InstanceIterator, InstanceRange } from \"./instance\";\n\nclass InstanceArrayIterator<C> implements InstanceIterator<C> {\n\tprivate index_ = -1;\n\n\tconstructor(private readonly array_: ReadonlyArray<Instance<C>>) { }\n\n\tget current() {\n\t\treturn this.array_[this.index_];\n\t}\n\n\tnext() {\n\t\tthis.index_ += 1;\n\t\treturn this.index_ < this.array_.length;\n\t}\n}\n\n\nexport class InstanceArrayRange<C> implements InstanceRange<C> {\n\tprivate readonly data_: SortedArray<Instance<C>>;\n\n\tconstructor(array: Instance<C>[]) {\n\t\tthis.data_ = new SortedArray<Instance<C>>(array);\n\t}\n\n\tget empty() {\n\t\treturn this.data_.length === 0;\n\t}\n\n\tget front() { return this.data_.array[0]; }\n\tget back() { return this.data_.array[this.data_.length - 1]; }\n\n\thas(inst: Instance<C>) {\n\t\treturn this.data_.array.indexOf(inst) > -1;\n\t}\n\n\tmakeIterator(): InstanceIterator<C> {\n\t\treturn new InstanceArrayIterator(this.data_.array);\n\t}\n\n\tforEach(fn: (inst: Instance<C>) => void, thisObj?: any): void {\n\t\tlet index = 0;\n\t\tconst end = this.data_.length;\n\n\t\twhile (index < end) {\n\t\t\tfn.call(thisObj, this.data_.array[index]);\n\t\t\t++index;\n\t\t}\n\t}\n}\n","/**\n * entity/set-range - instance range as a set, most flexible but also slowest\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { Instance, InstanceIterator, InstanceRange } from \"./instance\";\n\nclass InstanceSetIterator<C> implements InstanceIterator<C> {\n\tcurrent: Instance<C> = 0;\n\n\tconstructor(private es6Iter: Iterator<Instance<C>>) { }\n\n\tnext() {\n\t\tconst res = this.es6Iter.next();\n\t\tthis.current = res.value || 0;\n\t\treturn !res.done;\n\t}\n}\n\nexport class InstanceSet<C> implements InstanceRange<C> {\n\tprivate data_ = new Set<Instance<C>>();\n\n\tget count() { return this.data_.size; }\n\tget empty() { return this.data_.size === 0; }\n\n\tadd(inst: Instance<C>) {\n\t\tthis.data_.add(inst);\n\t}\n\n\taddRange(inst: Instance<C>, count: number) {\n\t\tlet index = inst as number;\n\t\tconst upto = index + count;\n\t\twhile (index < upto) {\n\t\t\tthis.data_.add(index);\n\t\t\t++index;\n\t\t}\n\t}\n\n\taddArray(arr: ArrayLike<Instance<C>>) {\n\t\tfor (let ix = 0, end = arr.length; ix < end; ++ix) {\n\t\t\tthis.data_.add(arr[ix]);\n\t\t}\n\t}\n\n\tremove(inst: Instance<C>) {\n\t\tthis.data_.delete(inst);\n\t}\n\n\tremoveRange(inst: Instance<C>, count: number) {\n\t\tlet index = inst as number;\n\t\tconst upto = index + count;\n\t\twhile (index < upto) {\n\t\t\tthis.data_.delete(index);\n\t\t\t++index;\n\t\t}\n\t}\n\n\tremoveArray(arr: ArrayLike<Instance<C>>) {\n\t\tfor (let ix = 0, end = arr.length; ix < end; ++ix) {\n\t\t\tthis.data_.delete(arr[ix]);\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis.data_.clear();\n\t}\n\n\thas(inst: Instance<C>): boolean {\n\t\treturn this.data_.has(inst);\n\t}\n\n\tmakeIterator(): InstanceIterator<C> {\n\t\treturn new InstanceSetIterator<C>(this.data_.values());\n\t}\n\n\tforEach(fn: (inst: Instance<C>) => void, thisObj?: any) {\n\t\tthis.data_.forEach(fn, thisObj || this);\n\t}\n}\n","/**\n * core/array - types and helpers for array-likes\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"./debug\";\n\n// TODO: move this out\nexport function arrayTransfer(oldBuffer: ArrayBuffer, newByteLength?: number) {\n\t// This placeholder implementation cannot detach `oldBuffer`'s storage\n\t// but `oldBuffer` is to be treated as a moved-from value in C++ terms\n\t// after calling transfer.\n\n\tconst oldByteLength = oldBuffer.byteLength;\n\tnewByteLength = newByteLength! | 0;\n\tassert(newByteLength > 0);\n\n\tif (newByteLength < oldByteLength) {\n\t\treturn oldBuffer.slice(0, newByteLength);\n\t}\n\n\tconst oldBufferView = new Uint8Array(oldBuffer);\n\tconst newBufferView = new Uint8Array(newByteLength); // also creates new ArrayBuffer\n\tnewBufferView.set(oldBufferView);\n\n\treturn newBufferView.buffer as ArrayBuffer;\n}\n\nexport type TypedArrayConstructor =\n\tUint8ArrayConstructor | Uint8ClampedArrayConstructor | Uint16ArrayConstructor | Uint32ArrayConstructor |\n\tInt8ArrayConstructor | Int16ArrayConstructor | Int32ArrayConstructor |\n\tFloat32ArrayConstructor | Float64ArrayConstructor;\n\nexport type TypedArray = Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n// helper types for enums stored in int arrays\nexport interface ConstEnumArray8View<T extends number> extends Uint8Array {\n\t[index: number]: T;\n}\n\nexport interface ConstEnumArray32View<T extends number> extends Int32Array {\n\t[index: number]: T;\n}\n\n// special purpose or generic array interfaces used very frequently\nexport interface MutableArrayLike<T> {\n\treadonly length: number;\n\t[n: number]: T;\n}\n\nexport type ArrayOfConstNumber = ArrayLike<number>;\nexport type ArrayOfNumber = MutableArrayLike<number>;\n\n\n// types to use in function signatures to not have ArrayOfNumber everywhere\nexport type Float2 = ArrayOfNumber;\nexport type Float3 = ArrayOfNumber;\nexport type Float4 = ArrayOfNumber;\n\nexport type Float2x2 = ArrayOfNumber;\nexport type Float3x3 = ArrayOfNumber;\nexport type Float4x4 = ArrayOfNumber;\n\nexport type ConstFloat2 = ArrayOfConstNumber;\nexport type ConstFloat3 = ArrayOfConstNumber;\nexport type ConstFloat4 = ArrayOfConstNumber;\n\nexport type ConstFloat2x2 = ArrayOfConstNumber;\nexport type ConstFloat3x3 = ArrayOfConstNumber;\nexport type ConstFloat4x4 = ArrayOfConstNumber;\n","/**\n * entity/entity - entities and shared interfaces\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { arrayTransfer } from \"@stardazed/core\";\nimport { Deque } from \"@stardazed/container\";\nimport { Instance, InstanceArrayView } from \"./instance\";\n\nexport type Entity = Instance<EntityManager>;\nexport type EntityArrayView = InstanceArrayView<EntityManager>;\n\n\n// -- Entity bit-field build up\nconst entityIndexBits = 23; // numbers are signed int32 types internally in browsers when not used as int\nconst entityGenerationBits = 8;\nconst entityIndexMask = (1 << entityIndexBits) - 1;\nconst entityGenerationMask = (1 << entityGenerationBits) - 1;\n\nexport function entityGeneration(ent: Entity) {\n\treturn ((ent as number) >> entityIndexBits) & entityGenerationMask;\n}\n\nexport function entityIndex(ent: Entity) {\n\treturn (ent as number) & entityIndexMask;\n}\n\nfunction makeEntity(index: number, generation: number): Entity {\n\treturn ((generation & entityGenerationMask) << entityIndexBits) | (index & entityIndexMask);\n}\n\n\nexport class EntityManager {\n\tprivate generation_: Uint8Array;\n\tprivate genCount_: number;\n\tprivate freedIndices_: Deque<number>;\n\n\tprivate minFreedBuildup = 1024;\n\n\tconstructor() {\n\t\tthis.generation_ = new Uint8Array(8192);\n\t\tthis.freedIndices_ = new Deque<number>();\n\t\tthis.genCount_ = -1;\n\n\t\t// reserve entity id 0\n\t\tthis.appendGeneration();\n\t}\n\n\tprivate appendGeneration() {\n\t\tif (this.genCount_ === this.generation_.length) {\n\t\t\t// grow generation array\n\t\t\tconst newBuffer = arrayTransfer(this.generation_.buffer as ArrayBuffer, this.generation_.length * 2);\n\t\t\tthis.generation_ = new Uint8Array(newBuffer);\n\t\t}\n\n\t\t++this.genCount_;\n\t\tthis.generation_[this.genCount_] = 0;\n\t\treturn this.genCount_;\n\t}\n\n\tcreate(): Entity {\n\t\tlet index: number;\n\n\t\tif (this.freedIndices_.count >= this.minFreedBuildup) {\n\t\t\tindex = this.freedIndices_.front;\n\t\t\tthis.freedIndices_.popFront();\n\t\t}\n\t\telse {\n\t\t\tindex = this.appendGeneration();\n\t\t}\n\n\t\treturn makeEntity(index, this.generation_[index]);\n\t}\n\n\talive(ent: Entity) {\n\t\t// explicitly \"inlined\" calls to entityIndex/Generation as this method will be called a lot\n\t\tconst index = (ent as number) & entityIndexMask;\n\t\tconst generation = ((ent as number) >> entityIndexBits) & entityGenerationMask;\n\t\treturn index <= this.genCount_ && (generation === this.generation_[index]);\n\t}\n\n\tdestroy(ent: Entity) {\n\t\tconst index = entityIndex(ent);\n\t\tthis.generation_[index]++;\n\t\tthis.freedIndices_.append(index);\n\t}\n}\n","/**\n * @stardazed/entity - entities, instances and components\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nexport * from \"./instance\";\nexport * from \"./linear-range\";\nexport * from \"./array-range\";\nexport * from \"./set-range\";\n\nexport * from \"./entity\";\nexport * from \"./component\";\n"],"names":["assert"],"mappings":"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"}