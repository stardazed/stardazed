{"version":3,"file":"index.esm.js","sources":["../src/linear-range.ts","../src/array-range.ts","../src/set-range.ts","../src/entity.ts","../src/index.ts"],"sourcesContent":["/**\n * entity/linear-range - simplest instance range\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { Instance, InstanceIterator, InstanceRange } from \"./instance\";\n\nclass InstanceLinearIterator<C> implements InstanceIterator<C> {\n\tcurrent: Instance<C>;\n\n\tconstructor(first: Instance<C>, private last_: Instance<C>) {\n\t\tthis.current = first as number - 1;\n\t}\n\n\tnext() {\n\t\tthis.current = (this.current as number + 1) as Instance<C>;\n\t\treturn this.current > 0 && this.current <= this.last_;\n\t}\n}\n\nexport class InstanceLinearRange<C> implements InstanceRange<C> {\n\tconstructor(private first_: Instance<C>, private last_: Instance<C>) {\n\t\t// valid ranges require first >= 1 and last >= first\n\t\t// invalid ranges are just treated as empty\n\t}\n\n\tget empty() {\n\t\treturn this.first_ < 1 || this.last_ < this.first_;\n\t}\n\n\tget front() { return this.first_; }\n\tget back() { return this.last_; }\n\n\thas(inst: Instance<C>): boolean {\n\t\treturn inst >= this.first_ && inst <= this.last_;\n\t}\n\n\tmakeIterator(): InstanceIterator<C> {\n\t\treturn new InstanceLinearIterator(this.first_, this.last_);\n\t}\n\n\tforEach(fn: (inst: Instance<C>) => void, thisObj?: any): void {\n\t\tlet index = this.first_ as number;\n\t\tconst end = this.last_ as number;\n\n\t\tif (index > 0) {\n\t\t\twhile (index <= end) {\n\t\t\t\tfn.call(thisObj, index as Instance<C>);\n\t\t\t\t++index;\n\t\t\t}\n\t\t}\n\t}\n}\n","/**\n * entity/array-range - instance range as a sorted array\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { SortedArray } from \"@stardazed/container\";\nimport { Instance, InstanceIterator, InstanceRange } from \"./instance\";\n\nclass InstanceArrayIterator<C> implements InstanceIterator<C> {\n\tprivate index_ = -1;\n\n\tconstructor(private readonly array_: ReadonlyArray<Instance<C>>) { }\n\n\tget current() {\n\t\treturn this.array_[this.index_];\n\t}\n\n\tnext() {\n\t\tthis.index_ += 1;\n\t\treturn this.index_ < this.array_.length;\n\t}\n}\n\n\nexport class InstanceArrayRange<C> implements InstanceRange<C> {\n\tprivate readonly data_: SortedArray<Instance<C>>;\n\n\tconstructor(array: Instance<C>[]) {\n\t\tthis.data_ = new SortedArray<Instance<C>>(array);\n\t}\n\n\tget empty() {\n\t\treturn this.data_.length === 0;\n\t}\n\n\tget front() { return this.data_.array[0]; }\n\tget back() { return this.data_.array[this.data_.length - 1]; }\n\n\thas(inst: Instance<C>) {\n\t\treturn this.data_.array.indexOf(inst) > -1;\n\t}\n\n\tmakeIterator(): InstanceIterator<C> {\n\t\treturn new InstanceArrayIterator(this.data_.array);\n\t}\n\n\tforEach(fn: (inst: Instance<C>) => void, thisObj?: any): void {\n\t\tlet index = 0;\n\t\tconst end = this.data_.length;\n\n\t\twhile (index < end) {\n\t\t\tfn.call(thisObj, this.data_.array[index]);\n\t\t\t++index;\n\t\t}\n\t}\n}\n","/**\n * entity/set-range - instance range as a set, most flexible but also slowest\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { Instance, InstanceIterator, InstanceRange } from \"./instance\";\n\nclass InstanceSetIterator<C> implements InstanceIterator<C> {\n\tcurrent: Instance<C> = 0;\n\n\tconstructor(private es6Iter: Iterator<Instance<C>>) { }\n\n\tnext() {\n\t\tconst res = this.es6Iter.next();\n\t\tthis.current = res.value || 0;\n\t\treturn !res.done;\n\t}\n}\n\nexport class InstanceSet<C> implements InstanceRange<C> {\n\tprivate data_ = new Set<Instance<C>>();\n\n\tget count() { return this.data_.size; }\n\tget empty() { return this.data_.size === 0; }\n\n\tadd(inst: Instance<C>) {\n\t\tthis.data_.add(inst);\n\t}\n\n\taddRange(inst: Instance<C>, count: number) {\n\t\tlet index = inst as number;\n\t\tconst upto = index + count;\n\t\twhile (index < upto) {\n\t\t\tthis.data_.add(index);\n\t\t\t++index;\n\t\t}\n\t}\n\n\taddArray(arr: ArrayLike<Instance<C>>) {\n\t\tfor (let ix = 0, end = arr.length; ix < end; ++ix) {\n\t\t\tthis.data_.add(arr[ix]);\n\t\t}\n\t}\n\n\tremove(inst: Instance<C>) {\n\t\tthis.data_.delete(inst);\n\t}\n\n\tremoveRange(inst: Instance<C>, count: number) {\n\t\tlet index = inst as number;\n\t\tconst upto = index + count;\n\t\twhile (index < upto) {\n\t\t\tthis.data_.delete(index);\n\t\t\t++index;\n\t\t}\n\t}\n\n\tremoveArray(arr: ArrayLike<Instance<C>>) {\n\t\tfor (let ix = 0, end = arr.length; ix < end; ++ix) {\n\t\t\tthis.data_.delete(arr[ix]);\n\t\t}\n\t}\n\n\tclear() {\n\t\tthis.data_.clear();\n\t}\n\n\thas(inst: Instance<C>): boolean {\n\t\treturn this.data_.has(inst);\n\t}\n\n\tmakeIterator(): InstanceIterator<C> {\n\t\treturn new InstanceSetIterator<C>(this.data_.values());\n\t}\n\n\tforEach(fn: (inst: Instance<C>) => void, thisObj?: any) {\n\t\tthis.data_.forEach(fn, thisObj || this);\n\t}\n}\n","/**\n * entity/entity - entities and shared interfaces\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { transferArrayBuffer, Deque } from \"@stardazed/container\";\nimport { Instance, InstanceArrayView } from \"./instance\";\n\nexport type Entity = Instance<EntityManager>;\nexport type EntityArrayView = InstanceArrayView<EntityManager>;\n\n\n// -- Entity bit-field build up\nconst entityIndexBits = 24; // numbers are signed int32 types internally in browsers when used as int, but can be treated unsigned\nconst entityGenerationBits = 8;\nconst entityIndexMask = (1 << entityIndexBits) - 1;\nconst entityGenerationMask = (1 << entityGenerationBits) - 1;\n\nexport function entityGeneration(ent: Entity) {\n\treturn ((ent as number) >>> entityIndexBits) & entityGenerationMask;\n}\n\nexport function entityIndex(ent: Entity) {\n\treturn (ent as number) & entityIndexMask;\n}\n\nfunction makeEntity(index: number, generation: number): Entity {\n\treturn ((generation & entityGenerationMask) << entityIndexBits) | (index & entityIndexMask);\n}\n\n\nexport class EntityManager {\n\tprivate generation_: Uint8Array;\n\tprivate genCount_: number;\n\tprivate freedIndices_: Deque<number>;\n\n\tprivate minFreedBuildup = 1024;\n\n\tconstructor() {\n\t\tthis.generation_ = new Uint8Array(8192);\n\t\tthis.freedIndices_ = new Deque<number>();\n\t\tthis.genCount_ = -1;\n\n\t\t// reserve entity id 0\n\t\tthis.appendGeneration();\n\t}\n\n\tprivate appendGeneration() {\n\t\tif (this.genCount_ === this.generation_.length) {\n\t\t\t// grow generation array\n\t\t\tconst newBuffer = transferArrayBuffer(this.generation_.buffer as ArrayBuffer, this.generation_.length * 2);\n\t\t\tthis.generation_ = new Uint8Array(newBuffer);\n\t\t}\n\n\t\t++this.genCount_;\n\t\tthis.generation_[this.genCount_] = 0;\n\t\treturn this.genCount_;\n\t}\n\n\tcreate(): Entity {\n\t\tlet index: number;\n\n\t\tif (this.freedIndices_.count >= this.minFreedBuildup) {\n\t\t\tindex = this.freedIndices_.front;\n\t\t\tthis.freedIndices_.popFront();\n\t\t}\n\t\telse {\n\t\t\tindex = this.appendGeneration();\n\t\t}\n\n\t\treturn makeEntity(index, this.generation_[index]);\n\t}\n\n\talive(ent: Entity) {\n\t\t// explicitly \"inlined\" calls to entityIndex/Generation as this method will be called a lot\n\t\tconst index = (ent as number) & entityIndexMask;\n\t\tconst generation = ((ent as number) >>> entityIndexBits) & entityGenerationMask;\n\t\treturn index <= this.genCount_ && (generation === this.generation_[index]);\n\t}\n\n\tdestroy(ent: Entity) {\n\t\tconst index = entityIndex(ent);\n\t\tthis.generation_[index]++;\n\t\tthis.freedIndices_.append(index);\n\t}\n}\n","/**\n * @stardazed/entity - entities, instances and components\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nexport * from \"./instance\";\nexport * from \"./linear-range\";\nexport * from \"./array-range\";\nexport * from \"./set-range\";\n\nexport * from \"./entity\";\nexport * from \"./component\";\n"],"names":[],"mappings":"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"}