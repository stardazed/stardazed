{"version":3,"file":"index.esm.js","sources":["../src/algorithm.ts","../src/array.ts","../../core/src/debug.ts","../../math/src/common.ts","../src/arraybuffer.ts","../src/deque.ts","../src/sort.ts","../src/sortedarray.ts","../src/index.ts"],"sourcesContent":["/**\n * container/algorithm - some container-oriented algorithms\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\n/**\n * Generate a hash value (a number containing a 32-bit signed int) for a string.\n * Based on Java's string hashing algorithm adapted for how JS stores strings.\n * @param s The string to hash\n */\nexport function hashString(s: string) {\n\tif (s.length === 0) {\n\t\treturn 0;\n\t}\n\tlet hash = 0;\n\tfor (let i = 0; i < s.length; ++i) {\n\t\tconst chr = s.charCodeAt(i);\n\t\t// JS charcodes are 16-bit, hash higher-order byte first (often 0)\n\t\thash = (((hash << 5) - hash) + ((chr >> 8) & 0xFF)) | 0;\n\t\t// hash lower-order byte\n\t\thash = (((hash << 5) - hash) + (chr & 0xFF)) | 0;\n\t}\n\treturn hash;\n}\n\n/**\n * Copy all or a specified set of values from source to dest, including undefined values.\n * Thus, this may unset values in the destination object as well as set or change them.\n * @param dest The object to overwrite values in\n * @param source The source object to read values from\n * @param keys Optional explicit set of keys to copy, defaults to all values in source\n */\nexport function override<T extends object, K extends keyof T>(dest: T, source: Partial<T>, keys?: K[]) {\n\tif (keys === undefined) {\n\t\tkeys = Object.keys(source) as K[];\n\t}\n\tfor (const k of keys) {\n\t\tdest[k] = source[k] as T[K];\n\t}\n\treturn dest;\n}\n\nexport type MappingFunc<T, U> = (t: T, k: string) => U;\n\n/**\n * Map each keyed property of obj using the provided function returning a new object.\n * @param obj The source object to convert\n * @param mapper A conversion function that takes each keyed prop of obj and returns a converted value\n */\nexport function mapObject<T, K extends Extract<keyof T, string>, U>(obj: T, mapper: MappingFunc<T[K], U>) {\n\tconst result = {} as Record<keyof T, U>;\n\tfor (const key in obj) {\n\t\tif (obj.hasOwnProperty(key)) {\n\t\t\tresult[key] = mapper(obj[key] as T[K], key);\n\t\t}\n\t}\n\treturn result;\n}\n\nexport type ArrayFields<T> = { [P in keyof T]: T[P][]; };\n\nexport interface GroupedItems<T extends object> {\n\t[name: string]: ArrayFields<T>;\n}\n\n/**\n * Takes an array of isomorphic objects and groups the values of the fields together keyed\n * by a field name provided as group. The grouped values are deduplicated as well.\n * @example Given ts = [{n:\"a\", v:1}, {n:\"a\", v:2}, {n:\"b\", v:50}] and group = \"n\"\n * the output will be: { a:{v:[1,2]}, b:{v:[50]} }\n * @param group Name of the field in the items that will be used to group the other fields by\n * @param ts List of objects that have will be grouped by {{group}}\n */\nexport function groupFieldsBy<T extends object, K extends Extract<keyof T, string>>(group: K, ts: T[]) {\n\treturn ts.reduce((res, val) => {\n\t\tconst key = val[group] as any as string; // FIXME: check with TS group why K is not essentially a string\n\t\tlet coll: ArrayFields<T>;\n\t\tif (!(key in res)) {\n\t\t\tcoll = {} as ArrayFields<T>;\n\t\t\tres[key] = coll;\n\t\t}\n\t\telse {\n\t\t\tcoll = res[key];\n\t\t}\n\t\tfor (const k in val) {\n\t\t\tif (k !== group && val.hasOwnProperty(k)) {\n\t\t\t\tif (!(k in coll)) {\n\t\t\t\t\tcoll[k] = [];\n\t\t\t\t}\n\t\t\t\tif (coll[k]!.indexOf(val[k]) === -1) {\n\t\t\t\t\tcoll[k]!.push(val[k]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}, {} as GroupedItems<T>);\n}\n\n/**\n * A comparator function for binary searchers.\n * Must return true if a < b (a ordered before b)\n */\nexport type BinaryComparator<T> = (a: T, b: T) => boolean;\n\n/**\n * Make a lowerBound function for a specific data type.\n * @see lowerBound\n * @returns a lowerBound function specialized with the specified comparator\n */\nexport const makeLowerBound = <T>(comp: BinaryComparator<T>) => (array: ArrayLike<T>, value: T) => {\n\tlet count = array.length;\n\tlet it: number;\n\tlet first = 0;\n\n\twhile (count > 0) {\n\t\tconst step = count >> 1;\n\t\tit = first + step;\n\t\tif (comp(array[it], value)) {\n\t\t\tfirst = ++it;\n\t\t\tcount -= step + 1;\n\t\t}\n\t\telse {\n\t\t\tcount = step;\n\t\t}\n\t}\n\treturn first;\n};\n\n/**\n * Make an upperBound function for a specific data type.\n * @see upperBound\n * @returns an upperBound function specialized with the specified comparator\n */\nexport const makeUpperBound = <T>(comp: BinaryComparator<T>) => (array: ArrayLike<T>, value: T) => {\n\tlet count = array.length;\n\tlet it: number;\n\tlet first = 0;\n\n\twhile (count > 0) {\n\t\tconst step = count >> 1;\n\t\tit = first + step;\n\t\tif (! comp(value, array[it])) {\n\t\t\tfirst = ++it;\n\t\t\tcount -= step + 1;\n\t\t}\n\t\telse {\n\t\t\tcount = step;\n\t\t}\n\t}\n\treturn first;\n};\n\n/**\n * Returns an index pointing to the first element in the array that is not less than\n * (i.e. greater or equal to) value, or array.length if no such element is found.\n */\nexport const lowerBound = makeLowerBound(<T>(a: T, b: T) => a < b);\n\n/**\n * Returns an index pointing to the first element in the array that is greater than value,\n * or array.length if no such element is found.\n */\nexport const upperBound = makeUpperBound(<T>(a: T, b: T) => a < b);\n\n/**\n * Remove all duplicates found in the source array leaving only the first\n * instance of each individual element, leaving the order of the remaining\n * elements intact. Elements can optionally be given an explicit comparison proxy\n * by means of a provided helper function.\n * @param arr Source array\n * @param idGen Optional function to provide a unique identifier for each item\n */\nexport function stableUnique<T, U>(arr: T[], idGen?: (t: T) => U) {\n\tconst seen = new Set<T | U>();\n\treturn arr.filter(val => {\n\t\tconst key = idGen ? idGen(val) : val;\n\t\tif (seen.has(key)) {\n\t\t\treturn false;\n\t\t}\n\t\tseen.add(key);\n\t\treturn true;\n\t});\n}\n\n/**\n * Deep clone an object. Use only for simple struct types.\n * @param object The object to clone\n */\nexport function cloneStructDeep<T extends object>(object: T): T {\n\tconst copy: any = {};\n\tObject.getOwnPropertyNames(object).forEach(name => {\n\t\tif (typeof (object as any)[name] === \"object\" && (object as any)[name] !== null) {\n\t\t\tcopy[name] = cloneStructDeep((object as any)[name]);\n\t\t}\n\t\telse {\n\t\t\tcopy[name] = (object as any)[name];\n\t\t}\n\t});\n\treturn copy as T;\n}\n\n/**\n * Returns the count of properties in an object.\n * @param obj Any object\n */\nexport function propertyCount(obj: object) {\n\treturn Object.getOwnPropertyNames(obj).length;\n}\n\n/**\n * Create an immutable object that acts as a lookup table with numerical keys, such as (const) enum values.\n * @param keyVals Alternating key, value pairs\n */\nexport function makeLUT<A extends number, B>(...keyVals: (A | B)[]): { readonly [k: number]: Readonly<B>; } {\n\tconst lut: { [k: number]: B; } = {};\n\tconst count = keyVals.length;\n\tfor (let i = 0; i < count; i += 2) {\n\t\tlut[keyVals[i] as number] = keyVals[i + 1] as B;\n\t}\n\treturn Object.freeze(lut);\n}\n","/**\n * container/array - helpers to manage mostly dynamic typed arrays\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { MutFloat2, MutFloat3, MutFloat3x3, MutFloat4, MutFloat4x4, MutableArrayLike, TypedArray } from \"@stardazed/core\";\n\nexport function transferArrayBuffer(oldBuffer: ArrayBuffer, newByteLength: number) {\n\tconst oldByteLength = oldBuffer.byteLength;\n\tnewByteLength = newByteLength | 0;\n\n\tif (newByteLength < oldByteLength) {\n\t\treturn oldBuffer.slice(0, newByteLength);\n\t}\n\n\tconst oldBufferView = new Uint8Array(oldBuffer);\n\tconst newBufferView = new Uint8Array(newByteLength); // also creates new ArrayBuffer\n\tnewBufferView.set(oldBufferView);\n\n\treturn newBufferView.buffer as ArrayBuffer;\n}\n\nexport function clearArrayBuffer(data: ArrayBuffer) {\n\tconst numDoubles = (data.byteLength / Float64Array.BYTES_PER_ELEMENT) | 0;\n\tconst doublesByteSize = numDoubles * Float64Array.BYTES_PER_ELEMENT;\n\tconst remainingBytes = data.byteLength - doublesByteSize;\n\n\tconst doubleView = new Float64Array(data);\n\tconst remainderView = new Uint8Array(data, doublesByteSize);\n\n\tif (doubleView.fill) {\n\t\tdoubleView.fill(0);\n\t}\n\telse {\n\t\t// As of 2015-11, a loop-zero construct is faster than TypedArray create+set for large arrays in most browsers\n\t\tfor (let d = 0; d < numDoubles; ++d) {\n\t\t\tdoubleView[d] = 0;\n\t\t}\n\t}\n\tfor (let b = 0; b < remainingBytes; ++b) {\n\t\tremainderView[b] = 0;\n\t}\n}\n\n\nexport function copyElementRange<T, A extends MutableArrayLike<T>>(dest: A, destOffset: number, src: ArrayLike<T>, srcOffset: number, srcCount: number) {\n\tfor (let ix = 0; ix < srcCount; ++ix) {\n\t\tdest[destOffset++] = src[srcOffset++];\n\t}\n\treturn dest;\n}\n\n\nexport function fill<T, A extends MutableArrayLike<T>>(dest: A, value: T, count: number, offset = 0) {\n\tfor (let ix = 0; ix < count; ++ix) {\n\t\tdest[ix + offset] = value;\n\t}\n\treturn dest;\n}\n\n\nexport function appendArrayInPlace<T>(dest: T[], source: T[]) {\n\tconst MAX_BLOCK_SIZE = 65535;\n\n\tlet offset = 0;\n\tlet itemsLeft = source.length;\n\n\tif (itemsLeft <= MAX_BLOCK_SIZE) {\n\t\tdest.push.apply(dest, source);\n\t}\n\telse {\n\t\twhile (itemsLeft > 0) {\n\t\t\tconst pushCount = Math.min(MAX_BLOCK_SIZE, itemsLeft);\n\t\t\tconst subSource = source.slice(offset, offset + pushCount);\n\t\t\tdest.push.apply(dest, subSource);\n\t\t\titemsLeft -= pushCount;\n\t\t\toffset += pushCount;\n\t\t}\n\t}\n\treturn dest;\n}\n\n\n// -- single element ref, copy and set methods, mostly meant for accessors of components with MABs\n\nexport function refIndexedVec2(data: TypedArray, index: number): TypedArray {\n\treturn data.subarray(index * 2, (index + 1) * 2);\n}\n\nexport function copyIndexedVec2(data: TypedArray, index: number): number[] {\n\tconst offset = (index * 2) | 0;\n\treturn [data[offset], data[offset + 1]];\n}\n\nexport function setIndexedVec2(data: TypedArray, index: number, v2: MutFloat2) {\n\tconst offset = (index * 2) | 0;\n\tdata[offset]     = v2[0];\n\tdata[offset + 1] = v2[1];\n}\n\nexport function copyVec2FromOffset(data: TypedArray, offset: number): MutFloat2 {\n\treturn [data[offset], data[offset + 1]];\n}\n\nexport function setVec2AtOffset(data: TypedArray, offset: number, v2: MutFloat2) {\n\tdata[offset] = v2[0];\n\tdata[offset + 1] = v2[1];\n}\n\nexport function offsetOfIndexedVec2(index: number) { return (index * 2) | 0; }\n\n\nexport function refIndexedVec3(data: TypedArray, index: number): TypedArray {\n\treturn data.subarray(index * 3, (index + 1) * 3);\n}\n\nexport function copyIndexedVec3(data: TypedArray, index: number): number[] {\n\tconst offset = (index * 3) | 0;\n\treturn [data[offset], data[offset + 1], data[offset + 2]];\n}\n\nexport function setIndexedVec3(data: TypedArray, index: number, v3: MutFloat3) {\n\tconst offset = (index * 3) | 0;\n\tdata[offset]     = v3[0];\n\tdata[offset + 1] = v3[1];\n\tdata[offset + 2] = v3[2];\n}\n\nexport function copyVec3FromOffset(data: TypedArray, offset: number): MutFloat3 {\n\treturn [data[offset], data[offset + 1], data[offset + 2]];\n}\n\nexport function setVec3AtOffset(data: TypedArray, offset: number, v3: MutFloat3) {\n\tdata[offset]     = v3[0];\n\tdata[offset + 1] = v3[1];\n\tdata[offset + 2] = v3[2];\n}\n\nexport function offsetOfIndexedVec3(index: number) { return (index * 3) | 0; }\n\n\nexport function refIndexedVec4(data: TypedArray, index: number): TypedArray {\n\treturn data.subarray(index * 4, (index + 1) * 4);\n}\n\nexport function copyIndexedVec4(data: TypedArray, index: number): number[] {\n\tconst offset = (index * 4) | 0;\n\treturn [data[offset], data[offset + 1], data[offset + 2], data[offset + 3]];\n}\n\nexport function setIndexedVec4(data: TypedArray, index: number, v4: MutFloat4) {\n\tconst offset = (index * 4) | 0;\n\tdata[offset]     = v4[0];\n\tdata[offset + 1] = v4[1];\n\tdata[offset + 2] = v4[2];\n\tdata[offset + 3] = v4[3];\n}\n\nexport function copyVec4FromOffset(data: TypedArray, offset: number): MutFloat4 {\n\treturn [data[offset], data[offset + 1], data[offset + 2], data[offset + 3]];\n}\n\nexport function setVec4AtOffset(data: TypedArray, offset: number, v4: MutFloat4) {\n\tdata[offset]     = v4[0];\n\tdata[offset + 1] = v4[1];\n\tdata[offset + 2] = v4[2];\n\tdata[offset + 3] = v4[3];\n}\n\nexport function offsetOfIndexedVec4(index: number) { return (index * 4) | 0; }\n\n\nexport function refIndexedMat3(data: TypedArray, index: number): TypedArray {\n\treturn data.subarray(index * 9, (index + 1) * 9);\n}\n\nexport function copyIndexedMat3(data: TypedArray, index: number): number[] {\n\tconst offset = (index * 9) | 0;\n\treturn [\n\t\tdata[offset],     data[offset + 1], data[offset + 2],\n\t\tdata[offset + 3], data[offset + 4], data[offset + 5],\n\t\tdata[offset + 6], data[offset + 7], data[offset + 8],\n\t];\n}\n\nexport function setIndexedMat3(data: TypedArray, index: number, m3: MutFloat3x3) {\n\tconst offset = (index * 9) | 0;\n\tdata[offset]     = m3[0]; data[offset + 1] = m3[1]; data[offset + 2] = m3[2];\n\tdata[offset + 3] = m3[3]; data[offset + 4] = m3[4]; data[offset + 5] = m3[5];\n\tdata[offset + 6] = m3[6]; data[offset + 7] = m3[7]; data[offset + 8] = m3[8];\n}\n\nexport function offsetOfIndexedMat3(index: number) { return (index * 9) | 0; }\n\n\nexport function refIndexedMat4(data: TypedArray, index: number): TypedArray {\n\treturn data.subarray(index * 16, (index + 1) * 16);\n}\n\nexport function copyIndexedMat4(data: TypedArray, index: number): number[] {\n\tconst offset = (index * 16) | 0;\n\treturn [\n\t\tdata[offset],      data[offset + 1],  data[offset + 2],  data[offset + 3],\n\t\tdata[offset + 4],  data[offset + 5],  data[offset + 6],  data[offset + 7],\n\t\tdata[offset + 8],  data[offset + 9],  data[offset + 10], data[offset + 11],\n\t\tdata[offset + 12], data[offset + 13], data[offset + 14], data[offset + 15]\n\t];\n}\n\nexport function setIndexedMat4(data: TypedArray, index: number, m4: MutFloat4x4) {\n\tconst offset = (index * 16) | 0;\n\tdata[offset]      = m4[0];  data[offset + 1]  = m4[1];  data[offset + 2]  = m4[2];  data[offset + 3]  = m4[3];\n\tdata[offset + 4]  = m4[4];  data[offset + 5]  = m4[5];  data[offset + 6]  = m4[6];  data[offset + 7]  = m4[7];\n\tdata[offset + 8]  = m4[8];  data[offset + 9]  = m4[9];  data[offset + 10] = m4[10]; data[offset + 11] = m4[11];\n\tdata[offset + 12] = m4[12]; data[offset + 13] = m4[13]; data[offset + 14] = m4[14]; data[offset + 15] = m4[15];\n}\n\nexport function offsetOfIndexedMat4(index: number) { return (index * 16) | 0; }\n","/**\n * core/debug - debugging helpers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nconst DEBUG_MODE = true;\n\n/**\n * asserts a condition to be true or throw an error otherwise\n * @param cond A condition that can be evaluated to true or false\n * @param msg Error message that will be thrown if cond is false\n */\nexport function assert(cond: any, msg?: string) {\n\tif (DEBUG_MODE && !cond) {\n\t\tconsole.error(msg || \"assertion failed\");\n\t\tthrow new Error(msg || \"assertion failed\");\n\t}\n}\n","/**\n * math/common - shared elements\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { NumArray, MutNumArray } from \"@stardazed/core\";\n\n// constants\nexport const EPSILON = 0.000001;\n\n// functions\nexport function clamp(n: number, min: number, max: number): number {\n\treturn Math.max(min, Math.min(max, n));\n}\n\nexport function clamp01(n: number): number {\n\treturn Math.max(0.0, Math.min(1.0, n));\n}\n\nexport function mix(a: number, b: number, ratio: number): number {\n\treturn a * (1 - ratio) + b * ratio;\n}\n\nexport function intRandom(maximum: number): number {\n\treturn (Math.random() * (maximum + 1)) | 0;\n}\n\nexport function intRandomRange(minimum: number, maximum: number): number {\n\tconst diff = (maximum - minimum) | 0;\n\treturn minimum + intRandom(diff);\n}\n\nexport function hertz(hz: number) {\n\treturn 1 / hz;\n}\n\nexport function deg2rad(deg: number): number {\n\treturn deg * Math.PI / 180.0;\n}\n\nexport function rad2deg(rad: number): number {\n\treturn rad * 180.0 / Math.PI;\n}\n\nexport function isPowerOf2(n: number) {\n\treturn (n & (n - 1)) === 0;\n}\n\n// roundUpPowerOf2\n// return closest powerOf2 number that is >= n\n// e.g.: 15 -> 16; 16 -> 16; 17 -> 32\nexport function roundUpPowerOf2(n: number) {\n\tif (n <= 0) { return 1; }\n\tn = (n | 0) - 1;\n\tn |= n >> 1;\n\tn |= n >> 2;\n\tn |= n >> 4;\n\tn |= n >> 8;\n\tn |= n >> 16;\n\treturn n + 1;\n}\n\n// alignUp\n// round val up to closest alignmentPow2\nexport function alignUp(val: number, alignmentPow2: number) {\n\treturn (val + alignmentPow2 - 1) & (~(alignmentPow2 - 1));\n}\n\n// alignDown\n// round val down to closest alignmentPow2\nexport function alignDown(val: number, alignmentPow2: number) {\n\treturn val & (~(alignmentPow2 - 1));\n}\n\n// (strided) iteration of vecN types\nexport interface VecArrayIterationOptions {\n\tstride?: number;\n\toffset?: number;\n\tcount?: number;\n}\n\nexport type VecArrayIterationFunction = (out: MutNumArray, a: NumArray, ...args: any[]) => void;\n","/**\n * container/arraybuffer - arrays of structs and structs of arrays (numeric data only)\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert, NumericType, TypedArray } from \"@stardazed/core\";\nimport { alignUp, roundUpPowerOf2 } from \"@stardazed/math\";\nimport { clearArrayBuffer } from \"./array\";\n\nexport interface MABField {\n\ttype: NumericType;\n\tcount: number;\n}\n\ninterface PositionedMABField extends MABField {\n\tbyteOffset: number;\n\tsizeBytes: number;\n}\n\ninterface PositioningResult {\n\tposFields: PositionedMABField[];\n\ttotalSizeBytes: number;\n}\n\nfunction mabFieldSizeBytes(field: MABField) {\n\treturn field.type.byteSize * field.count;\n}\n\nfunction packMABFields(fields: MABField[]): PositioningResult {\n\tlet totalOffset = 0;\n\tconst posFields = fields.map(field => {\n\t\tconst curOffset = totalOffset;\n\t\tconst sizeBytes = mabFieldSizeBytes(field);\n\t\ttotalOffset += sizeBytes;\n\n\t\treturn {\n\t\t\ttype: field.type,\n\t\t\tcount: field.count,\n\t\t\tbyteOffset: curOffset,\n\t\t\tsizeBytes\n\t\t};\n\t});\n\n\treturn { posFields, totalSizeBytes: totalOffset };\n}\n\nfunction alignMABField(field: MABField, offset: number) {\n\tconst sizeBytes = mabFieldSizeBytes(field);\n\tconst mask = roundUpPowerOf2(sizeBytes) - 1;\n\treturn (offset + mask) & ~mask;\n}\n\nfunction alignMABFields(fields: MABField[]): PositioningResult {\n\tlet totalOffset = 0;\n\tconst posFields = fields.map(field => {\n\t\tconst curOffset = totalOffset;\n\t\ttotalOffset = alignMABField(field, totalOffset);\n\n\t\treturn {\n\t\t\ttype: field.type,\n\t\t\tcount: field.count,\n\t\t\tbyteOffset: curOffset,\n\t\t\tsizeBytes: mabFieldSizeBytes(field)\n\t\t};\n\t});\n\n\treturn { posFields, totalSizeBytes: totalOffset };\n}\n\n\nexport const enum InvalidatePointers {\n\tNo,\n\tYes\n}\n\nexport class FixedMultiArray {\n\tprivate readonly data_: ArrayBuffer;\n\tprivate readonly basePointers_: TypedArray[];\n\n\tconstructor(private capacity_: number, fields: MABField[]) {\n\t\tconst { posFields, totalSizeBytes } = packMABFields(fields);\n\t\tthis.data_ = new ArrayBuffer(totalSizeBytes * capacity_);\n\n\t\tthis.basePointers_ = posFields.map(posField => {\n\t\t\tconst byteOffset = capacity_ * posField.byteOffset;\n\t\t\treturn new (posField.type.arrayType)(this.data_, byteOffset, capacity_ * posField.count);\n\t\t});\n\t}\n\n\tget capacity() { return this.capacity_; }\n\tget data() { return this.data_; }\n\n\tclear() {\n\t\tclearArrayBuffer(this.data_);\n\t}\n\n\tindexedFieldView(index: number) {\n\t\treturn this.basePointers_[index];\n\t}\n}\n\n\nexport class MultiArrayBuffer {\n\tprivate fields_: PositionedMABField[];\n\tprivate capacity_ = 0;\n\tprivate count_ = 0;\n\tprivate elementSumSize_ = 0;\n\tprivate data_: ArrayBuffer | null = null;\n\n\tconstructor(initialCapacity: number, fields: MABField[]) {\n\t\tlet totalOffset = 0;\n\t\tthis.fields_ = fields.map(field => {\n\t\t\tconst curOffset = totalOffset;\n\t\t\tconst sizeBytes = field.type.byteSize * field.count;\n\t\t\ttotalOffset += sizeBytes;\n\n\t\t\treturn {\n\t\t\t\ttype: field.type,\n\t\t\t\tcount: field.count,\n\t\t\t\tbyteOffset: curOffset,\n\t\t\t\tsizeBytes\n\t\t\t};\n\t\t});\n\n\t\tthis.elementSumSize_ = totalOffset;\n\n\t\tthis.reserve(initialCapacity);\n\t}\n\n\n\tget capacity() { return this.capacity_; }\n\tget count() { return this.count_; }\n\tget backIndex() {\n\t\tassert(this.count_ > 0);\n\t\treturn this.count_ - 1;\n\t}\n\n\n\tprivate fieldArrayView(f: PositionedMABField, buffer: ArrayBuffer, itemCount: number) {\n\t\tconst byteOffset = f.byteOffset * itemCount;\n\t\treturn new (f.type.arrayType)(buffer, byteOffset, itemCount * f.count);\n\t}\n\n\n\treserve(newCapacity: number): InvalidatePointers {\n\t\tassert(newCapacity > 0);\n\n\t\t// By forcing an allocated multiple of 32 elements, we never have\n\t\t// to worry about padding between consecutive arrays. 32 is chosen\n\t\t// as it is the AVX layout requirement, so e.g. a char field followed\n\t\t// by an m256 field will be aligned regardless of array length.\n\t\t// We could align to 16 or even 8 and likely be fine, but this container\n\t\t// isn't meant for tiny arrays so 32 it is.\n\n\t\tnewCapacity = alignUp(newCapacity, 32);\n\t\tif (newCapacity <= this.capacity_) {\n\t\t\t// TODO: add way to cut capacity?\n\t\t\treturn InvalidatePointers.No;\n\t\t}\n\n\t\tconst newData = new ArrayBuffer(newCapacity * this.elementSumSize_);\n\t\tassert(newData);\n\n\t\tlet invalidation = InvalidatePointers.No;\n\t\tif (this.data_) {\n\t\t\t// Since a capacity change will change the length of each array individually\n\t\t\t// we need to re-layout the data in the new buffer.\n\t\t\t// We iterate over the basePointers and copy count_ elements from the old\n\t\t\t// data to each new array. With large arrays >100k elements this can take\n\t\t\t// millisecond-order time, so avoid resizes when possible.\n\n\t\t\tthis.fields_.forEach(field => {\n\t\t\t\tconst oldView = this.fieldArrayView(field, this.data_!, this.count_);\n\t\t\t\tconst newView = this.fieldArrayView(field, newData, newCapacity);\n\t\t\t\tnewView.set(oldView);\n\t\t\t});\n\n\t\t\tinvalidation = InvalidatePointers.Yes;\n\t\t}\n\n\t\tthis.data_ = newData;\n\t\tthis.capacity_ = newCapacity;\n\n\t\treturn invalidation;\n\t}\n\n\n\tclear() {\n\t\tthis.count_ = 0;\n\t\tclearArrayBuffer(this.data_!);\n\t}\n\n\n\tresize(newCount: number): InvalidatePointers {\n\t\tlet invalidation = InvalidatePointers.No;\n\n\t\tif (newCount > this.capacity_) {\n\t\t\t// automatically expand up to next highest power of 2 size\n\t\t\tinvalidation = this.reserve(roundUpPowerOf2(newCount));\n\t\t}\n\t\telse if (newCount < this.count_) {\n\t\t\t// Reducing the count will clear the now freed up elements so that when\n\t\t\t// a new allocation is made the element data is guaranteed to be zeroed.\n\n\t\t\tconst elementsToClear = this.count_ - newCount;\n\n\t\t\tthis.fields_.forEach(field => {\n\t\t\t\tconst array = this.fieldArrayView(field, this.data_!, this.count_);\n\t\t\t\tconst zeroes = new (field.type.arrayType)(elementsToClear * field.count);\n\t\t\t\tarray.set(zeroes, newCount * field.count);\n\t\t\t});\n\t\t}\n\n\t\tthis.count_ = newCount;\n\t\treturn invalidation;\n\t}\n\n\n\textend(): InvalidatePointers {\n\t\tlet invalidation = InvalidatePointers.No;\n\n\t\tif (this.count_ === this.capacity_) {\n\t\t\tinvalidation = this.reserve(this.capacity_ * 2);\n\t\t}\n\n\t\t++this.count_;\n\t\treturn invalidation;\n\t}\n\n\n\tindexedFieldView(index: number) {\n\t\treturn this.fieldArrayView(this.fields_[index], this.data_!, this.capacity_);\n\t}\n}\n\n\nexport class FixedStructArray {\n\tprivate readonly data_: ArrayBuffer;\n\tprivate readonly fields_: PositionedMABField[];\n\tprivate readonly structSize_: number;\n\tprivate readonly capacity_: number;\n\n\tconstructor(capacity: number, fields: MABField[]) {\n\t\tconst result = alignMABFields(fields);\n\t\tthis.fields_ = result.posFields;\n\t\tthis.structSize_ = result.totalSizeBytes;\n\t\tthis.capacity_ = capacity;\n\n\t\tthis.data_ = new ArrayBuffer(this.structSize_ * this.capacity_);\n\t}\n\n\tindexedStructBuffer(structIndex: number) {\n\t\tconst byteOffset = structIndex * this.structSize_;\n\t\treturn this.data_.slice(byteOffset, byteOffset + this.structSize_);\n\t}\n\n\tindexedStructFieldView(structIndex: number, fieldIndex: number) {\n\t\tconst f = this.fields_[fieldIndex];\n\t\tconst byteOffset = (structIndex * this.structSize_) + f.byteOffset;\n\t\treturn new (f.type.arrayType)(this.data_, byteOffset, f.count);\n\t}\n\n\tget structSizeBytes() { return this.structSize_; }\n\tget capacity() { return this.capacity_; }\n\tget data() { return this.data_; }\n\n\tclear() {\n\t\tclearArrayBuffer(this.data_);\n\t}\n}\n","/**\n * container/deque - generic double-ended queue container class\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"@stardazed/core\";\n\nexport class Deque<T> {\n\tprivate blocks_: T[][];\n\tprivate headBlock_: number;\n\tprivate headIndex_: number;\n\tprivate tailBlock_: number;\n\tprivate tailIndex_: number;\n\tprivate count_: number;\n\n\t// -- block access\n\tprivate blockCapacity = 512;\n\n\tprivate newBlock(): T[] {\n\t\treturn [];\n\t}\n\n\tprivate get headBlock() { return this.blocks_[this.headBlock_]; }\n\tprivate get tailBlock() { return this.blocks_[this.tailBlock_]; }\n\n\n\tconstructor() {\n\t\tthis.blocks_ = [];\n\t\tthis.blocks_.push(this.newBlock());\n\n\t\tthis.headBlock_ = this.tailBlock_ = 0;\n\t\tthis.headIndex_ = this.tailIndex_ = 0;\n\t\tthis.count_ = 0;\n\t}\n\n\n\t// -- adding elements\n\tappend(t: T) {\n\t\tif (this.tailIndex_ === this.blockCapacity) {\n\t\t\tif (this.tailBlock_ === this.blocks_.length - 1) {\n\t\t\t\tthis.blocks_.push(this.newBlock());\n\t\t\t}\n\n\t\t\tthis.tailBlock_++;\n\t\t\tthis.tailIndex_ = 0;\n\t\t}\n\n\t\tthis.tailBlock[this.tailIndex_] = t;\n\t\t++this.tailIndex_;\n\t\t++this.count_;\n\t}\n\n\tprepend(t: T) {\n\t\tif (this.headIndex_ === 0) {\n\t\t\tif (this.headBlock_ === 0) {\n\t\t\t\tthis.blocks_.unshift(this.newBlock());\n\t\t\t\t++this.tailBlock_;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t--this.headBlock_;\n\t\t\t}\n\n\t\t\tthis.headIndex_ = this.blockCapacity;\n\t\t}\n\n\t\t--this.headIndex_;\n\t\tthis.headBlock[this.headIndex_] = t;\n\t\t++this.count_;\n\t}\n\n\n\t// -- removing elements\n\tpopFront() {\n\t\tassert(this.count_ > 0);\n\n\t\tdelete this.headBlock[this.headIndex_];\n\n\t\t++this.headIndex_;\n\n\t\tif (this.headIndex_ === this.blockCapacity) {\n\t\t\t// Strategy: keep max. 1 block before head if it was previously created.\n\t\t\t// Once we get to 2 empty blocks before head, then remove the front block.\n\n\t\t\tif (this.headBlock_ === 0) {\n\t\t\t\t++this.headBlock_;\n\t\t\t}\n\t\t\telse if (this.headBlock_ === 1) {\n\t\t\t\tthis.blocks_.shift();\n\t\t\t\tthis.tailBlock_--;\n\t\t\t}\n\n\t\t\tthis.headIndex_ = 0;\n\t\t}\n\n\t\t--this.count_;\n\t}\n\n\n\tpopBack() {\n\t\tassert(this.count_ > 0);\n\n\t\tif (this.tailIndex_ === 0) {\n\t\t\t// Strategy: keep max. 1 block after tail if it was previously created.\n\t\t\t// Once we get to 2 empty blocks after tail, then remove the back block.\n\t\t\tconst lastBlockIndex = this.blocks_.length - 1;\n\n\t\t\tif (this.tailBlock_ === lastBlockIndex - 1) {\n\t\t\t\tthis.blocks_.pop();\n\t\t\t}\n\n\t\t\t--this.tailBlock_;\n\t\t\tthis.tailIndex_ = this.blockCapacity;\n\t\t}\n\n\t\t--this.tailIndex_;\n\n\t\tdelete this.tailBlock[this.tailIndex_];\n\n\t\t--this.count_;\n\t}\n\n\n\tclear() {\n\t\tthis.blocks_ = [];\n\n\t\tthis.headBlock_ = this.tailBlock_ = 0;\n\t\tthis.headIndex_ = this.tailIndex_ = 0;\n\t\tthis.count_ = 0;\n\t}\n\n\n\t// -- observers\n\tget count() { return this.count_; }\n\tget empty() { return this.count_ === 0; }\n\n\tget front(): T {\n\t\tassert(this.count_ > 0);\n\t\treturn this.headBlock[this.headIndex_];\n\t}\n\n\tget back(): T {\n\t\tassert(this.count_ > 0);\n\t\treturn (this.tailIndex_ > 0) ? this.tailBlock[this.tailIndex_ - 1] : this.blocks_[this.tailBlock_ - 1][this.blockCapacity - 1];\n\t}\n}\n","/**\n * container/sort - sorting algorithms\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\n/**\n * Standard (string) sort comparison function, used when comparing\n * multiple string fields together or when using non-standard sort.\n * @param a left string to compare\n * @param b right string to compare\n */\nexport function genericOrder<T>(a: T, b: T) {\n\treturn a < b ? -1 : ((a === b) ? 0 : 1);\n}\n\n/**\n * A function that returns the relative order of 2 items.\n * If a < b, it returns a number < 0\n * If a = b, it returns 0\n * If a > b, it returns a number > 0\n */\nexport type CompareFn<T> = (a: Readonly<T>, b: Readonly<T>) => number;\n\n/**\n * In-place stable insertion sort a range of elements inside an array\n * @internal\n * @param a The array to sort\n * @param l Left index (inclusive) inside {a} of the range to operate on\n * @param r Right index (exclusive) inside {a} of the range to operate on\n * @param pred Function that returns the relative order of 2 items\n */\nfunction insertionSortInternal<T>(a: T[], l: number, r: number, pred: CompareFn<T>) {\n\tconst len = r - l;\n\tfor (let i = 1; i < len + 1; i++) {\n\t\tconst temp = a[i + l];\n\t\tlet j = i;\n\t\twhile ((j > 0) && (pred(a[j + l - 1], temp) > 0)) {\n\t\t\ta[j + l] = a[j + l - 1];\n\t\t\tj -= 1;\n\t\t}\n\t\ta[j + l] = temp;\n\t}\n}\n\n/**\n * In-place stable insertion sort for homogeneous standard arrays.\n * @param a The array to be sorted (in-place)\n * @param pred Function that returns the relative order of 2 items\n * @returns The sorted array\n */\nexport function insertionSort<T>(a: T[], pred: CompareFn<T>) {\n\tinsertionSortInternal(a, 0, a.length - 1, pred);\n\treturn a;\n}\n\n/**\n * Standard merge of two sorted half arrays into a single sorted array.\n * @internal\n * @param merged Destination array\n * @param start Index into {merged} to start inserting\n * @param left Left range of items\n * @param startLeft Index into {left} to start from\n * @param sizeLeft Count of items in {left} to process\n * @param right Right range of items\n * @param startRight Index into {right} to start from\n * @param sizeRight Count of items in {right} to process\n * @param pred Function that returns the relative order of 2 items\n */\nfunction merge<T>(\n\tmerged: T[], start: number,\n\tleft: T[], startLeft: number, sizeLeft: number, \n\tright: T[], startRight: number, sizeRight: number,\n\tpred: CompareFn<T>\n) {\n\tconst totalSize = sizeLeft + sizeRight;\n\tconst endMerged = start + totalSize;\n\tconst endLeft = startLeft + sizeLeft;\n\tconst endRight = startRight + sizeRight;\n\tfor (let i = startLeft, j = startRight, k = start; k < endMerged; k++) {\n\t\t// if reached end of first half array, run through the loop \n\t\t// filling in only from the second half array\n\t\tif (i === endLeft) {\n\t\t\tmerged[k] = right[j++];\n\t\t\tcontinue;\n\t\t}\n\t\t// if reached end of second half array, run through the loop \n\t\t// filling in only from the first half array\n\t\tif (j === endRight) {\n\t\t\tmerged[k] = left[i++];\n\t\t\tcontinue;\n\t\t}\n\t\t// merged array is filled with the smaller or equal element of the two \n\t\t// arrays, in order, ensuring a stable sort\n\t\tmerged[k] = (pred(left[i], right[j]) <= 0) ?\n\t\t\t\t\tleft[i++] : right[j++];\n\t}\n}\n\n/**\n * Merge sort data during merging without the additional copying back to array.\n * All data movement is done during the course of the merges.\n * @internal\n * @param a Source array\n * @param b Duplicate of source array\n * @param l Left index (inclusive) inside {a} of the range to operate on\n * @param r Right index (exclusive) inside {a} of the range to operate on\n * @param pred Function that returns the relative order of 2 items\n */\nfunction mergeSortInternal<T>(a: T[], b: T[], l: number, r: number, pred: CompareFn<T>) {\n\tif (r <= l) {\n\t\treturn;\n\t}\n\tif (r - l <= 10) {\n\t\tinsertionSortInternal(a, l, r, pred);\n\t\treturn;\n\t}\n\tconst m = ((l + r) / 2) >>> 0;\n\t// switch arrays to msort b thus recursively writing results to b\n\tmergeSortInternal(b, a, l, m, pred); // merge sort left\n\tmergeSortInternal(b, a, m + 1, r, pred); // merge sort right\n\t// merge partitions of b into a\n\tmerge(a, l, b, l, m - l + 1, b, m + 1, r - m, pred); // merge\n}\n\n/**\n * In-place stable merge sort for homogeneous standard arrays.\n * @param a The array to be sorted (in-place)\n * @param pred Function that returns the relative order of 2 items\n * @returns The sorted array\n */\nexport function mergeSort<T>(a: T[], pred: CompareFn<T>) {\n\tconst b = a.slice(0);\n\tmergeSortInternal(a, b, 0, a.length - 1, pred);\n\treturn a;\n}\n\n/**\n * @alias mergeSort The common stable sort algorithm.\n */\nexport const stableSort = mergeSort;\n","/**\n * container/sortedarray - always-sorted array type\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { lowerBound } from \"./algorithm\";\nimport { appendArrayInPlace } from \"./array\";\nimport { stableSort, genericOrder, CompareFn } from \"./sort\";\n\nexport class SortedArray<T> {\n\tprivate data_: T[];\n\tprivate compareFn_: CompareFn<T>;\n\n\tconstructor(source?: T[], compareFn?: CompareFn<T>) {\n\t\tthis.compareFn_ = compareFn || genericOrder;\n\t\tthis.data_ = source ? source.slice(0) : [];\n\t\tif (source) {\n\t\t\tthis.sort();\n\t\t}\n\t}\n\n\tprivate sort() {\n\t\tstableSort(this.data_, this.compareFn_);\n\t}\n\n\tinsert(value: T) {\n\t\tconst successor = lowerBound(this.data_, value);\n\t\tthis.data_.splice(successor, 0, value);\n\t}\n\n\tinsertMultiple(values: T[]) {\n\t\tconst sourceLength = values.length;\n\t\tif (sourceLength > Math.min(20, this.data_.length / 2)) {\n\t\t\tappendArrayInPlace(this.data_, values);\n\t\t\tthis.sort();\n\t\t}\n\t\telse {\n\t\t\tfor (let ix = 0; ix < sourceLength; ++ix) {\n\t\t\t\tthis.insert(values[ix]);\n\t\t\t}\n\t\t}\n\t}\n\n\tget array(): ReadonlyArray<T> {\n\t\treturn this.data_;\n\t}\n\n\tget length() {\n\t\treturn this.data_.length;\n\t}\n\n\t// indexOf(value: T) {\n\t// \tconst successor = lowerBound(this.data_, value);\n\t// \tif (successor < 0) {\n\t// \t\treturn -1;\n\t// \t}\n\t// }\n}\n","/**\n * @stardazed/container - container types and helpers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nexport * from \"./algorithm\";\nexport * from \"./array\";\nexport * from \"./arraybuffer\";\nexport * from \"./deque\";\nexport * from \"./sort\";\nexport * from \"./sortedarray\";\n"],"names":[],"mappings":"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"}