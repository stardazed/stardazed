function assert(e,r){if(!e)throw console.error(r||"assertion failed"),new Error(r||"assertion failed")}function arrayTransfer(e,r){const t=e.byteLength;if(assert((r|=0)>0),r<t)return e.slice(0,r);const n=new Uint8Array(e),a=new Uint8Array(r);return a.set(n),a.buffer}const UInt8={min:0,max:255,signed:!1,byteSize:1,arrayType:Uint8Array},UInt8Clamped={min:0,max:255,signed:!1,byteSize:1,arrayType:Uint8ClampedArray},SInt8={min:-128,max:127,signed:!0,byteSize:1,arrayType:Int8Array},UInt16={min:0,max:65535,signed:!1,byteSize:2,arrayType:Uint16Array},SInt16={min:-32768,max:32767,signed:!0,byteSize:2,arrayType:Int16Array},UInt32={min:0,max:4294967295,signed:!1,byteSize:4,arrayType:Uint32Array},SInt32={min:-2147483648,max:2147483647,signed:!0,byteSize:4,arrayType:Int32Array},Float={min:-3.4028234663852886e38,max:3.4028234663852886e38,signed:!0,byteSize:4,arrayType:Float32Array},Double={min:-1.7976931348623157e308,max:1.7976931348623157e308,signed:!0,byteSize:8,arrayType:Float64Array};function cloneStructDeep(e){const r={};return Object.getOwnPropertyNames(e).forEach(t=>{"object"==typeof e[t]&&null!==e[t]?r[t]=cloneStructDeep(e[t]):r[t]=e[t]}),r}function propertyCount(e){return Object.getOwnPropertyNames(e).length}function makeLUT(...e){const r={},t=e.length;for(let n=0;n<t;n+=2)r[e[n]]=e[n+1];return Object.freeze(r)}export{assert,arrayTransfer,UInt8,UInt8Clamped,SInt8,UInt16,SInt16,UInt32,SInt32,Float,Double,cloneStructDeep,propertyCount,makeLUT};
//# sourceMappingURL=index.esm.js.map
