{"version":3,"file":"index.esm.js","sources":["../src/debug.ts","../src/array.ts","../src/numeric.ts","../src/struct.ts"],"sourcesContent":["/**\n * core/debug - debugging helpers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nconst DEBUG_MODE = true;\n\n/**\n * asserts a condition to be true or throw an error otherwise\n * @param cond A condition that can be evaluated to true or false\n * @param msg Error message that will be thrown if cond is false\n */\nexport function assert(cond: any, msg?: string) {\n\tif (DEBUG_MODE && !cond) {\n\t\tconsole.error(msg || \"assertion failed\");\n\t\tthrow new Error(msg || \"assertion failed\");\n\t}\n}\n","/**\n * core/array - types and helpers for array-likes\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"./debug\";\n\n// TODO: move this out\nexport function arrayTransfer(oldBuffer: ArrayBuffer, newByteLength?: number) {\n\t// This placeholder implementation cannot detach `oldBuffer`'s storage\n\t// but `oldBuffer` is to be treated as a moved-from value in C++ terms\n\t// after calling transfer.\n\n\tconst oldByteLength = oldBuffer.byteLength;\n\tnewByteLength = newByteLength! | 0;\n\tassert(newByteLength > 0);\n\n\tif (newByteLength < oldByteLength) {\n\t\treturn oldBuffer.slice(0, newByteLength);\n\t}\n\n\tconst oldBufferView = new Uint8Array(oldBuffer);\n\tconst newBufferView = new Uint8Array(newByteLength); // also creates new ArrayBuffer\n\tnewBufferView.set(oldBufferView);\n\n\treturn newBufferView.buffer as ArrayBuffer;\n}\n\nexport type TypedArrayConstructor =\n\tUint8ArrayConstructor | Uint8ClampedArrayConstructor | Uint16ArrayConstructor | Uint32ArrayConstructor |\n\tInt8ArrayConstructor | Int16ArrayConstructor | Int32ArrayConstructor |\n\tFloat32ArrayConstructor | Float64ArrayConstructor;\n\nexport type TypedArray = Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n// helper types for enums stored in int arrays\nexport interface ConstEnumArray8View<T extends number> extends Uint8Array {\n\t[index: number]: T;\n}\n\nexport interface ConstEnumArray32View<T extends number> extends Int32Array {\n\t[index: number]: T;\n}\n\n// special purpose or generic array interfaces used very frequently\nexport interface MutableArrayLike<T> {\n\treadonly length: number;\n\t[n: number]: T;\n}\n\nexport type ArrayOfConstNumber = ArrayLike<number>;\nexport type ArrayOfNumber = MutableArrayLike<number>;\n\n\n// types to use in function signatures to not have ArrayOfNumber everywhere\nexport type Float2 = ArrayOfNumber;\nexport type Float3 = ArrayOfNumber;\nexport type Float4 = ArrayOfNumber;\n\nexport type Float2x2 = ArrayOfNumber;\nexport type Float3x3 = ArrayOfNumber;\nexport type Float4x4 = ArrayOfNumber;\n\nexport type ConstFloat2 = ArrayOfConstNumber;\nexport type ConstFloat3 = ArrayOfConstNumber;\nexport type ConstFloat4 = ArrayOfConstNumber;\n\nexport type ConstFloat2x2 = ArrayOfConstNumber;\nexport type ConstFloat3x3 = ArrayOfConstNumber;\nexport type ConstFloat4x4 = ArrayOfConstNumber;\n","/**\n * core/numeric - numeric types, traits and array helpers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { TypedArrayConstructor } from \"./array\";\n\n/**\n * Interface describing a binary representation of a number including its\n * limits, storage requirements and associated TypedArray constructor.\n */\nexport interface NumericType {\n\treadonly min: number;\n\treadonly max: number;\n\treadonly signed: boolean;\n\n\treadonly byteSize: number;\n\treadonly arrayType: TypedArrayConstructor;\n}\n\n/**\n * Traits of unsigned 8-bit integer numbers.\n */\nexport const UInt8: NumericType = {\n\tmin: 0,\n\tmax: 255,\n\tsigned: false,\n\tbyteSize: 1,\n\tarrayType: Uint8Array\n};\n\n/**\n * Traits of unsigned 8-bit clamped integer numbers.\n */\nexport const UInt8Clamped: NumericType = {\n\tmin: 0,\n\tmax: 255,\n\tsigned: false,\n\tbyteSize: 1,\n\tarrayType: Uint8ClampedArray\n};\n\n/**\n * Traits of signed 8-bit integer numbers.\n */\nexport const SInt8: NumericType = {\n\tmin: -128,\n\tmax: 127,\n\tsigned: true,\n\tbyteSize: 1,\n\tarrayType: Int8Array\n};\n\n/**\n * Traits of unsigned 16-bit integer numbers.\n */\nexport const UInt16: NumericType = {\n\tmin: 0,\n\tmax: 65535,\n\tsigned: false,\n\tbyteSize: 2,\n\tarrayType: Uint16Array\n};\n\n/**\n * Traits of signed 16-bit integer numbers.\n */\nexport const SInt16: NumericType = {\n\tmin: -32768,\n\tmax: 32767,\n\tsigned: true,\n\tbyteSize: 2,\n\tarrayType: Int16Array\n};\n\n/**\n * Traits of unsigned 32-bit integer numbers.\n */\nexport const UInt32: NumericType = {\n\tmin: 0,\n\tmax: 4294967295,\n\tsigned: false,\n\tbyteSize: 4,\n\tarrayType: Uint32Array\n};\n\n/**\n * Traits of signed 32-bit integer numbers.\n */\nexport const SInt32: NumericType = {\n\tmin: -2147483648,\n\tmax: 2147483647,\n\tsigned: true,\n\tbyteSize: 4,\n\tarrayType: Int32Array\n};\n\n/**\n * Traits of 32-bit floating point numbers.\n */\nexport const Float: NumericType = {\n\tmin: -340282346638528859811704183484516925440.0,\n\tmax: 340282346638528859811704183484516925440.0,\n\tsigned: true,\n\tbyteSize: 4,\n\tarrayType: Float32Array\n};\n\n/**\n * Traits of 64-bit floating point numbers.\n */\nexport const Double: NumericType = {\n\tmin: -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0,\n\tmax: 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0,\n\tsigned: true,\n\tbyteSize: 8,\n\tarrayType: Float64Array\n};\n","/**\n * core/struct - structural primitive helpers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\n/**\n * Deep clone an object. Use only for simple struct types.\n * @param object The object to clone\n */\nexport function cloneStructDeep<T extends object>(object: T): T {\n\tconst copy: any = {};\n\tObject.getOwnPropertyNames(object).forEach(name => {\n\t\tif (typeof (object as any)[name] === \"object\" && (object as any)[name] !== null) {\n\t\t\tcopy[name] = cloneStructDeep((object as any)[name]);\n\t\t}\n\t\telse {\n\t\t\tcopy[name] = (object as any)[name];\n\t\t}\n\t});\n\treturn copy as T;\n}\n\n/**\n * Returns the count of properties in an object.\n * @param obj Any object\n */\nexport function propertyCount(obj: object) {\n\treturn Object.getOwnPropertyNames(obj).length;\n}\n\n/**\n * Create an immutable object that acts as a lookup table with numerical keys, such as (const) enum values.\n * @param keyVals Alternating key, value pairs\n */\nexport function makeLUT<A extends number, B>(...keyVals: (A | B)[]): { readonly [k: number]: Readonly<B>; } {\n\tconst lut: { [k: number]: B; } = {};\n\tconst count = keyVals.length;\n\tfor (let i = 0; i < count; i += 2) {\n\t\tlut[keyVals[i] as number] = keyVals[i + 1] as B;\n\t}\n\treturn Object.freeze(lut);\n}\n"],"names":["cond","msg","console","error","Error","oldBuffer","newByteLength","oldByteLength","byteLength","assert","slice","oldBufferView","Uint8Array","newBufferView","set","buffer","UInt8","min","max","signed","byteSize","arrayType","UInt8Clamped","Uint8ClampedArray","SInt8","Int8Array","UInt16","Uint16Array","SInt16","Int16Array","UInt32","Uint32Array","SInt32","Int32Array","Float","Float32Array","Double","Float64Array","object","copy","Object","getOwnPropertyNames","forEach","name","cloneStructDeep","obj","length","keyVals","lut","count","i","freeze"],"mappings":"AAcA,gBAAuBA,EAAWC,GACjC,IAAmBD,EAElB,MADAE,QAAQC,MAAMF,GAAO,oBACf,IAAIG,MAAMH,GAAO,oBCPzB,uBAA8BI,EAAwBC,GAKrD,MAAMC,EAAgBF,EAAUG,WAIhC,GAFAC,QADAH,GAAiC,GACV,GAEnBA,EAAgBC,EACnB,OAAOF,EAAUK,MAAM,EAAGJ,GAG3B,MAAMK,EAAgB,IAAIC,WAAWP,GAC/BQ,EAAgB,IAAID,WAAWN,GAGrC,OAFAO,EAAcC,IAAIH,GAEXE,EAAcE,OCFtB,MAAaC,OACZC,IAAK,EACLC,IAAK,IACLC,QAAQ,EACRC,SAAU,EACVC,UAAWT,YAMCU,cACZL,IAAK,EACLC,IAAK,IACLC,QAAQ,EACRC,SAAU,EACVC,UAAWE,mBAMCC,OACZP,KAAM,IACNC,IAAK,IACLC,QAAQ,EACRC,SAAU,EACVC,UAAWI,WAMCC,QACZT,IAAK,EACLC,IAAK,MACLC,QAAQ,EACRC,SAAU,EACVC,UAAWM,aAMCC,QACZX,KAAM,MACNC,IAAK,MACLC,QAAQ,EACRC,SAAU,EACVC,UAAWQ,YAMCC,QACZb,IAAK,EACLC,IAAK,WACLC,QAAQ,EACRC,SAAU,EACVC,UAAWU,aAMCC,QACZf,KAAM,WACNC,IAAK,WACLC,QAAQ,EACRC,SAAU,EACVC,UAAWY,YAMCC,OACZjB,KAAM,sBACNC,IAAK,sBACLC,QAAQ,EACRC,SAAU,EACVC,UAAWc,cAMCC,QACZnB,KAAM,uBACNC,IAAK,uBACLC,QAAQ,EACRC,SAAU,EACVC,UAAWgB,cC3GZ,yBAAkDC,GACjD,MAAMC,KASN,OARAC,OAAOC,oBAAoBH,GAAQI,QAAQC,IACL,iBAAzBL,EAAeK,IAAgD,OAAzBL,EAAeK,GAChEJ,EAAKI,GAAQC,gBAAiBN,EAAeK,IAG7CJ,EAAKI,GAASL,EAAeK,KAGxBJ,EAOR,uBAA8BM,GAC7B,OAAOL,OAAOC,oBAAoBI,GAAKC,OAOxC,oBAAgDC,GAC/C,MAAMC,KACAC,EAAQF,EAAQD,OACtB,IAAK,IAAII,EAAI,EAAGA,EAAID,EAAOC,GAAK,EAC/BF,EAAID,EAAQG,IAAgBH,EAAQG,EAAI,GAEzC,OAAOV,OAAOW,OAAOH"}