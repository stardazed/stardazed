{"version":3,"file":"index.esm.js","sources":["../src/debug.ts","../src/array.ts","../src/numeric.ts","../src/struct.ts","../src/index.ts"],"sourcesContent":["/**\n * core/debug - debugging helpers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nconst DEBUG_MODE = true;\n\n/**\n * asserts a condition to be true or throw an error otherwise\n * @param cond A condition that can be evaluated to true or false\n * @param msg Error message that will be thrown if cond is false\n */\nexport function assert(cond: any, msg?: string) {\n\tif (DEBUG_MODE && !cond) {\n\t\tconsole.error(msg || \"assertion failed\");\n\t\tthrow new Error(msg || \"assertion failed\");\n\t}\n}\n","/**\n * core/array - types and helpers for array-likes\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { assert } from \"./debug\";\n\n// TODO: move this out\nexport function arrayTransfer(oldBuffer: ArrayBuffer, newByteLength?: number) {\n\t// This placeholder implementation cannot detach `oldBuffer`'s storage\n\t// but `oldBuffer` is to be treated as a moved-from value in C++ terms\n\t// after calling transfer.\n\n\tconst oldByteLength = oldBuffer.byteLength;\n\tnewByteLength = newByteLength! | 0;\n\tassert(newByteLength > 0);\n\n\tif (newByteLength < oldByteLength) {\n\t\treturn oldBuffer.slice(0, newByteLength);\n\t}\n\n\tconst oldBufferView = new Uint8Array(oldBuffer);\n\tconst newBufferView = new Uint8Array(newByteLength); // also creates new ArrayBuffer\n\tnewBufferView.set(oldBufferView);\n\n\treturn newBufferView.buffer as ArrayBuffer;\n}\n\nexport type TypedArrayConstructor =\n\tUint8ArrayConstructor | Uint8ClampedArrayConstructor | Uint16ArrayConstructor | Uint32ArrayConstructor |\n\tInt8ArrayConstructor | Int16ArrayConstructor | Int32ArrayConstructor |\n\tFloat32ArrayConstructor | Float64ArrayConstructor;\n\nexport type TypedArray = Uint8Array | Uint8ClampedArray | Uint16Array | Uint32Array | Int8Array | Int16Array | Int32Array | Float32Array | Float64Array;\n\n// helper types for enums stored in int arrays\nexport interface ConstEnumArray8View<T extends number> extends Uint8Array {\n\t[index: number]: T;\n}\n\nexport interface ConstEnumArray32View<T extends number> extends Int32Array {\n\t[index: number]: T;\n}\n\n// special purpose or generic array interfaces used very frequently\nexport interface MutableArrayLike<T> {\n\treadonly length: number;\n\t[n: number]: T;\n}\n\nexport type ArrayOfConstNumber = ArrayLike<number>;\nexport type ArrayOfNumber = MutableArrayLike<number>;\n\n\n// types to use in function signatures to not have ArrayOfNumber everywhere\nexport type Float2 = ArrayOfNumber;\nexport type Float3 = ArrayOfNumber;\nexport type Float4 = ArrayOfNumber;\n\nexport type Float2x2 = ArrayOfNumber;\nexport type Float3x3 = ArrayOfNumber;\nexport type Float4x4 = ArrayOfNumber;\n\nexport type ConstFloat2 = ArrayOfConstNumber;\nexport type ConstFloat3 = ArrayOfConstNumber;\nexport type ConstFloat4 = ArrayOfConstNumber;\n\nexport type ConstFloat2x2 = ArrayOfConstNumber;\nexport type ConstFloat3x3 = ArrayOfConstNumber;\nexport type ConstFloat4x4 = ArrayOfConstNumber;\n","/**\n * core/numeric - numeric types, traits and array helpers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nimport { TypedArrayConstructor } from \"./array\";\n\n/**\n * Interface describing a binary representation of a number including its\n * limits, storage requirements and associated TypedArray constructor.\n */\nexport interface NumericType {\n\treadonly min: number;\n\treadonly max: number;\n\treadonly signed: boolean;\n\n\treadonly byteSize: number;\n\treadonly arrayType: TypedArrayConstructor;\n}\n\n/**\n * Traits of unsigned 8-bit integer numbers.\n */\nexport const UInt8: NumericType = {\n\tmin: 0,\n\tmax: 255,\n\tsigned: false,\n\tbyteSize: 1,\n\tarrayType: Uint8Array\n};\n\n/**\n * Traits of unsigned 8-bit clamped integer numbers.\n */\nexport const UInt8Clamped: NumericType = {\n\tmin: 0,\n\tmax: 255,\n\tsigned: false,\n\tbyteSize: 1,\n\tarrayType: Uint8ClampedArray\n};\n\n/**\n * Traits of signed 8-bit integer numbers.\n */\nexport const SInt8: NumericType = {\n\tmin: -128,\n\tmax: 127,\n\tsigned: true,\n\tbyteSize: 1,\n\tarrayType: Int8Array\n};\n\n/**\n * Traits of unsigned 16-bit integer numbers.\n */\nexport const UInt16: NumericType = {\n\tmin: 0,\n\tmax: 65535,\n\tsigned: false,\n\tbyteSize: 2,\n\tarrayType: Uint16Array\n};\n\n/**\n * Traits of signed 16-bit integer numbers.\n */\nexport const SInt16: NumericType = {\n\tmin: -32768,\n\tmax: 32767,\n\tsigned: true,\n\tbyteSize: 2,\n\tarrayType: Int16Array\n};\n\n/**\n * Traits of unsigned 32-bit integer numbers.\n */\nexport const UInt32: NumericType = {\n\tmin: 0,\n\tmax: 4294967295,\n\tsigned: false,\n\tbyteSize: 4,\n\tarrayType: Uint32Array\n};\n\n/**\n * Traits of signed 32-bit integer numbers.\n */\nexport const SInt32: NumericType = {\n\tmin: -2147483648,\n\tmax: 2147483647,\n\tsigned: true,\n\tbyteSize: 4,\n\tarrayType: Int32Array\n};\n\n/**\n * Traits of 32-bit floating point numbers.\n */\nexport const Float: NumericType = {\n\tmin: -340282346638528859811704183484516925440.0,\n\tmax: 340282346638528859811704183484516925440.0,\n\tsigned: true,\n\tbyteSize: 4,\n\tarrayType: Float32Array\n};\n\n/**\n * Traits of 64-bit floating point numbers.\n */\nexport const Double: NumericType = {\n\tmin: -179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0,\n\tmax: 179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0,\n\tsigned: true,\n\tbyteSize: 8,\n\tarrayType: Float64Array\n};\n","/**\n * core/struct - structural primitive helpers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\n/**\n * Deep clone an object. Use only for simple struct types.\n * @param object The object to clone\n */\nexport function cloneStructDeep<T extends object>(object: T): T {\n\tconst copy: any = {};\n\tObject.getOwnPropertyNames(object).forEach(name => {\n\t\tif (typeof (object as any)[name] === \"object\" && (object as any)[name] !== null) {\n\t\t\tcopy[name] = cloneStructDeep((object as any)[name]);\n\t\t}\n\t\telse {\n\t\t\tcopy[name] = (object as any)[name];\n\t\t}\n\t});\n\treturn copy as T;\n}\n\n/**\n * Returns the count of properties in an object.\n * @param obj Any object\n */\nexport function propertyCount(obj: object) {\n\treturn Object.getOwnPropertyNames(obj).length;\n}\n\n/**\n * Create an immutable object that acts as a lookup table with numerical keys, such as (const) enum values.\n * @param keyVals Alternating key, value pairs\n */\nexport function makeLUT<A extends number, B>(...keyVals: (A | B)[]): { readonly [k: number]: Readonly<B>; } {\n\tconst lut: { [k: number]: B; } = {};\n\tconst count = keyVals.length;\n\tfor (let i = 0; i < count; i += 2) {\n\t\tlut[keyVals[i] as number] = keyVals[i + 1] as B;\n\t}\n\treturn Object.freeze(lut);\n}\n","/**\n * sd-core - low level, common types and helpers\n * Part of Stardazed\n * (c) 2015-Present by Arthur Langereis - @zenmumbler\n * https://github.com/stardazed/stardazed\n */\n\nexport * from \"./debug\";\nexport * from \"./array\";\nexport * from \"./numeric\";\nexport * from \"./struct\";\n"],"names":[],"mappings":"AAAA;;;;;;AAOA,AAEA;;;;;AAKA,gBAAuB,IAAS,EAAE,GAAY;IAC7C,IAAI,AAAc,CAAC,IAAI,EAAE;QACxB,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,kBAAkB,CAAC,CAAC;QACzC,MAAM,IAAI,KAAK,CAAC,GAAG,IAAI,kBAAkB,CAAC,CAAC;KAC3C;CACD;;ACnBD;;;;;;AAOA,AAEA;AACA,uBAA8B,SAAsB,EAAE,aAAsB;;;;IAK3E,MAAM,aAAa,GAAG,SAAS,CAAC,UAAU,CAAC;IAC3C,aAAa,GAAG,aAAc,GAAG,CAAC,CAAC;IACnC,MAAM,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;IAE1B,IAAI,aAAa,GAAG,aAAa,EAAE;QAClC,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;KACzC;IAED,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,SAAS,CAAC,CAAC;IAChD,MAAM,aAAa,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC,CAAC;IACpD,aAAa,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAEjC,OAAO,aAAa,CAAC,MAAqB,CAAC;CAC3C;;AC5BD;;;;;;;;;AAyBA,MAAa,KAAK,GAAgB;IACjC,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,GAAG;IACR,MAAM,EAAE,KAAK;IACb,QAAQ,EAAE,CAAC;IACX,SAAS,EAAE,UAAU;CACrB,CAAC;;;;AAKF,MAAa,YAAY,GAAgB;IACxC,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,GAAG;IACR,MAAM,EAAE,KAAK;IACb,QAAQ,EAAE,CAAC;IACX,SAAS,EAAE,iBAAiB;CAC5B,CAAC;;;;AAKF,MAAa,KAAK,GAAgB;IACjC,GAAG,EAAE,CAAC,GAAG;IACT,GAAG,EAAE,GAAG;IACR,MAAM,EAAE,IAAI;IACZ,QAAQ,EAAE,CAAC;IACX,SAAS,EAAE,SAAS;CACpB,CAAC;;;;AAKF,MAAa,MAAM,GAAgB;IAClC,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,KAAK;IACV,MAAM,EAAE,KAAK;IACb,QAAQ,EAAE,CAAC;IACX,SAAS,EAAE,WAAW;CACtB,CAAC;;;;AAKF,MAAa,MAAM,GAAgB;IAClC,GAAG,EAAE,CAAC,KAAK;IACX,GAAG,EAAE,KAAK;IACV,MAAM,EAAE,IAAI;IACZ,QAAQ,EAAE,CAAC;IACX,SAAS,EAAE,UAAU;CACrB,CAAC;;;;AAKF,MAAa,MAAM,GAAgB;IAClC,GAAG,EAAE,CAAC;IACN,GAAG,EAAE,UAAU;IACf,MAAM,EAAE,KAAK;IACb,QAAQ,EAAE,CAAC;IACX,SAAS,EAAE,WAAW;CACtB,CAAC;;;;AAKF,MAAa,MAAM,GAAgB;IAClC,GAAG,EAAE,CAAC,UAAU;IAChB,GAAG,EAAE,UAAU;IACf,MAAM,EAAE,IAAI;IACZ,QAAQ,EAAE,CAAC;IACX,SAAS,EAAE,UAAU;CACrB,CAAC;;;;AAKF,MAAa,KAAK,GAAgB;IACjC,GAAG,EAAE,CAAC,yCAAyC;IAC/C,GAAG,EAAE,yCAAyC;IAC9C,MAAM,EAAE,IAAI;IACZ,QAAQ,EAAE,CAAC;IACX,SAAS,EAAE,YAAY;CACvB,CAAC;;;;AAKF,MAAa,MAAM,GAAgB;IAClC,GAAG,EAAE,CAAC,uTAAuT;IAC7T,GAAG,EAAE,uTAAuT;IAC5T,MAAM,EAAE,IAAI;IACZ,QAAQ,EAAE,CAAC;IACX,SAAS,EAAE,YAAY;CACvB;;ACvHD;;;;;;;;;;AAWA,yBAAkD,MAAS;IAC1D,MAAM,IAAI,GAAQ,EAAE,CAAC;IACrB,MAAM,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI;QAC9C,IAAI,OAAQ,MAAc,CAAC,IAAI,CAAC,KAAK,QAAQ,IAAK,MAAc,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE;YAChF,IAAI,CAAC,IAAI,CAAC,GAAG,eAAe,CAAE,MAAc,CAAC,IAAI,CAAC,CAAC,CAAC;SACpD;aACI;YACJ,IAAI,CAAC,IAAI,CAAC,GAAI,MAAc,CAAC,IAAI,CAAC,CAAC;SACnC;KACD,CAAC,CAAC;IACH,OAAO,IAAS,CAAC;CACjB;;;;;AAMD,uBAA8B,GAAW;IACxC,OAAO,MAAM,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC;CAC9C;;;;;AAMD,iBAA6C,GAAG,OAAkB;IACjE,MAAM,GAAG,GAAwB,EAAE,CAAC;IACpC,MAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC;IAC7B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,CAAC,EAAE;QAClC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAW,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAM,CAAC;KAChD;IACD,OAAO,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;CAC1B;;AC3CD;;;;;GAKG;;;;"}